def AbqStepCollectOutputRequests(step):

	"""

	Collects all Output Requests from a STEP.


	@step object: A reference to a STEP that can be retrieved from a previous call to GetEntity.

	@returns object: It returns a list containing all the output requests of the selected STEP.

	"""

def AbqStepCopyOutputRequest(step, output_request):

	"""

	Copies an Output Request from a STEP.


	@step object: A reference to a STEP that can be retrieved from a previous call to GetEntity.

	@output_request object: A reference to the output request to be copied.

	@returns integer: It returns 0 if the output requests are copied, 1 otherwise.

	"""

def AbqStepDeleteModalDampingParam(step, modal_parameter):

	"""

	Deletes Modal Damping mode numbers of a STEP's *MODAL DAMPING History Data


	@step object: A reference to a STEP that can be retrieved from a previous call to GetEntity.

	@modal_parameter object: A reference to a Modal Parameter that can be retrieved from a previous call to AbqStepInsertModalDampingParam or by its index number.

	@returns integer: It returns 1 in case of success or 0 in case of failure.

	"""

def AbqStepDeleteOutputRequest(step, output_request):

	"""

	Deletes one Output Request from a STEP.


	@step object: A reference to a STEP that can be retrieved from a previous call to GetEntity.

	@output_request object: A reference to the output request to be deleted.

	@returns integer: It returns 0 if output request is deleted, 1 otherwise.

	"""

def AbqStepGetAnalysisType(step):

	"""

	Returns the analysis type of a STEP as a string.


	@step object: A reference to a STEP that can be retrieved from a previous call to GetEntity.

	@returns string: It returns the analysis type of a STEP as a string or an empty string in case of failure.

	"""

def AbqStepGetOutputRequestName(output_request):

	"""

	Returns the name of the requested Output Request.


	@output_request object: A reference to the output request.

	@returns string: It returns the output request's name.

	"""

def AbqStepGetSetsFromOutputRequest(output_request):

	"""

	Returns all sets defined for the selected output request.


	@output_request object: A reference to the output request.

	@returns object: It returns a list containing all the sets of the selected output request.

	"""

def AbqStepInsertModalDampingParam(step, fields):

	"""

	Inserts Modal Damping mode numbers into a STEP's *MODAL DAMPING History Data.


	@step object: A reference to a STEP that can be retrieved from a previous call to GetEntity.

	@fields object: (optional)A dictionary of params-values pairs (MODAL, RAYLEIGH and STRUCTURAL parameters of *MODAL DAMPING).

	@returns object: It returns a reference to the created modal param or None in case of failure.

	"""

def AbqStepInsertOutputRequest(step, output_request, *varlen):

	"""

	Inserts an Output Request to a STEP.


	@step object: A reference to a Step that can be retrieved from a previous call to GetEntity

	@output_request string: The name of the output request (e.g. "*NODE FILE").

	@*varlen object: These arguments need to be pairs of labels - values. The labels are taken from the fields in the edit card. These fields are then assigned their respective values.

	@returns object: It returns a reference to the created output request or None in case of failure.

	"""

def AbqStepSetAnalysisType(step, analysis_type):

	"""

	Sets the analysis type of a STEP.


	@step object: A reference to a Step that can be retrieved from a previous call to GetEntity.

	@analysis_type string: The name of the analysis type (e.g. "*STATIC", "*BUCKLE", "*VISCO", "*DYNAMIC", 
	"*DYNAMIC TEMPERATURE-DISPLACEMENT", "*STEADY STATE DYNAMICS", "*FREQUENCY",
	"*COMPLEX FREQUENCY", "*MODAL DYNAMIC", "*RANDOM RESPONSE", "*STEADY STATE 
	TRANSPORT", "*HEAT TRANSFER", "*COUPLED TEMPERATURE-DISPLACEMENT", "*MASS 
	DIFFUSION", "*GEOSTATIC", "*DYNAMIC,EXPLICIT", "*SUBSTRUCTURE GENERATE", 
	"*MAGNETOSTATIC", "*ELECTROMAGNETIC", "*CFD").

	@returns integer: It returns 1 in case of success or 0 in case of failure.

	"""

def AbqStepSetHistoryData(step, type, fields):

	"""

	Sets the History Data parameters of a STEP.


	@step object: A reference to a Step that can be retrieved from a previous call to GetEntity.

	@type string: The history data name (e.g. "*RESTART", "*DIAGNOSTICS", "*INERTIA RELIEF", "*BULK
	VISCOSITY", "*GLOBAL DAMPING", "*MODAL DAMPING", "*SELECT EIGENMODES").

	@fields object: (optional)A dictionary of labels - values: The labels are taken from the fields in the edit cards. 
	These fields are then assigned the respective values.

	@returns integer: It returns 1 in case of success or 0 in case of failure.

	"""

def AbqStepUpdateModalDampingParam(step, modal_parameter, fields):

	"""

	Updates Modal Damping mode numbers of a STEP's *MODAL DAMPING History Data.


	@step object: A reference to a Step that can be retrieved from a previous call to GetEntity.

	@modal_parameter object: A reference to a Modal Parameter that can be retrieved from a previous call to AbqStepInsertModalDampingParam or by its index number.

	@fields object: (optional)A dictionary with pairs of labels - values. The labels depend on the MODAL, RAYLEIGH and STRUCTURAL parameters of *MODAL DAMPING.

	@returns integer: It returns 1 in case of success or 0 in case of failure.

	"""

def AbqStepUpdateOutputRequest(step, output_request, varlen):

	"""

	Changes the parameters of an Output Request.


	@step object: A reference to a Step that can be retrieved from a previous call to GetEntity.

	@output_request object: A reference to the output request to update

	@varlen: The function's arguments are pairs of labels - values: The labels are taken from the fields 
	in the edit card. These fields are then assigned the respective values.

	@returns integer: It returns 0 on success, 1 otherwise.

	"""

def AddConsToBC(bc, cons):

	"""

	Adds an entity or a list of CONS entities to a Fluent2D BC.


	@bc object: A Fluent BC.

	@cons object: A list with CONS entities.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def AddLinkedPartsToGroup(SrcParts, DestGroup):

	"""

	Creates a link of each part or group of the list SrcParts, to the destination group, DestGroup.


	@SrcParts object: A list of parts.

	@DestGroup object: The reference to the destination group.

	@returns integer: Returns the number of links successfully created.

	"""

def AddToBCSet(bcset, entity, factors):

	"""

	Adds an entity or a matrix containing entities, to a set.
	Use "AddToBCSet(BCSet, Entity)" for MPCADD or SPCADD.
	Use "AddToBCSet(BCSet, Entity, factors=FACTORS)" for A_DLOADSET or A_LOADSET.


	@bcset object: A reference to a bcset.

	@entity object: An entity or a list of entities to be added.

	@factors object: (optional)A list with floats.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def AddToHighlight(container, entities, colors):

	"""

	Add one or more entities, that are included into the list, into the HighlightContainer.
	The user is able to select the color according to which the highlight will be painted. 
	As input, a single color or a list containing color keywords can be given.
	If a list with colors is given, then every entity will be painted with different color,
	thus the number of containing colors must be equal to the number of given entities.
	The color keywords are the following: BLACK, RED, GREEN, BLUE, CYAN, YELLOW, BROWN,
	LIGHT_BROWN, GRAY, LIGHT_BLUE, LIGHT_GREEN, LIGHT_CYAN, LIGHT_RED, LIGHT_MAGENTA
	MAGENTA, WHITE.


	@container object: A reference to the highlight container entity.

	@entities object: A list with the entities to be highlighted.

	@colors object: (optional)A list of colors.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def AddToInclude(include, entities):

	"""

	Adds an entity or a list containing entities to an Include file.


	@include object: A reference to the include entity.

	@entities object: An object or a list of objects of ANSA entities to be added to the include.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def AddToLview(lock_view, entities):

	"""

	Adds an entity or a matrix containing entities, to a lock view. The AddToLview 
	function performs significantly faster when entities are added in the lock view 
	massively, through a list.


	@lock_view object: A reference to a lock view entity.

	@entities object: A reference or a list of references of ansa entities.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def AddToSet(set, entities, as_excluded):

	"""

	Adds an entity or a list containing entities, to a set.
	The AddToSet function performs significantly faster when entities are added in the set massively, through a list. 
	The element(s) can also be added as excluded if appropriate options are specified.


	@set object: The set entity reference.

	@entities object: A list of references or a single reference of the entities that will be added to the set.

	@as_excluded boolean: (optional)True or False to specify if the entities will be used as excluded.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def AirbagCreator(DECK,  GROUP_1, GROUP_2, RECON, PART):

	"""

	Fill the gap between two sets of shells. The function automatically keeps the outer most perimeter of each set and tries to fill the gap between the two perimeters. It fills the inner holes and duplicates the initial shells. All created elements are stored into a new set.


	@DECK integer: One of LSDYNA, PAMCRASH, ABAQUS, RADIOSS.

	@GROUP_1 object: A list with references of input data for the first set.

	@GROUP_2 object: A list with references of input data for the second set. (the above pointers are: shell property, shell,set, include, ansapart or ansagroup)

	@RECON object: The reconstruction flag (not equal to 0: reconstruction will take place, equal to 0: no reconstruction).

	@PART object: A reference to an ansapart, on which the function will store the results, or int PART_ID 
	is the module id of that part. If the 'id' is equal to 0 or there is no part with the specified
	module id, the script function creates a new one.

	@returns object: Returns a reference to the set, that contains the created references.
	In case of invalid input data or failure, it returns None.

	"""

def AlignGrids(nodes, target_entities, distance, offset, align_to, use_vector, dX, dY, dZ, align_to_midplane, isospace_grids, copy_grids, redraw, align_on_geometry):

	"""

	The function aligns grids to target elements. This functions behaves exactly the same as the Grids->Align function found in GUI. It receives, as input, a container that holds the grids to be aligned and a container that holds the target objects (entities such as shells or facets, grids or geometry objects such as faces or coons) upon which the grids will be aligned.


	@nodes object: A list of nodes to be moved.

	@target_entities object: A list of target entities.

	@distance float: (optional)The maximum distance that the algorithm will search in order to position the grids
	(default 10). In case Align upon grids plane or line is chosen if a distance is not
	given alignment will always be occuring, regardless distance.

	@offset float: (optional)The offset from the exact aligned position of the grids. (default 0)

	@align_to string: (optional)Choose if the target container holds elements, geometry or grids. (default = grids)

	@use_vector string: (optional)Choose if the projection will be in the user's choice direction or in the normal 
	vector direction of the elements or the current screen direction.
	Respective values are user_defined, normal_vector and screen_vector.

	@dX float: (optional)The user can choose a vector for the direction of the alignment.
	If none or zero given, a vertical vector will be used to the target.

	@dY float: (optional)The user can choose a vector for the direction of the alignment.
	If none or zero given, a vertical vector will be used to the target.

	@dZ float: (optional)The user can choose a vector for the direction of the alignment.
	If none or zero given, a vertical vector will be used to the target.

	@align_to_midplane boolean: (optional)Choose if the alignment should be implemented upon the midplane 
	of the element instead of its skin. (default = False)

	@isospace_grids boolean: (optional)If True, the grids will be positioned in equal intervals on their new 
	position.(default = True)

	@copy_grids boolean: (optional)If True, the function will copy the given 
	grids and reposition the ones it created.
	(default = True)

	@redraw boolean: (optional)if true the model will be redrawn after alignment.
	(default = False)

	@align_on_geometry boolean: (optional)If True and the target entities contain faces or elements of geometry
	the alignment will be done on the face's surface and not on the element's.
	(default = True)

	@returns integer: The function returns 1 on success or 0 otherwise.

	"""

def All():

	"""

	This function sets all entities to be visible on the screen.


	@models object: (optional)a model, or a list of models to set all entities of the referenced model(s) visible.
	or "all models" : in order to set all entities of all existing models (in all ansa windows) visible on the screen

	@returns integer: Returns 0 in all cases.

	"""

def AnalyticalSurfaceDeleteLine(surface, position):

	"""

	The AnalyticalSurfaceDeleteLine function deletes the line at position "position" in analytical surface's "surface" profile. If only two data lines exist in the profile (starting point, and one more) they cannot be deleted.


	@surface object: The existing analytical surface from which the line will be deleted.

	@position integer: Index in surface's profile, that specifies which line will be deleted.
	Position cannot be set to 1 since the first line that describes the starting points is mandatory.

	@returns integer: Returns 0 on succes, otherwise 1.

	"""

def AnalyticalSurfaceInsertLine(surface, fields):

	"""

	The AnalyticalSurfaceInsertLine function inserts a new data line after the last line in surface's profile.


	@surface object: The existing analytical surface entity to which the line will be inserted.

	@fields object: The values of the new line, defined in pairs of field - value :
	FIELD - VALUES 
	-"type" - "START" | "LINE" | "CIRCL" | "PARAB"], each type has the following keys with float values.
	-"START": "xs", "ys".
	-"LINE": "xe", "ye".
	-"CIRCL": "xe", "ye", "xc", "yc".
	-"PARAB": "xm", "ym", "xe", "ye".

	@returns integer: Returns 0 on succes, otherwise 1.

	"""

def AnalyticalSurfaceModifyLine(surface, fields, position):

	"""

	The AnalyticalSurfaceModifyLine function changes the specified values of the line in position "position", in the analytical surface "surface".


	@surface object: The existing analytical surface entity, upon which the line will be modified.

	@fields object: The values of the new line, defined in pairs  of field - value:
	-"type" - "START" | "LINE" | "CIRCL" | "PARAB"], each type has the following keys with float values.
	-"START": "xs", "ys".
	-"LINE": "xe", "ye".
	-"CIRCL": "xe", "ye", "xc", "yc".
	-"PARAB": "xm", "ym", "xe", "ye".

	@position integer: Index in analytical surface's profile matrix, that specifies which line will be modified. 
	It must be a positive number.
	Index 1 corresponds to the STARTing points.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def AnalyticalSurfaceProfileInfo(surface):

	"""

	Gets the values of the data lines that define the various line, circular, and parabolic segments that form the profile of the analytical surface.


	@surface object: The analytical surface entity, to get info from.

	@returns object: Returns a dictionary on success, otherwise None.
	
	The dictionary's first entry has a key "type" with data ["START" | "LINE" | "CIRCL" | "PARAB"].
	For each case the rest of the dictionary's entries have the following keys with float values:
	- "START" : "xs", "ys".
	- "LINE"  : "xe", "ye".
	- "CIRCL" : "xe", "ye", "xc", "yc".
	- "PARAB" : "xm", "ym", "xe", "ye".

	"""

def And(entities, deck, keyword, id, apply_on_contents):

	"""

	This function sets the entities matching the criteria defined by the
	arguments to be visible on screen.


	@entities object: A list of entities to appear on screen.
	NOTE: This argument can be ommited, if the arguments 'keyword' 
	and 'id' are defined.

	@deck integer: (optional)The deck type of the entities which will be visible, 
	e.g. deck = constants.NASTRAN.

	@keyword string: (optional)The entity type for the specified id (i.e. "PSHELL").

	@id integer: (optional)The ID of the specified entity, or a list with the IDs of the 
	entities to be removed from the screen.

	@apply_on_contents boolean: (optional)If set to True, it will also apply the focus command 
	on the contents of the given entity, else it will not.
	(Default: True)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def ApplyConnectors(connectors):

	"""

	This function applies the corresponding connector, or all the connectors contained in a list.
	
	A single connector can be retrieved from a previous call to GetEntity.
	A list of connectors can be retrieved from a previous call to CollectEntities.


	@connectors object: A single connector entity or a list of connector entities.

	@returns integer: Returns 0 if invalid arguments were specified, or 1 otherwise.

	"""

def ApplyGenericEntities(entities):

	"""

	This function applies the corresponding Generic Entity, or all the Generic entities contained in a matrix. 
	An entity is a reference to an element.It can be retrieved from a previous call to GetEntity.


	@entities object: A Generic Entity object or a list of objects to be applied.

	@returns integer: Returns 0 if invalid arguments were specified, or 1 otherwise.

	"""

def ApplySubcontainerRules(includes):

	"""

	This function applies subcontainer rules for the specified includes.


	@includes object: A reference to an include or a list with references to includes.

	@returns integer: The function returns 0.

	"""

def AutoCalculateOrientation(entities, grey_outside_volume):

	"""

	The function searches for inverted areas and corrects their orientation.


	@entities object: A list of properties, parts, shells or faces. Accepted values are a list of properties, parts or faces, "Visible".

	@grey_outside_volume boolean: (optional)Used to declare whether grey areas will point outside of the volume or not.

	@returns integer: Returns 0 when the orientation is succesful. Otherwise the user should check the result.

	"""

def AutoSurfs():

	"""

	Automatically creates surfaces and faces from a wire base.


	@returns integer: Always returns 0.

	"""

def AutoSurfsMatrix(CURVES):

	"""

	This function automatically creates a surface with face.


	@CURVES object: A list of curves. The function takes all the contents of the list and creates 
	a surface with face. Else if the variable is FALSE (0 or NULL or anything else) then
	the function takes all the visible curves of database and creates a surface with face.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def BoundBox(entities):

	"""

	Get a list with the minimum and maximum 3D coordinates of the entity.


	@entities object: The entities for which the bound box will be calculated.

	@returns object: Returns a list with 6 floats, containing the minimum and maximum 3D coordinates of the entity.
	If the respective entity doesn't support bounding functionality, None is returned.

	"""

def BranchEntity(entity, node_ids, action, dof):

	"""

	Modifies the nodes of an element that has a master-slave node connectivity or create a branch entity.


	@entity object: is a reference to the element entity to be modified or the element type "RBE2" or "RBE3", 
	in case a new entity is to be generated.

	@node_ids integer: A list of node ids to be searched for and branched.

	@action string: (optional)Is one of "add" or "remove". Use one of these to add or remove nodes from the ENTITY. 
	Use the option "add" when creating new entities.

	@dof integer: (optional)Applies only in case of EXTRN. Defines the degrees of freedom for the defined nodes. 
	(Default value: 123456)

	@returns object: Returns the entity if the branch operation was successful.
	None is returned if an error occurs or the entity is deleted for reasons previously described.

	"""

def BreakSurfsAuto(faces, discontinuity, patches, const_curvature, peaks_curvature, hot_points, twisted_faces_only, threshold):

	"""

	Breaks faces at positions where there are discontinuities or large additive variation of surface curvature.
	Works on visible faces.


	@faces object: (optional)A list of faces. If empty or zero, works on visible.

	@discontinuity boolean: (optional)If 1 detect discontinuities, otherwise 0.

	@patches boolean: (optional)If 1 detect surface patches borders, otherwise 0.

	@const_curvature boolean: (optional)If 1 detect constant curvature, otherwise 0.

	@peaks_curvature boolean: (optional)If 1 detect maximum curvature peak, otherwise 0.

	@hot_points boolean: (optional)If 1 break at hot-points, otherwise 0.

	@twisted_faces_only boolean: (optional)If 1 and "peaks_curvature" 1 will break curvature peaks with twist.

	@threshold float: (optional)Real number in [0, 1] if "peaks_curvature" thresholds curvature peaks per face 
	with respect to the maximum curvature peak.

	@returns integer: Always returns 1.

	"""

def SaveFileAsStep(filename):

	"""

	This function saves all visible entities to a CAD file with extension .step or .stp.


	@filename string: A filesystem path.

	@returns integer: Returns 0 in all cases.

	"""

def SaveFileAsVda(filename):

	"""

	This function saves all visible entities to a CAD file with extension .vda or .vdafs.


	@filename string: A filesystem path.

	@returns integer: Returns 0 in all cases.

	"""

def ChangeElementsOrder(type, change_order, set, auto_transition):

	"""

	Changes the order of shell and solid elements.


	@type string: The element type can be Shells, Solids or Shells&Solids.

	@change_order string: The type of change can be 1st To 2nd or 2nd To 1st.

	@set object: (optional)The Set that will be selected.
	If set to None or not given, all entities are selected.

	@auto_transition boolean: (optional)Boolean that sets the Auto transition flag.

	@returns integer: It returns 0 in all cases.

	"""

def ConsMatchingDistance(MATCH_DISTANCE):

	"""

	This function sets the curves tolerances with which the automatic Topology takes place in ANSA. This is one of the two Tolerance values that ANSA uses during Topology. The Tolerance for curves is refered to as the CONS Matching Distance and the minimum for this is calculated to be 10E-09.


	@float MATCH_DISTANCE

	@returns integer: It returns 0 in all cases.

	"""

def CalcElementMass(entities, no_nsm, deck):

	"""

	Calculates the mass properties of an entity. Calculated values are returned in a list.


	@entities object: The entities where the calculations will take place.

	@no_nsm boolean: (optional)If True, the NSM mass will be ignored.

	@deck integer: (optional)The deck where the given entities belong. Some keywords work for specific decks.

	@returns object: Returns a list upon success, 0 otherwise.
	The list is as follows:
	                
	matrix[0]       mass
	matrix[1]       X coordinate of center of gravity
	matrix[2]       Y coordinate of center of gravity
	matrix[3]       Z coordinate of center of gravity
	matrix[4]       Ixx moment of Inertia
	matrix[5]       Iyy moment of Inertia
	matrix[6]       Izz moment of Inertia
	matrix[7]       Ixy product of Inertia
	matrix[8]       Ixz product of Inertia
	matrix[9]       Iyz product of Inertia
	matrix[10]      I1 principal moment of Inertia
	matrix[11]      I2 principal moment of Inertia
	matrix[12]      I3 principal moment of Inertia
	matrix[13]      e1x x component of unit vector e1 along axis 1
	matrix[14]      e2x x component of unit vector e2 along axis 2
	matrix[15]      e3x x component of unit vector e3 along axis 3
	matrix[16]      e1y y component of unit vector e1 along axis 1
	matrix[17]      e2y y component of unit vector e2 along axis 2
	matrix[18]      e3y y component of unit vector e3 along axis 3
	matrix[19]      e1z z component of unit vector e1 along axis 1
	matrix[20]      e2z z component of unit vector e2 along axis 2
	matrix[21]      e3z z component of unit vector e3 along axis 3

	"""

def CalcQCHECK(ENTS, SKEWNESS_FLAG, WARPING_FLAG, ASPECT_FLAG):

	"""

	Calculates the total QCHECK value of all components included in the list.


	@ENTS object: A list of entities that should contain shells, faces or PSHELL properties.

	@SKEWNESS_FLAG boolean: Flag for skewness criterion.

	@WARPING_FLAG boolean: Flag for warping criterion.

	@ASPECT_FLAG boolean: Flag for aspect criterion.

	@returns float: Returns the calculated QCHECK value or 0 if no calculation could be done.

	"""

def CalcShellArea(ENTITY):

	"""

	Calculates the area of a shell element, solid facet, or shell like element.
	Shell like elements supported: 
	                (RIGID, SURFACE, GASKET_LINE, ACOUSTIC, SEGMENT, CAABSF3/4)


	@ENTITY object: A shell like entity object that can be first or second order or a solid facet.

	@returns float: Returns the value of the area of the shell like entity or solid facet.
	Returns 0 if the input entity is not supported.

	"""

def CalcSolidVolume(entity):

	"""

	Calculates the volume of a solid element or an ANSA volume entity.


	@entity object: A solid entity object that can be first or second order or an ANSA volume entity.

	@returns float: Returns the value of the volume of the solid or the ANSA volume entity.

	"""

def CalculateGridsThickness(nodes, target_entities, distance, factor, calculate_to, use_vector, dX, dY, dZ, calculate_to_midplane, redraw):

	"""

	A function that calculates the nodal thickness according to the projection upon the target elements. This functions behaves exactly the same as the Grids->THICKNESS->Calc. Thickness function found in GUI.


	@nodes object: A list of grids where thickness will be calculated.

	@target_entities object: A list of entities, grids or geometry objects, such as faces or coons, 
	according to which the thickness will be calculated.

	@distance float: (optional)The maximum distance that the algorithm will search in order to position 
	the grids.
	(Default: 10.)

	@factor float: (optional)The factor with which the calculated thickness will be multiplied.
	(Default: 1.)

	@calculate_to string: (optional)Choose if the target container holds elements, geometry or grids.
	(Default: 'grids')

	@use_vector string: (optional)Choose between 'user_defined', 'normal_vector' or 'screen_vector'.

	@dX float: (optional)The user can choose a vector for the direction of the calculation.
	If none or zero given, a vertical vector, to the target, will be used.

	@dY float: (optional)The user can choose a vector for the direction of the calculation.
	If none or zero given, a vertical vector, to the target, will be used.

	@dZ float: (optional)The user can choose a vector for the direction of the calculation.
	If none or zero given, a vertical vector, to the target, will be used.

	@calculate_to_midplane boolean: (optional)Choose if the calculation should be implemented upon the midplane 
	of the element instead of its skin.
	(Default: False)

	@redraw boolean: (optional)If true the model will be redrawn after alignment.
	(Default: False)

	@returns integer: Returns 1 on success and 0 otherwise.

	"""

def CalculateOffElements(entity):

	"""

	Calculates the off elements of the database according to the active quality criteria.
	
	Accepted entities are batch mesh sessions, batch mesh scenarios, part, 
	properties, volumes, macros, shells or solids. In case of a batch mesh session the quality
	criteria of the session are used. In case of a batch mesh scenario the 
	quality criteria of the sessions are used.
	In all other cases the quality criteria specified in the 
	Presentation Parameters window are used. 
	
	In case no argument is given the function will return the off elements
	of visible elements.


	@entities object: A list of items suitable for quality calculation. Accepted items are batch mesh scenarios and sessions, parts, properties, volumes, shells, solids, and macros.

	@returns object: Returns a dictionary with keys the criteria names and data the number of off elements 
	in the particular criterion.
	
	e.g.: {'ANGLE': 2, 'TOTAL OFF': 10, 'SKEW': 8, 'WARP': 0}

	"""

def ChangeCP(CORD, GRID):

	"""

	This function changes the coordinate system associated to a GRID or a collection of GRIDs.


	@CORD object: A reference to the new coordinate system to be associated to GRID. 
	Insert None to switch to the global coordinate system.

	@GRID object: A reference to a single GRID or a collection/matrix of GRIDs.

	@returns integer: Returns 1 on success or 0 otherwise.

	"""

def ChangeElemType(deck, element, target_name, user_part_name, target_part_name, pid):

	"""

	Changes the element's type from a source type to a destination type.


	@deck integer: The deck for which the type of the element will be changed.

	@element object: A list of elements to change their type.

	@target_name string: The target element type. The type string must be written as it appears 
	in the function ELEMENTs>Util>Change Type.

	@user_part_name string: (optional)The source part name (deprecated).

	@target_part_name string: (optional)Assign new element to a specific part.

	@pid integer: (optional)Assign a specific PID in the new element.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def ChangeRepresentationToDontUse(parts, incl_connectors):

	"""
	Deprecated since version 17.0.0. Use function ChangeRepresentation instead.

	Changes the representation of a given list of ANSA PARTS, to the "Don't Use" one.


	@parts object: A list that contains the parts that will
	be assigned a "Don't Use" representation.

	@incl_connectors boolean: A boolean that defines whether the external
	connectors should be included in the 
	"Don't Use" representation or not.

	@returns integer: Returns 1 on failure and 0 on success.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function ChangeRepresentation instead.", DeprecationWarning)

def ChangeRepresentationToLumpedMass(parts, incl_connectors, rbe_opt):

	"""
	Deprecated since version 17.0.0. Use function ChangeRepresentation instead.

	Changes the representation of a given list of ANSA PARTS, to the Lumped Mass one.


	@parts object: that contains ANSA Parts

	@incl_connectors boolean: Determines whether the external connectors will be included in the Lumped Mass representation.

	@rbe_opt string: Determines the type of the connecting element that will be used.
	Valid types are: "RBE2", "RBE3"

	@returns integer: Returns 1 on failure and 0 on success.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function ChangeRepresentation instead.", DeprecationWarning)

def ChangeRepresentationToSPC(parts, incl_connectors, spc_dofs):

	"""

	Changes the representation of a given list of parts, to an SPC representation.


	@parts object: A list that contains parts whose representation
	will change to SPC.

	@incl_connectors boolean: A boolean that determines if the external connectors 
	will be included or not in the SPC representation

	@spc_dofs integer: (optional)Integer that specifies the affected Degrees Of Freedom.

	@returns integer: Returns 1 on failure and 0 on success.

	"""

def ChangeRepresentationToTrim(parts, incl_connectors, distance, mass, deck):

	"""
	Deprecated since version 17.0.0. Use function ChangeRepresentation instead.

	The function changes the representation of a given list of ANSA PARTS, to the "Trim" one.


	@parts object: A list that contains the ANSA parts that
	will be assigned a "Trim" representation.

	@incl_connectors boolean: Determines whether external connectors will
	be included in the "Trim" representation.

	@distance float: Search distance of the respective GEB_MT.

	@mass float: Mass field of the respective GEB_MT.

	@deck string: A string that describes the deck.

	@returns integer: Returns 1 on failure and 0 on success.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function ChangeRepresentation instead.", DeprecationWarning)

def ChangeRepresentationToUse(parts):

	"""
	Deprecated since version 17.0.0. Use function ChangeRepresentation instead.

	Changes the representation of a list of ANSA PARTS, to the Use one.


	@parts object: A list that contains ANSA parts whose 
	representation will change to the "Use" one.

	@returns integer: Returns 1 on failure and 0 on success.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function ChangeRepresentation instead.", DeprecationWarning)

def CheckAndFixGeometry(input, options, fix_options, return_one_matrix_for_every_error, remaining_errors):

	"""

	This function performs geometry checks and fixes them.


	@input object: An entity or a list of entities, parts, properties, materials, 
	sets or faces.
	If 0 is given visible entities will be taken into account.

	@options object: A list with check options "UNMESHED MACROS", "UNCHECKED FACES", 
	"NEEDLE FACES", "COLLAPSED CONS", "TRIPLE CONS", "OVERLAPS", 
	"CRACKS", "SINGLE CONS".

	@fix_options object: A list with 1 or 0 corresponding to the options and denotes 
	if the errors will be fixed or not.

	@return_one_matrix_for_every_error boolean: (optional)Returns a list with lists for each error 
	containing the failed entities.

	@remaining_errors boolean: (optional)Returns a list with the types of the errors.

	@returns object: Returns the following dictionary:
	key: 'failed'           values: list of failed entities.
	key: 'per_error'        values: list with lists of failed entities.
	key: 'remaining_errors' values: list with remaining error strings.
	
	None in case of no error.

	"""

def CheckAndFixPenetrations(type, fast_run, factor, fix, user_thic, max_dist, min_dist, chk_same_pid, use_const_len, orientation_based, orientation_mode, max_angle, return_regions):

	"""

	Checks the existence of intersections and thickness penetrations between elements.


	@type integer: Defines the type of penetration check:
	1 = intersections
	2 = property thickness
	3 = user thickness
	4 = distance range
	5 = proximities

	@fast_run boolean: True: the function will exit on first intersection it finds.
	False: the function will search for all intersections.

	@factor float: (optional)The scale factor for the element thicknesses.

	@fix boolean: (optional)A flag for fixing existing penetrations (True or False).

	@user_thic float: (optional)The needed user defined thickness.

	@max_dist float: (optional)The needed maximum distance.

	@min_dist float: (optional)The needed minimum distance.

	@chk_same_pid boolean: (optional)A flag for self-proximities check (True or False).

	@use_const_len boolean: (optional)A flag for absolute distance check.
	(False = element length factor check , True = absolute distance check ).

	@orientation_based boolean: (optional)The old flag that defined orientation mode (True = grey-grey, False = everything).
	This flag is ignored if orientation_mode is defined.

	@orientation_mode integer: (optional)A flag for orientation mode (1 = grey-grey, 2 = yellow-yellow, 0 = everything).

	@max_angle float: (optional)The value for maximum allowed angle between proximity elements.

	@return_regions boolean: (optional)True : The final penetrated and/or intersected elements will be grouped 
	to penetration region areas ( defined by edge neighbourhoud ). 
	The returning list will contain sublists with the entities of each such area.
	False: The returning list contains all the penetrated and/or intersected elements.

	@returns object: Returns:
	-1: If there is an error in input data.
	None: If no penetrations/intersections are found.
	1: If any penetrations/intersections are found and fast_run is True.
	A list containing all penetrated/intersected elements: If fast_run is False.

	"""

def CheckAndFixRigidDependencies(log):

	"""

	Checks the existence of rigid dependencies under LS-DYNA and RADIOSS decks and fixes them. 
	The check will run on non-visible entities also.


	@log integer: (optional)Log results on info box. Values are 0 and 1. Default is 0.

	@returns integer: The function returns 0.

	"""

def CheckConnections(InputConnectionsArray, InputCheckDataArray, OutputCheckReportArray):

	"""
	Deprecated since version 17.0.0. Use class Check instead.

	This function is deprecated please use base.Check() instead.
	
	Checks connections (spotwelds or spotlines) for specific violations.


	@InputConnectionsArray object: A list that contains the connections to check. 
	If empty or undefined the check will run on visible.

	@InputCheckDataArray object: A list that contains the description of checks to be done 
	and their variables. Filled from the user. This list must contain 
	one list for every check to be done. Every check-submatrix must 
	contain the check's name at the first position (to define that 
	this check will be performed) and then the name of a variable 
	and the value of it. The available checks and their variables 
	are the following:
	"Check number of parts < 2"
	"Check maximum distance", "method", "factor", "distance" 
	( method : 1 = search by factor , 2 = search by distance ).
	"Check minimum distance", "method", "factor", "distance" 
	( method : 1 = search by factor , 2 = search by distance ).
	"Check flanges angle", "angle". "Check projections proximity", 
	"proximity". "Check total thickness", "total_thic".
	"Check intersecting parts". "Check spider positioning", 
	"diameter", "zone_width", "zone_index", "perim_dist", 
	"distance_from_feature","feat_angle" ( zone_index : 1 = absolute, 2: *diameter )
	"Check connections outside flange". "Check double", "equivalent_connectivity",
	"same_type", "curves_faces_distance" (dist > 0), "similarity" (sim>=0 and sim <=100),
	"average_thickness_factor" or "spot_distance" (value > 0)
	"sdist" : value for "Check projections success" but we don't need to define 
	the name of this check because it is always performed first.
	If a variable is not/wrongly defined, it will have it's default ANSA value.

	@OutputCheckReportArray object: Contains the results of the check(s), it is filled from the check. 
	This list contains one matrix for every failed check. Every submatrix 
	contains the violation name at the first position and then the violating 
	connections. In case of failed "Check projections proximity" the list 
	will contain pairs of violating connections. The possible violation 
	messages are the following:
	"No connectivity parts defined"
	"Only one part defined"
	"Missing parts/properties"
	"Connection failed to project".
	"Bad maximum distance between outer parts".
	"Bad maximum distance between inner parts".
	"Bad minimum distance between outer parts".
	"Bad minimum distance between inner parts".
	"Bad connecting flanges angle".
	"Bad total thickness of connecting parts".
	"Connection is outside flange".
	"Bad Spider positioning".
	"Intersecting parts between connection flanges".
	"Connections have too close projections on flange".
	"Double connections".

	@returns integer: Returns the number of the connections that failed a test.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class Check instead.", DeprecationWarning)

def CheckDMUpdates(parts, data):

	"""

	This function checks for updates of a list of parts in DM or searches DM 
	according to specific criteria.


	@parts object: A list of entities to check for, or an ANSA Type to be queried.

	@data object: This argument can be either a dictionary or a list.
	In case "data" is a dictionary, it is used to check for DM Updates.
	When "data" is a list, it is used to search DM with specific filters.

	@returns object: The function returns a dictionary:
	key='error'     values: 0(Success), 1(Nothing found), 2(No DM ROOT set), 3(No access to DM ROOT), 4(Error in filters)
	key='output'    values: A list with lists of results for each part of the input list
	
	The list returned under the "output" key has the same size as the parts list (input argument)
	disregarding any empty or multi-instanciated parts. For each part there is a corresponding result.
	
	If nothing was found for one part, then the corresponding entry in the list is 0.
	Otherwise, in the corresponding position of the output list, a sub-list is returned, which
	references ANSA DM Items in a similar manner to the DM Browser. Each ANSA DM Item that was returned
	from the function has an Attribute with the name "DM Updates" which describes the 
	type of the update(e.g. "Newer File", "Newer Version"). These items can be downloaded using the
	DownloadPartsFromDM() function, and any information needed about them can be retrieved using GetEntityCardValues().

	"""

def CheckFree(visibility, nodes_with_mass_free):

	"""
	Deprecated since version 18.1.0. Use function FreeNodes instead.

	Checks for free nodes.


	@visibility string: Set to "visible", in case CHECK FREE applies to VISIBLE nodes only, or "all", 
	in case CHECK FREE applies to WHOLE DB, just like the sub-pulldown menu of the 
	original CHECK FREE function.

	@nodes_with_mass_free boolean: (optional)True (default): considers nodes with masses as free dependent.

	@returns object: Returns a list containing references to the FREE nodes on success, or 0 if invalid arguments were specified or if no FREE nodes were found.

	"""

	import warnings; warnings.warn("Deprecated since version 18.1.0. Use function FreeNodes instead.", DeprecationWarning)

def CheckInteriorIntersections(fast_run, entities):

	"""

	Checks for intersections including the interior of solids (not only skin).


	@fast_run boolean: If fast_run = True the check will run for visible entites.
	If fast_run = False the check will search for all intersections.

	@entities object: (optional)A list with the entities to be checked.
	If not defined the check will run for visible entites.

	@returns object: Returns a dictionary with keys 'intersected' containing the intersected elements and 'intersections' containing the number of intersected elements.

	"""

def CheckIntersections(check_visible, fast_run, return_regions):

	"""

	Checks the existence of intersections between elements.


	@check_visible boolean: If True the function will work on visible entities only.
	If False the function will work on the whole database.

	@fast_run boolean: If True the function will exit on first intersection it finds.
	If False the function will search for all intersections.

	@return_regions boolean: (optional)If True the intersected elements will be grouped to region 
	areas (defined by edge neighbourhoud). 
	The returning list will contain sublists with the entities of each such area.
	If False, the returning list contains all the intersected elements.

	@returns object: Returns None if no intersections are found.
	Returns 1 if any intersections are found and fast_run = True
	Returns a list containing all intersected elements if fast_run = False and return_regions = False.
	Returns a list containing one list per intersected region if fast_run = False and return_regions = True.

	"""

def CheckListAddFixFunc(header, fix_func):

	"""
	Deprecated since version 17.0.0. Use class CheckReport instead.

	Add a user defined function for Header header item with name 'FixFunction'.
	FixFunction should be a user function of the form FixFunction(entities,
	user_defined_data) entities is a copy of the list used as a second argument
	of the CheckListAddItem function, while user_defined_data should be of the same
	type as the last argument of CheckListAddItem function.


	@header object: A reference to a list header.

	@fix_func string: The name of the function to be called when the user calls fix.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class CheckReport instead.", DeprecationWarning)

def CheckListAddItem(header, entities, message, user_data):

	"""
	Deprecated since version 17.0.0. Use class CheckReport instead.

	Adds an item in the Checks List under HeaderItem, containing references to
	Ansa Entities with string Description. The last argument is user data.
	The user can pass any data, and they will be copied and passed as
	an argument to the user loaded Fix Function. User data will be
	destroyed when the list item is deleted or the List is closed.


	@header object: A reference to header item to add items to.

	@entities object: A list of entities to associate with the added item.

	@message string: A string description.

	@user_data object: The user can pass any data which will be copied and passed as
	an argument to the user loaded Fix Function.

	@returns object: Returns a reference to the item created.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class CheckReport instead.", DeprecationWarning)

def CheckListChangeErrorClass(item, status):

	"""
	Deprecated since version 17.0.0. Use class CheckReport instead.

	CheckListChangeErrorClass will change the error status of an ErrorItem.


	@item object: A reference to a list item.

	@status string: An error class that can be either "ERROR", "WARNING" or "OK".

	@returns integer: The returned value is always 0.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class CheckReport instead.", DeprecationWarning)

def CheckListGetErrorGroups():

	"""
	Deprecated since version 17.0.0. Use class CheckReport instead.

	CheckListGetErrorGroups will give access to the Error Groups of an Open Checks List window.


	@returns object: It returns a matrix containing the different Error Group Headers that can be used with
	CheckListGetFirstError and CheckListGetErrorValue functions.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class CheckReport instead.", DeprecationWarning)

def CheckListGetErrorValue(header, field):

	"""
	Deprecated since version 17.0.0. Use class CheckReport instead.

	CheckListGetErrorValue will give access to the data associated with each error.


	@header object: The header object.

	@field string: Field label can be either "DESCRIPTION" or "ENTITIES".

	@returns object: If label is "DESCRIPTION" the string with the error description is returned.
	If label is "ENTITIES", a list with the ansa entities associated with the error is returned.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class CheckReport instead.", DeprecationWarning)

def CheckListGetFirstError(header):

	"""

	CheckListGetFirstError will give access to the First Error belonging to an Error Group.
	ErrorGroup can be obtained by the CheckListGetErrorGroups function.


	@header object: A reference to a list header.

	@returns object: It returns an Error Item that can be used with CheckListGetNextError and CheckListGetErrorValue
	functions.

	"""

def CheckListGetNextError(previous_error):

	"""

	CheckListGetNextError will give access to the Next Error item of PreviousError. CheckListGetNextError and CheckListGetFirstError are used to loop through all Error of an Error Group.


	@previous_error object: 'previous_error' is obtained by a call to either CheckListGetFirstError or CheckListGetNextError
	functions.

	@returns object: It returns an Error Item that can be used with CheckListGetNextError and CheckListGetErrorValue functions.

	"""

def CheckListNewHeader(name):

	"""

	Opens the Checks List and adds a HeaderItem with label HeaderTitle that can be used by the
	user for custom Checks.


	@name string: The title of the header.

	@returns object: A reference to the item is returned, to be used by the CheckListAddItem function.

	"""

def CheckPenetration2Sets(entities1, entities2, mode, factor, fast_run):

	"""

	The function detects intersections and/or penetrations between 2 containers only.


	@entities1 object: The first container

	@entities2 object: The second container

	@mode integer: 1: intersections , 2: property thickness , 3: user thickness

	@factor float: Factor for property thickness, value for user thickness, ignored in intersections

	@fast_run integer: 0: ignored , 1: test will stop at the first intersection detected , 2: test will
	stop at the first penetration or intersection detected.

	@returns object: On success the function returns a dict with: key | value 
	"intersected" > the intersected entities 
	"penetrated" > the penetrated entities 
	"penetrations" > the total number of penetrations
	
	On failure the function returns None.

	"""

def CheckSharpEdges(input_entities, input_angle, exclude_macro_perimeter_edges):

	"""

	This function accepts a list of entities, parts, properties, materials, sets or macros.
	If the INPUT is 0, the visible macros and shells are checked.
	All shells are collected from the INPUT and are checked for sharp edges, with an
	angle value larger than the input ANGLE.
	The shells who have a sharp edge between them, are returned in the three matrices,
	according to their type.


	@input_entities object: A list of entities, parts, properties, materials, sets or macros, to
	check for sharp edges.
	If 0 is given, all the visible macros and shells are checked.

	@input_angle float: Any angle larger thatn the 'input_angle' will be considered as a 
	sharp edge.

	@exclude_macro_perimeter_edges boolean: (optional)If set to True, excludes the macro perimeter edges.

	@returns object: The function returns a dictionary. 
	The keys are the error names and their respective data are lists containing the entities belonging to each group.
	
	The dictionary keys can be:
	'concave_errors'
	'convex_errors'
	'mixed_errors'
	
	If no errors are found, None is returned.

	"""

def CleanGeometry():

	"""

	This function automatically fixes most of the common topological problems.
	It eliminates: 
	
	-Collapsed CONS.
	-Gaps (small openings between Faces).
	-Cracks (unpasted cons).
	-Triple or more CONS (needle Faces).
	-In addition it performs topology on all visible entities.


	"""

def ClearCurves(curves):

	"""

	This function can be used to delete identical curves from a model in order to be left
	with unique ones.


	@curves object

	@returns integer: Returns 0 upon success or 1 in case of failure.

	"""

def ClearDeck(fields, deck):

	"""

	The function clears the database from unused DECK entities.


	@fields object: A dictionary of (entity name, value) pairs.
	Value is 1 or 0, indicating if the entity is going to be cleared or not, respectively.

	@deck integer: (optional)The deck to be cleared.

	@returns integer: Returns 0 if the deck was cleared, or 1 if there was an error in input.

	"""

def ClearIdsRange(ENT_TYPE, START_RANGE_ID, END_RANGE_ID, FROZEN_IDS_FORCE):

	"""

	This function clears a range from entities that occupy ids inside the range.


	@ENT_TYPE string: The type of entities, e.g. "GRID", or a matrix containing several types of entities, 
	or "ALL" for all existing types of entities.

	@START_RANGE_ID string: The first id of the range.

	@END_RANGE_ID string: The last id of the range

	@FROZEN_IDS_FORCE string: Determine how to proceed in case of FROZEN id: 
	-"IGNORE_FROZEN"
	-"RESPECT_FROZEN"
	-"ABORT_IF_FROZEN"
	-"" (the blank string will abort).

	@returns integer: Returns 1 on success, or 0 otherwise.

	"""

def ClearIncludeConfiguration(CLEAR_OPTION):

	"""

	Empties all active includes or clears database.


	@CLEAR_OPTION integer: 1: empty includes.
	2: clear database. This option renders all pointers to entities invalid, 
	including those to configurations and includes.

	@returns integer: Returns 0 if an invalid argument was specified, 1 otherwise.

	"""

def ClearMaterialDatabase(DECK):

	"""

	This function deletes all the materials and their auxiliary entities from the Material Database of the specified deck.


	@DECK constant: The deck in which the clearing will take place.

	@returns integer: Always returns 0.

	"""

def Cog(ENTITY):

	"""

	Return the x,y,z coordinates of the center of gravity (geometric center - centroid) of the ENTITY.


	@ENTITY object: An entity for which to calculate the Cog.

	@returns object: Returns a tuple of the x, y, z coordinates uppon success (the entity has geometric representation).
	None otherwise.

	"""

def CollectBoundaryNodes(container, include_second_order_nodes):

	"""

	This function collects boundary nodes that belong to red or blue edges of the given entities.


	@container object: Can contain parts, properties, macros or shells.
	Each node-chain represents nodes of a perimeter.
	These node-chains are sorted by descending perimeter length.

	@include_second_order_nodes boolean: (optional)Defines whether the node-chains in PERIMETERS will include 
	2nd order nodes.
	False: the 2nd order nodes are ommitted.
	True: the 2nd order nodes are included in node-chains, 
	inserted between their 1storder neighbours.

	@returns object: Returns an object with attributes "perimeters" and "diameters", or None on failure.

	"""

def CollectEntities(deck, containers, search_types, recursive, filter_visible, prop_from_entities, mat_from_entities, model_browser_filter, no_expand_types, hidden_entities):

	"""

	Creates a list with the entities of specific types, contained in the containers.


	@deck integer: The deck for which the collection will take place.

	@containers object: A reference to a container  entity or list with references to  containers.
	Some of the containers can be of type ANSAGROUP, ANSAPART, SET, 
	property, material, face,  volume, elements, task manager items etc
	If the container is None, CollectEntities will search the entire 
	ANSA database.

	@search_types object: A string or list of strings with "ansa keywords" of the types to be 
	collected. Such types can be SHELL, SOLID, GRID etc.
	Additionally, the following keywords can be used:
	"__PROPERTIES__": returns all properties in the "containers".
	"__MATERIALS__": returns all materials in the "containers".
	"__ELEMENTS__": returns all standard elements in the "containers".
	"__ALL_ENTITIES__": returns all entities in the "containers".
	"__CONNECTIONS__": returns all connections in the "containers".
	"__MBCONTAINERS__": returns the model browser containers of the model if 
	used with containers=None or the model browser containers of the containers.
	"__COORD_SYSTEMS__": returns all the coordinate systems in the "containers".
	"__OUT_OF_MBCONTAINERS__": returns the entities of the OutOfMBContainer. Can be used along with argument model_browser_filter.
	"BATCH_MESH_SESSION_GROUP": returns the meshing scenarios of Batch Mesh
	"BATCH_MESH_VOLUME_SCENARIO": returns the volume scenarios of Batch Mesh 
	"BATCH_MESH_WRAP_SCENARIO": returns the wrap scenarios of Batch Mesh
	"BATCH_MESH_LAYERS_SCENARIO": returns the layer scenarios of Batch Mesh

	@recursive boolean: (optional)Recursively search any containers contained in a higher level container 
	for any of the search_types. (Default: False).

	@filter_visible boolean: (optional)Return only the entities that satisfy all the collection criteria, 
	have visibility status, and the status is active.
	In all other cases the parameter is ignored.
	(Default: False).

	@prop_from_entities boolean: (optional)In case search_type is a property, this argument controls if the property 
	must be acquired from the entities referenced by the entities in the 
	container or not. For example, if search_type is "PSHELL", container is 
	"PART", and prop_from_entities is True, if the part contains shells, the 
	corresponding PSHELL will be returned. 
	Otherwise, if prop_from_entities is False, None will be returned.
	(Default: False).

	@mat_from_entities boolean: (optional)In case search_type is a material, this argument controls if the material 
	must be acquired from the entities referenced by the entities in the 
	container or not. For example, if search_type is "MAT1", container is 
	"PART", and mat_from_entities is "yes", if the part  contains elements 
	with MAT1 material, the corresponding material will be returned.
	Otherwise, if mat_from_entities is False, None will be returned.
	(Default: False).

	@model_browser_filter object: (optional)In case search_types is None, this argument controls which entities to 
	collect from a Part, a Group, a Subsystem, a Simulation Model or a 
	Simulation Run. 'model_browser_filter' is a dictionary with two keys 
	'container' and 'collect_mode'. 'container' value and 'collect_mode' value 
	vary according to the entity they are applied on.
	
	-When collecting entities from a Part or a Group:
	{ 'container' : 'all', 'collect_mode' : 'contents' | 'part_contents_and_references' | 'part_contents_and_related' }
	
	'container' values:
	-'all' returns entities of any type
	
	'collect_mode' values:
	-'contents' returns entities that strictly belong to the Part or the Group.
	-'part_contents_and_references' returns the 'contents' plus their properties and 
	materials. 
	-'part_contents_and_related'  returns the 'contents_related' plus all entities that 
	are geometrically related to it (use same nodes or are otherwise connected). 
	-'contents_related' .This value is deprecated, replaced by 'part_contents_and_references'.
	-'contents_affected'. This value is deprecated, replaced by 'part_contents_and_related'.
	
	-When collecting entities from a Subsystem, a Simulation Model or a 
	Simulation Run:
	{ 'container': 'all' | 'geometry' | 'connections' | 'model_setup_entities' | 'interfaces', 
	'collect_mode': 'contents' | 'missing' | 'misplaced' }
	
	'container' values:
	-'all' returns entities of any type.
	-'geometry' returns geometry entities.
	-'connections' returns Connections & Connectors.
	-'model_setup_entities' returns Model Setup Entities 
	(like RBE3s directly connected to geometry)
	-'interfaces' returns Interfaces (like A_POINTs).
	
	'collect_mode' values:
	-'contents' returns entities that directly belong to the 'container'.
	-'missing' returns entities that don't belong to the 'container' but should do.
	-'misplaced' returns entities that belong to the 'container' but shouldn't do.
	
	Note that use of this argument demands setting 'containers' argument with a value other than 'None'.
	Note that 'missing' and 'misplaced' are not defined for the 
	GEOMETRY_OUT_OF_SUBSYSTEMS Subsystem.

	@no_expand_types object: (optional)A list with ANSA types which won't be expanded while collecting their 
	entities. Currently it works only for SETs with recursive = False, 
	no_expand_types = ('SET',) in order to get the first level SET contents.

	@hidden_entities boolean: (optional)If hidden_entities = False the hidden (inactive) entities will not be collected. These are the entities that are listed in the "Inactive" category of the Database Browser (e.g entities of parts with representation="Don't Use"). Default is True.

	@returns object: Returns a list with all the collected entities.

	"""

def CompareFromFile(filename_in, parts, model1, model2, model1filenames, model1filetypes, model2filenames, model2filetypes, matching_distance, matching_similarity, average_thickness_factor, connection_distance, connection_match_distance, connection_match_similarity, file_type, connections_same_type, connections_equiv_connectivity, input_deck, report_export_dir, meta_post_command, meta_post_script, ansa_post_script, use_image_background, separate_pictures_for_parts, run_meta_in_batch_mode, part_pictures_width, part_pictures_height, transparent_part_pictures_width, transparent_part_pictures_height, con_pictures_width, con_pictures_height, export_geometry_info, export_connections_info, export_visible_list, export_unmatched_connections, export_matched_connections_no_diffs, c_state_export_dir, compare_action, keep_current_visibility_settings, meta_post_arguments, ansa_script_function_name, apply_filter_configuration, compare_with_thickness, export_unmatched_parts, export_metadb, matched_parts_map, match_parts_mode, report_filename, dock_area):

	"""
	Deprecated since version 17.1.1. Use class CompareTool instead.

	This function can be used for the comparison of two models based on a number of compare options and tolerances.
	It can also be used for the creation of a report with the results of the comparison.
	It offers 3 ways to compare:
	- compare a list of parts from the current database, to a specified database (incoming).
	 This can be an ansa database, or an input file, or a connection file.
	- compare 2 models, ansa database or input file, by merging/input the respective databases.
	- compare a set of databases with another set of databases.
	
	There are several options regarding the actions to be taken once the comparison is completed:
	- export a report in .pptx format with the aid of META PostProcessor.
	- export a custom report using an ansa user script.
	- save the Compare Report list along with the models involved in the comparison process.
	- keep the incoming database, while erasing the conflicting entities of the current database.
	- leave the Compare Report window open for further manual handling.
	- leave the Compare Report window open along with the Advanced View Settings window
	 for further manual handling.
	- cancel the whole procedure erasing the incoming database.


	@filename_in string: The path of the database of the incoming model.
	Use an empty string if you will not work with the 
	1st way of comparison.

	@parts object: Only needed when working with the 1st way of comparison.
	List with the parts from the current database that will be 
	compared.

	@model1 object: Only needed when working with the 2nd way of comparison.
	The pointer of the 1st model to be compared.
	It is given by the function base.CreateNewAnsaModel()

	@model2 object: Only needed when working with the 2nd way of comparison.
	The pointer of the 2nd model to be compared.
	It is given by the function base.CreateNewAnsaModell()

	@model1filenames object: Only needed when working with the 3d way of comparison.
	List with the paths of the 1st set of databases.

	@model1filetypes object: Only needed when working with the 3d way of comparison.
	List with the types of files in the list "model1filenames".
	The entries of this list must correspond to the list 
	"model1filenames".
	The accepted values are:
	'INPUT_FILE', declares an input file.
	'ANSA_DB', declares an ansa database.
	'CONN_VIP', 'CONN_VIP2', 'CONN_XML', declares a connection 
	file of the respective type.

	@model2filenames object: Only needed when working with the 3d way of comparison.
	List with the paths of the 2nd set of databases.

	@model2filetypes object: Only needed when working with the 3d way of comparison.
	List with the types of files in the list"model2filenames".
	The entries of this list must correspond to the list 
	"model2filenames".
	The accepted values are given above for the model1filetypes 
	list.

	@matching_distance float: (optional)Distance to be used for the geometrical comparison of two 
	matched parts.
	(Default: 0.5)

	@matching_similarity float: (optional)Percentage to be used for the geometrical comparison of two 
	matched parts.
	(Default: 90)

	@average_thickness_factor float: (optional)Threshold to be used for the matching of connection points.
	Calculated as a factor of the average thickness of the 
	components connected by the spot.
	(Default: 0.5)

	@connection_distance float: (optional)Threshold to be used for the matching of connection points.
	Calculated as an absolute value of distance between the spots.
	(Default: 10)
	For a specific comparison only one of the 2 options above is 
	used. If both are set, only the average_thickness_factor will 
	be used. If none of the above is set, the default 
	AverageThicknessFactor will be considered.

	@connection_match_distance float: (optional)Tolerance to be used for the matching of connection lines and 
	connection faces.
	Calculated as an absolute value of distance.
	(Default: 0.5)

	@connection_match_similarity float: (optional)Percentage to be used for the matching of connection lines 
	and connection faces.
	(Default: 90)

	@file_type string: (optional)Only needed when working with the 1st way of comparison.
	Defines the type of file used for comparison.
	The accepted values are:
	-'AnsaDB', to compare to an ansa database
	-'DeckFile', to compare to an input file
	-'VIP','VIP2','XML', to compare to a connection file of the 
	respective type.
	(Default: "AnsaDB")

	@connections_same_type

	@connections_equiv_connectivity boolean: (optional)Argument for the activation of the respective option.
	If set equal to TRUE connections that match based on the 
	previous criteria but have differences in connectivity, will 
	not be considered matched after all.
	(Default: False)
	
	____Settings affecting the export of the comparison results 
	used for the generation of report____

	@input_deck integer: (optional)Only needed when working with the 1st way of comparison 
	and file_type = 'DeckFile'.
	Defines the type of the input deck file. It will be used for 
	the comparison.
	By default, the current deck is assigned.

	@report_export_dir string: The path to the directory where all data for the generation of 
	the report will be output.

	@meta_post_command string: The path to the META PostProcessor executable.
	META PostProcessor will be used for the generation 
	of the report in pptx format.

	@meta_post_script string: The path to the script file which will handle the export data
	and produce the pptx presentation file.

	@ansa_post_script string: The path to a user defined script which will be used 
	instead of the meta_post_script in order to generate 
	a different type of report.
	The user defined script function must be of the following type:
	SciptFunction(string export_dir, string meta_exe, 
	string meta_script)
	The arguments export_dir, meta_exe, meta_script
	will be the report_export_dir, meta_post_command, 
	and meta_post_script respectively as defined through the 
	above described variables.

	@use_image_background boolean: (optional)Argument to set the background color.
	If set equal to TRUE the exported images will have the 
	current background.
	If set equal to FALSE the exported images will have 
	transparent background.
	(Default: False)

	@separate_pictures_for_parts boolean: (optional)Argument for the activation of the respective option.
	If set equal to TRUE two pictures will be taken,
	one for each part of the matched pair.
	If set equal to FALSE a single picture will be taken,
	showing both parts in unexploded view.
	The parts will most likely be overlaping.
	(Default: True)

	@run_meta_in_batch_mode boolean: (optional)Argument for the activation of the respective option.
	If set equal to TRUE, META PostProcessor will run 
	in no-gui mode.
	If set equal to FALSE, META PostProcessor will be 
	launched with the procuced report open in the 
	Report Composer Tool.
	(Default: True)

	@part_pictures_width integer: Argument to define the width of the parts' picture.
	Used when use_image_background=TRUE.

	@part_pictures_height integer: Argument to define the height of the parts' picture.
	Used when use_image_background=TRUE.

	@transparent_part_pictures_width integer: Argument to define the width of the parts' picture.
	Used when: use_image_background=FALSE.

	@transparent_part_pictures_height integer: Argument to define the height of the parts' picture.
	Used when: use_image_background=FALSE.

	@con_pictures_width integer: Argument to define the width of the connections' picture.

	@con_pictures_height integer: Argument to define the height of the connections' picture.

	@export_geometry_info boolean: (optional)Argument to activate the respective option.
	If set to True information about the differences 
	of parts will be exported.
	(Default: True)

	@export_connections_info boolean: (optional)Argument to activate the respective option.
	If set to True information about the differences of 
	connections will be exported.
	(Default: True)

	@export_visible_list boolean: (optional)Argument to activate the respective option.
	If set equal to True the produced report will include only the 
	items that are currently visible in the Compare Report window.
	(Default: False)

	@export_unmatched_connections boolean: (optional)Argument to activate the respective option.
	If set equal to True information about unmatched connections 
	will be exported.
	(Default: False)

	@export_matched_connections_no_diffs boolean: (optional)Argument to activate the respective option.
	If set equal to True information about connections with 
	no differences will be exported.
	(Default: False)

	@c_state_export_dir string: Define this path to a directory in order to save a file of 
	type '*.ansa_compare' containing the compare report list 
	along with the models involved in the comparison process.

	@compare_action string: (optional)Argument to define the action taken once the comparison is 
	completed. 
	The accepted values are: 
	-'OK', to import theincoming database.
	-'SHOW_CARD', to end the procedure with the Compare 
	Report window open.
	-'SHOW_COMPARE_OPTIONS_AND_CARD', to end the 
	procedure with Advanced View Options window and the 
	Compare Report window open.
	-'CANCEL', to take no action.
	(Default: 'CANCEL')

	@keep_current_visibility_settings boolean: (optional)Argument for the activation of the respective option.
	If set equal to TRUE the pictures will be taken using
	the current visibility settings.
	If set equal to FALSE the predefined by the Compare 
	Tool settings will be used, e.g. Shadow ON, Wire OFF, 
	Perims OFF etc.
	(Default: False)

	@meta_post_arguments string: Argument containing any additional options the user would 
	like to add.

	@ansa_script_function_name string: The function name that will be called from the user defined 
	script.

	@apply_filter_configuration

	@compare_with_thickness boolean: (optional)Accepted values: True, False.  
	If True, differences in thickness will be detected as geometric 
	differences when comparing 2 middle surface parts 
	(meshed geometry or FE).
	(Default: False)

	@export_unmatched_parts boolean: (optional)Argument to activate the respective option.
	If set to True information about unmatched parts will be 
	exported.
	(Default: True)

	@export_metadb boolean: (optional)Argument to activate the export of differences on 3D models.
	If set to True, differences will be exported also on the 3D 
	models.
	(Default: True)

	@matched_parts_map object: (optional)A Dictionary where the ids of the matched parts are stored. 
	The ids from model 1 are stored as key and the ids of model 
	2 as data. As a result the len of the dict is the number of the
	matched parts. Please note that the returned Ids refer to the
	separate Models 1 and 2. If the Models get merged, the Ids 
	get invalidated.

	@match_parts_mode string: (optional)This option specifies how the parts will be mapped.
	
	Values: MATCH_MODULE_ID, MATCH_GEOMETRY, 
	MATCH_MODULE_ID_AND_GEOMETRY.
	
	Default value: the respective value obtained from Ansa 
	defaults or MATCH_MODULE_ID_AND_GEOMETRY.  
	
	MATCH_MODULE_ID: matching of parts is based only on 
	the Module Id and/or name.
	MATCH_GEOMETRY: parts with similar geometry and position 
	are mapped regardless of their name and/or Module Id.
	MATCH_MODULE_ID_AND_GEOMETRY: both Module 
	Id/name and geometry are considered.

	@report_filename string: (optional)This option specifies the filename of the report that will be 
	generated.

	@dock_area string: (optional)Defines the location where the "Compare Report" window will 
	be docked. The accepted values are "LeftDockArea".

	@returns integer: Returns 0 if the compare procedure has been executed successfully and 1 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.1. Use class CompareTool instead.", DeprecationWarning)

def CompareMatWithMdb(material, compare_mode):

	"""

	Compare the material MATERIAL with the respective one from the Material Database,
	according to the MODE parameter. A value is given to the return argument 'status',
	which indicates the result of the comparison.


	@material object: The material entity to be compared.

	@compare_mode string: The compare mode string: "by id", "by name" or "most similar".

	@returns object: Returns a dictionary with 'message' and 'status' keys. The 'status' can take the 
	following values depending on the comparison result:
	
	0: The material found a match in the Material DB. However there are differences in certain fields.
	1: The material did not find a match in the Material DB.
	2: The material found an identical match in the Material DB.

	"""

def Compress(fields, deck):

	"""

	This function removes the deleted geometrical entities (Points, Curves, Faces, etc.)
	and unused model entities (unused Parts, PIDs, SETs, etc). It supports variable
	number of arguments.


	@fields object: A dictionary with keys the entities to be compressed and values 1 or 0, 
	indicating if the entity will be compressed or not.

	@deck integer: (optional)The deck that the compression will take place on. Several keywords work for 
	specific decks only. If neither this nor the 'CurrentDeck': 1 option in fields is given, 
	the compression will be implemented on all decks.

	@returns integer: The function returns 0 uppon success, 1 if there is an error in input.

	"""

def CompressMaterials(DECK, MATERIAL_MATRIX, COMPARE_BY_NAMES, COMPARE_BY_VALUES, DELETE_DUPLICATED):

	"""

	Compress materials contained in matrix MATERIAL_MATRIX of deck DECK, by comparing
	each other according to their names (COMPARE_BY_NAMES active) or/and their
	values (COMPARE_BY_VALUES active), releases them from their usage, and
	optionaly deletes them (DELETE_DUPLICATED active).


	@DECK integer: The deck constants.

	@MATERIAL_MATRIX object: A list that contains all the materials for the compression. 
	(if zero, all materials of deck DECK will be compressed)

	@COMPARE_BY_NAMES integer: [ 0 | 1 ] to allow or not comparison by names.

	@COMPARE_BY_VALUES integer: [ 0 | 1 ] to allow or not comparison by values.

	@DELETE_DUPLICATED integer: [ 0 | 1 ] to allow or not deletion of duplicates.

	@returns integer: Returns always 0.

	"""

def ConsToCurves(cons):

	"""

	The function takes a list of CONS and creates curves. The curves are saved under the mat_curves variable.


	@cons object: A list of CONS entities.

	@returns object: Returns None on failure or a list with the new curves on success.

	"""

def ContactFlanges(deck, apply_on, factor, angle, solid_thickness, update_clearance, contact_type, reference_contact, reference_pretension, merge_contacts, merge_distance, create_symetrical,use_connection_elements, use_finer_mesh_as_master, exclude_elements_on_connections, update_cinterf, create_gebs, constraining_elements_type, constraining_elements_property,  exclude_elements_on_same_property):

	"""

	Calculates Flanges that are created by the elements of the apply_on list. If None is given as apply_on
	the procedure runs on all visible elements.


	@deck integer: The deck constant.

	@apply_on object: (optional)A list of elements to apply the function. 
	If None is given it will apply to all visible elements.

	@factor float: (optional)The factor that the shell thickness will be multiplied with, 
	in order to calculate the search distance. If a negative
	value is given, this will be the search distance.

	@angle float: (optional)The angle tolerance the function will use in order to 
	isolate model faces.

	@solid_thickness float: (optional)The solid thickness that will be used by the function.

	@update_clearance boolean: (optional)For ABAQUS only. Activating this option will activate the 
	Small Sliding option and will update the contacts clearance. 
	Default value is True.

	@contact_type string: (optional)Choose the type of contact the function will create.
	Valid types are:
	-"contact_pair"
	-"contact_tie"
	-"permas_pretension"
	-"permas_contact_isurface"
	(Default: "contact_pair")

	@reference_contact object: (optional)The contact entity that the function will use as prototype for the 
	created contacts.

	@reference_pretension object: (optional)The pretension item that the function will use as prototype for the 
	created pretensions.

	@merge_contacts boolean: (optional)Choose if the function will merge contacts that are close with 
	each other.

	@merge_distance integer: (optional)The maximum distance (counted on elements) two contacts must have 
	between them in order to be merged.

	@create_symetrical boolean: (optional)Select whether the creation of the symetrical, of the detected 
	contacts, is also desired.

	@use_connection_elements boolean: (optional)Select if the elements that belong to connections 
	(FE representations) will be included.

	@use_finer_mesh_as_master boolean: (optional)Select if the set with the finer meshing will be used as Master.
	If not the set with the largest area will be used as Master.
	(Default: False)

	@exclude_elements_on_connections boolean: (optional)Select if Shell elements that are connected upon Connections 
	or Rigid bodies will be excluded from the flanges detection.
	(Default: False)

	@update_cinterf boolean: (optional)Create a new Bconect Property [BCONPRG] for each new Contact.
	This property will have an updated CINTERF value.
	(Default: True)

	@create_gebs boolean: (optional)Create one GEB_SB for each contact surface. The GEB acquires a 
	subsystem (if exists otherwise module id of part) as connectivity and 
	"UserDefinedArea" as search pattern. (Default: False)

	@constraining_elements_type string: (optional)Choose the element type for contact stabilizing elements between contact 
	pairs. Valid values are "xstiff" and "zero_force". This option is used only 
	in Permas.

	@constraining_elements_property object: (optional)The property of the created contact stabilizing elements between contact 
	pairs. This option is used only in Permas.

	@exclude_elements_on_same_property boolean: (optional)Controls whether flanges between the same property is allowed or not

	@returns object: Returns a list containing the newly created contact flanges upon success.
	On failure it returns None.

	"""

def ConvertCShellToShell(entities, property, delete_cshells, create_properties, apply_thickness, ret_ents):

	"""

	Converts all c.shells, given in CShell_matrix, to Shells. As input, one can also 
	insert properties (CONTINUUM_SHELL_SECTION). The function, will then handle 
	as input all the C.Shells that refer to the afforementioned properties.


	@entities object: A list of the entities (Cshells) that we desire to convert to Shells.

	@property object: (optional)The entity of the desired cshell property, to be used for the newly 
	created cshells. If None is given a default property will be created.

	@delete_cshells boolean: (optional)If True, the cshells used for the convertion to Shells will be 
	deleted in the end of the procedure. Default value is False.

	@create_properties boolean: (optional)If True, the function will create different Shell properties for each different 
	Cshell property of the given elements.
	(Default: False)

	@apply_thickness boolean: (optional)If True, the newly created shells will receive a nodal thickness according 
	to the geometry characteristics of the C.Shells.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 1 on success and 0 on failure.
	If ret_ents=True it will return a list with the created entities or None if no entities are created.

	"""

def ConvertIncludesToAnsaDBStorage(includes, conversion_option):

	"""

	Converts include to AnsaDB storage type and thus makes it independent of external file reference.


	@includes object: A list containing the includes to be converted.

	@conversion_option integer: 1: Works only if include already has a valid external file reference 
	(FullPathName) and copies this file contents to internal AnsaDB.
	2: Output include database contents to internal AnsaDB storage.

	@returns integer: Always returns 0.

	"""

def ConvertIncludesToDiskStorage(includes, conversion_option, output_directory):

	"""

	Converts selected includes to Disk storage type, external reference to file (FullPathName).


	@includes object: A list with the includes to be converted.

	@conversion_option integer: 1: Copies contents of AnsaDB storage to external file and updates 
	    FullPathName accordingly (only if include had AnsaDB storage).
	2: Discards AnsaDB reference (if existed) and uses previous FullPathName 
	    as reference.
	3: Outputs include database contents to new external file and updates.

	@output_directory string: (optional)Used in option 1 and 3, output filename is output_directory + include name.

	@returns integer: Always returns 0.

	"""

def ConvertPcompToLaminate(deck, entities, mode, t_tol, theta_tol, merge_unconnected_areas, create_mapped_data, delete_original_properties, max_nlayers):

	"""

	This function creates a new Laminate by merging multiple composite zones (PCOMPs or LAMINATEs).


	@deck integer: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@entities object: A list of elements, properties, sets or parts containing elements.

	@mode string: (optional)"by_tolerances": merge layers with T and THETA within the t_tol and 
	theta_tol tolerances.
	"by_gplyid": merge layers with the same GPLYID (default mode).
	"by_layer_name": merge layers with the same LAYER NAME.

	@t_tol float: (optional)Thickness tolerance for "by_tolerances" mode.

	@theta_tol float: (optional)Theta tolerance for "by_tolerances" mode.

	@merge_unconnected_areas boolean: (optional)Merge unconnected areas for "by_tolerances" mode.

	@create_mapped_data boolean: (optional)Create mapped data for "by_tolerances" mode.

	@delete_original_properties boolean: (optional)If True all original properties will be deleted.

	@max_nlayers integer: (optional)Set the maximum number of layers that the created Laminate can have.
	Otherwise ConvertPcompToLaminate fails and returns None.

	@returns object: Returns the created LAMINATE Property or None if the function fails.

	"""

def ConvertShellToCShell(entities, property, delete_shells, create_properties, junctions, type, ret_ents):

	"""

	Convert all shells, given in Shell_matrix, to Continuum Shells.
	As input, one can also insert properties (SHELL_SECTION). 
	The function will then handle as input all the Shells that refer to the aforementioned properties.


	@entities object: A list of the entities (Shells) that we desire to convert to Cshells.

	@property object: (optional)The reference to the desired shell property, to be used for the newly 
	created shells. If None is given, a default property will be created.

	@delete_shells boolean: (optional)If True, the shells used for the convertion to C.Shells will be 
	deleted in the end of the procedure.

	@create_properties boolean: (optional)If True, the function will create different Cshell properties for each different 
	Shell property of the given elements.
	(Default: False)

	@junctions string: (optional)PASTE: If Paste, the Tshells will be created exactly upon the Shells' edge 
	TIED_CONTACT and there may be penetrattion between the Tshells. If Paste, we can 
	avoid this penetration by creating the Tshells slightly offset from 
	the Shells' edges and connecting them with a TIED_CONTACT.

	@type string: (optional)"GASKET" for Gasket elements, "COHESIVE" for Cohesive elements.

	@ret_ents boolean: (optional)If set to True a list with the created entities will be returned.

	@returns object: Returns 1 on success and 0 on failure.
	If ret_ents=True it will return a list with the created entities or None if no entities are created.

	"""

def ConvertTubesToCurves(input_faces, curves_with_diam, matched_faces, unmatched_faces):

	"""

	Converts tubes to curves.


	@input_faces object: A list of faces or a string with accepted values "All" or "Visible".

	@curves_with_diam boolean: (optional)If True a dictionary will be returned with created curves and corresponding 
	diameter.

	@matched_faces boolean: (optional)If True a list with references to the faces of tubes that were converted to 
	curves will be returned.

	@unmatched_faces boolean: (optional)If True a list with references to the unmatched faces aents will be returned.

	@returns object: On success it will return a dictionary with:
	key: curves_with_diam   value: a dictionary with key 'aent curve' and value 'diameter'.
	key: matched_faces      value: a list with the matched faces aents.
	key: unmatched_faces    value: a list with the unmatched faces aents.
	
	Returns None on failure.

	"""

def CopyEntity(target, source):

	"""

	Creates a copy of an entity or copies the values of an entity's card to the ones of another.


	@target object: The reference to the target entity.

	@source object: The reference to the source entity.

	@returns object: Returns the target entity on success, None on error.

	"""

def CopyMatFromMdb(DECK, NAME):

	"""

	Creates a copy of a material named NAME, which is located in the Material Database, to the Material List.


	@DECK integer: The deck.

	@NAME string: The name of the material.

	@returns object: Returns a copy of the material, if this exists in the Material Database, or None otherwise.

	"""

def CopyMatToMdb(MATERIAL):

	"""

	Creates a copy of the material MATERIAL which is located in the Material List, to the material database.


	@MATERIAL object: A reference to the material to be copied.

	@returns integer: Returns 0 in case of success and 1 otherwise.

	"""

def CopyMatsFromMdbToMlist(deck, mode, overwrite_names, overwrite_comments, overwrite_colors, copy_unmatched, ret_ents, case_sensitive, verbose):

	"""

	This function copies/updates materials using the Material Database.


	@deck constant: The current deck.

	@mode string: Accepted values: "update_by_ids", "update_by_names", "copy".

	@overwrite_names boolean: Flag to overwrite names.

	@overwrite_comments boolean: Flag to overwrite comments.

	@overwrite_colors boolean: Flag to overwrite colors.

	@copy_unmatched boolean: Flag to copy unmatched materials.

	@ret_ents boolean: (optional)If set to True a list with the created entities will be returned.

	@case_sensitive boolean: (optional)Flag for name comparison to be case sensitive

	@verbose constant: (optional)If verbose is set to ansa.constants.REPORT_ALL the function returns a tuple that has two items:
	First the return value of the function if the verbose argument was not given.
	Second a list with possible error messages if the function fails.

	@returns object: Returns the number of materials successfuly copied.
	If ret_ents=True, it will return a list with the copied materials, or None if no materials were copied.
	if verbose = ansa.constants.REPORT_ALL, it will return a tuple where the first item is one of the return values mentioned above and second is a list with possible error messages during the execution.

	"""

def CreateCircle3Points(first_3d_point, second_3d_point, third_3d_point):

	"""

	Function CreateCircle3Points(), given three arbitrary non-collinear points (i.e. 3 element arrays of scalars) (e.g. A, B and C), constructs the registered circle of the triangle with vertices defined by points A, B and C.


	@first_3d_point object: First (A) point entity.

	@second_3d_point object: Second (B) point entity.

	@third_3d_point object: Third (C) point Entity.

	@returns object: A list containing the IDs of the 2 curve-segments consisting the created circle.

	"""

def CreateCircleCenter2PointsRadius(center, first_3d_point, second_3d_point, radius, vectors, cross_curve):

	"""

	Function that defines a circle on a plane.


	@center object: The center of the desired circle to be created.

	@first_3d_point object: The first point that defines the plane.
	If 'vectors' is True, first_3d_point is a vector, defining the X axis 
	of the temporary plane.

	@second_3d_point object: The second point that defines the plane.
	If 'vectors' is True, second_3d_point is a vector, defining the Y axis 
	of the temporary plane.

	@radius float: Denotes its radius.

	@vectors boolean: (optional)If True first_3d_point and second_3d_point are defined as vectors and 
	not as coordinates of 3d points.

	@cross_curve boolean: (optional)If True and a CROSS_SECTION exists in database, then a cross curve is 
	created instead of a simple curve.

	@returns object: A list containing the IDs of the 2 curve-segments consisting the created circle.

	"""

def CreateCurve(total, x, y, z):

	"""

	Creates a smooth 3D-curve that passes from a number of points.
	'total' is the number and 'x', 'y', 'z' are the coordinates of the points.


	@total integer: The number of the points that the curve will pass.

	@x object: A list with the x coordinates.

	@y object: A list with the y coordinates.

	@z object: A list with the z coordinates.

	@returns object: Returns a reference to the created 3D-curve.

	"""

def CreateEntity(deck, element_type, fields, mbcontainer, include, debug):

	"""

	Creates a new ANSA entity.


	@deck integer: The current deck.

	@element_type string: A string that describes the element. It can be retrieved from the title 
	of the element's edit card, where it is displayed within brackets.

	@fields object: (optional)A Dictionary containing labels of the entity's Edit Card and 
	the assigned values.

	@mbcontainer object: (optional)A reference to an ANSAPART, ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN.

	@include object: (optional)A reference to an include entity.
	It can be used along with "mbcontainer" argument, 
	only if "mbcontainer" is ANSAPART.

	@debug constant: (optional)If debug is set to ansa.constants.REPORT_ALL returns a tuple that has two items:
	        a reference to the element created on success, None on error
	and     a dictionary that holds any errors / warnings found. This dictionary has as keys the fields that were used upon calling the function and lead to errors / warnings. The data for each field is a dictionary with two keys:
	                'type' that holds the words 'error' or 'warning' as data.
	                'message' that holds the error message generated by this field.
	                
	If debug is ansa.constants.REPORT_SILENCE returns a tuple that has two items:
	        a reference to the element created on success, None on error an empty dictionary
	
	If not given a reference to the element created on success, None on error

	@returns object: If debug argument is not given returns a reference to the element created, or None if invalid arguments were specified, or an error occurred.
	
	If debug argument is given returns a tuple with a reference to the element created as before and a dictionary with errors

	"""

def CreateInactiveInclude(name, full_path_name, deck):

	"""

	Creates an inactive unloaded include.
	Include is only visible in Includes Configurator and can be later loaded with "LoadInclude".


	@name string: The name of the include.

	@full_path_name string: The FullPathName of the include.

	@deck integer: The current deck.

	@returns object: Returns a reference to the created include.

	"""

def CreateLoadCurve(curve_type, fields, items):

	"""

	Creatse a new load curve and set the specified parameters.


	@curve_type string: Can be one of the following:
	For LS-DYNA:
	-DEFINE_CURVE_SMOOTH
	-DEFINE_CURVE
	-DEFINE_TABLE
	-DEFINE_CURVE Encrypted
	
	For NASTRAN:
	-TABLED1
	-TABLED2
	-TABLED3
	-TABLED4
	-TABLEM1
	-TABLEM2
	-TABLEM3
	-TABLEM4
	-TABLES1
	-TABDMP1
	-TABRND
	
	For RADIOSS or PAMCRASH:
	-FUNCT
	
	For ANSYS:
	-TB (same as BKIN)
	-BKIN
	-MISO
	-KINH
	-CHABOCHE
	-MOONEY
	-MELAS
	-DIM
	
	For ABAQUS:
	-AMPLITUDE 
	-DEPENDENCY_DATA_TABLE 
	-ABAQUS TABLE
	
	For PERMAS:
	-FUNCTION TABLE
	
	For MARC:
	-TABLE

	@fields object: A dictionary that sets the desired field values of the table cards.
	Dictionary items with the following keys can also be used as a pair:
	__table_curves: Curves willing to insert into a table.
	__table_values: The Rate values that will be used for the above curves.

	@items object: (optional)A pair of lists, one that contains curves and another that contains x values.
	Only for use with TABLE entities
	(e.g. [ [curve1, curve2, ...], [x1, x2, ...] ])

	@returns object: Returns a reference to the created curve entity on success, or None otherwise.

	"""

def CreateMeasurement(entities, type, coord):

	"""

	This function creates a measurement entity.
	
	After the creation of the new measurement you can use:
	base.GetEntityCardValues to get the measurement results or
	base.SetEntityCardValues to change the current measurement type.
	
	All supported values for the parameter "TYPE" are the same strings displayed within 
	the measurements's edit card:
	
	ANGLE                           angle between shells, solid facets, edges, linear elements, etc.
	ANGLE_1                         angle at node 1, if three nodes are selected
	ANGLE_2                         angle at node 2, if three nodes are selected
	ANGLE_3                         angle at node 3, if three nodes are selected
	ANGLE_XY                        angle between two nodes and the default working plane XY
	ANGLE_YZ                        angle between two nodes and the default working plane YZ
	ANGLE_ZX                        angle between two nodes and the default working plane ZX
	AREA                            area of one or more shells, solid facets, faces
	                                or skin area of one or more solids
	CIRCUMSCRIBED_CIRCLE            if three nodes are selected
	CIRCUMSCRIBED_SPHERE            if four nodes are selected       
	COG                             center of gravity if many nodes are selected
	CURVATURE                       the curvature (min radius) of one Cons/Curve, only 
	                                if one Cons/Curve is selected
	DISTANCE                        distance between two nodes, a node and a plane, a 
	                                node and a curve, two curves,two coord.systems, etc.
	DISTANCE_ELEMENTS               distance between a node and a macro's elements (shells), 
	                                or distance between macros (shells)
	DISTANCE_GEOMETRY               distance between a node and a face's geometry, or 
	                                distance between faces (geometry)
	DISTANCE_PERPENDICULAR          perpendicular distance between a node and an edge
	DISTANCE_SURFACE                distance between a node and a face's surface
	DISTANCE_TO_PLANE_1             distance between the node 1 and the plane 234, if four nodes selected
	DISTANCE_TO_PLANE_2             distance between the node 2 and the plane 134, if four nodes selected
	DISTANCE_TO_PLANE_3             distance between the node 3 and the plane 124, if four nodes selected
	DISTANCE_TO_PLANE_4             distance between the node 4 and the plane 123, if four nodes selected
	DISTANCE_TO_VECTOR_1            distance between the node 1 and the vector 23, if three nodes selected
	DISTANCE_TO_VECTOR_2            distance between the node 2 and the vector 13, if three nodes selected
	DISTANCE_TO_VECTOR_3            distance between the node 3 and the vector 12, if three nodes selected
	EQUIVALENT_CIRCLE               the circle (radius and center's coordinates) only if a closed path of
	                                Cons or edges is selected
	EULER_ANGLES_XYZ                the three euler angles between two coord.systems (1.rotation at axis 
	                                X, 2.rotation at axis Y and 3.rotation at axis Z)
	EULER_ANGLES_ZXZ                the three euler angles between two coord.systems (1.rotation at axis 
	                                Z, 2.rotation at axis X and 3.rotation at axis Z)
	EULER_AXIS                      the euler axis (dx,dy,dz) and euler angle for two selected 
	                                coord.systems
	INSCRIBED_CIRCLE                if three nodes are selected
	INSCRIBED_SPHERE                if four nodes are selected
	LENGTH                          length of one or more Cons, curves, edges and other linear elements
	MASS                            mass of one or more elements
	MIDDLEPOINT                     coordinates of a shell's or solid facet's middlepoint
	MIDDLEPOINT_DISTANCE_GEOMETRY   distance between the middlepoint of a geometry shell from its geometry
	NEIGHBOURING_DISTANCE           maximum distance between two pasted Cons, only if a yellow Cons 
	                                is selected
	NEIGHBOURING_ANGLE              maximum angle between tho pasted Cons, only if a yellow Cons 
	                                is selected
	NODE_DISTANCE_GEOMETRY          distance between a node from its geometry, only for nodes that 
	                                belong to a macro
	NODE_DISTANCE_ORIGIN            distance between a node from its original position, only for 
	                                nodes that belong to a macro
	NODE_DISTANCE_PERIMETER         distance between a node from its macro's perimeter, only for 
	                                nodes that belong to a perimeter
	NODE_POSITION                   coordinates (x,y,z) of a node
	POLYLINE_LENGTH                 polyline length if many nodes are selected (nodes are connected
	                                according to the given order)
	VOLUME                          volume of one or more solid elements


	@entities object: A list of entities (nodes, shells, solid facets, faces, curves, planes, etc.)
	to be measured.

	@type string: (optional)Type of measurement. See list above.

	@coord object: (optional)A coordinate system entity to get measurements relative to.

	@returns object: Returns the newly created measurement entity on success, or 0 if the input could not result to a measurement.

	"""

def CreateNewAnsaModel():

	"""

	This function creates a new instance of an ansa model. Different databases can be opened and handled
	in Ansa in separate model instances, but only one instance can be current at any single moment. All ansa
	functionality will run on the current model. The function should only be used in combination with the following
	functions: SetCurrentAnsaModel(), GetCurrentAnsaModel(), DestroyAnsaModel()


	@returns object: Returns the newly created ansa model instance, which must then be set as current, in order
	to continue working with Ansa on this model, or None in case of error.

	"""

def CreateNumberingRule(deck, rule_source, reference_entity, element_type, apply_mode, from_value, to_value, rule_name, renumber_nodes, renumber_properties, renumber_materials, renumber_elements, force_ids, preserve_ids, connection_id_2body_element, link_part_rule_to_moduleid, internal_includes, special_rules, lock, source_with_expression):

	"""

	This function creates a numbering rule.


	@deck integer: The current deck.

	@rule_source string: Accepted values: "TOOL", "INCLUDE","PART", "PROPERTY", "CONNECTION", 
	"GENERIC_ENTITIES_BUILDER", "CONNECTOR", "CONNECTION TEMPLATE",
	"ANSA_SIMULATION_MODEL", "ANSA_LOADCASE", "ANSA_SIMULATION_RUN",
	"ANSA_SUBSYSTEM", "ANSA_LIBRARY_ITEM".

	@reference_entity object: - For special rules reference to an INCLUDE, PART, PROPERTY, CONNECTOR,
	GENERIC_ENTITIES_BUILDER, CONNECTION TEMPLATE, ANSA_SIMULATION_MODEL,
	ANSA_LOADCASE, ANSA_SIMULATION_RUN, ANSA_SUBSYSTEM or ANSA_LIBRARY_ITEM.
	
	- For general rule the list of entities to be renumbered.
	
	- A list of properties or ids of properties when used in conjunction 
	  with SOURCE=PROPERTY. The elements of the user defined group 
	  of properties will be renumbered.
	
	- "WSPOT", "SPOTLINE", "ADH.LINE", "ADH.FACE", "SEAMLINE", 
	  "GUM DROP", "HEMMING", "BOLT". For reference to the Connection type.

	@element_type string: Type-name of entity or a list of entities to be renumbered.
	With an empty string the rule will be applied to all entities 
	in the referenced_entity.

	@apply_mode string: "PER_GROUP" or "1" | "PER_TYPE" or "0".

	@from_value integer: Renumbering range's starting id.

	@to_value integer: Renumbering range's end id.

	@rule_name string: Rule name.

	@renumber_nodes boolean: (optional)Control renumber referenced nodes flag.

	@renumber_properties boolean: (optional)Control renumber referenced properties flag.

	@renumber_materials boolean: (optional)Control renumber referenced materials flag.

	@renumber_elements boolean: (optional)Control renumber referenced elements flag.

	@force_ids boolean: (optional)Control the force option.

	@preserve_ids boolean: (optional)Control the preserve option.

	@connection_id_2body_element boolean: (optional)In case of a CONNECTIONS rule add this parameter in order to 
	assign connector's id to first created body element.

	@link_part_rule_to_moduleid boolean: (optional)In case of a PART rule, add this parameter in order to link the 
	special rule to the ANSA PART through the module ID.

	@internal_includes boolean: (optional)In case of an INCLUDE rule, add this parameter in order to apply 
	numbering rule to all internal rules that do not have numbering rules.

	@special_rules boolean: (optional)In case of general rules, control the special rules.

	@lock boolean: (optional)in case of general children rules, control the lock option.

	@source_with_expression string: (optional)a regular expression that leads to the creation of a dynamic special numbering rule. The supported wildcard characters are the asterisk ("*"), questionmark ("?") and brackets ("[]"). When a dynamic numbering rule is created a py_list is exported. The py_list contains the dynamic rule and the created special rules.

	@returns object: Returns a reference to the rule created, py_list when "source with expression" is given as argument, or None if invalid arguments are given. When "source with expression" is a valid regular expression containing the asterisk ("*"), questionmark ("?") or brackets ("[]"), a dynamic special numbering rule is created. The py_list contains first the dynamic rule followed by all the created special rules.

	"""

def CreateNumberingRuleForGeneratedPropsInOutput(DECK, REF_ENT, FROM_ID, TO_ID, INCREMENT, RULE_NAME):

	"""

	This function creates a numbering rule for the properties that will be generated during output. Currently, it can only be applied fot the PCOMPs that will be generated from LAMINATE output. If a not LAMINATE property is passed in function, no rule will be defined. The defined renumber will not be applied if 'Renumber' script function is called. That renumber is mentioned to be usedduring output ONLY.


	@DECK constant: The deck constant. One of: NASTRAN | LSDYNA | PAMCRASH | ABAQUS | RADIOSS | ANSYS | PERMAS | CFD_*

	@REF_ENT object: A reference to the LAMINATE property.

	@FROM_ID integer: Renumbering range's starting id.

	@TO_ID integer: Renumbering range's ending id.

	@INCREMENT integer: Renumbering increment value.

	@RULE_NAME string: Name of numbering rule.

	@returns object: Returns a reference to the rule created, or 0 if invalid arguments are given.

	"""

def CreateNumberingRuleWithIncrement(deck, rule_source, reference_entity, element_type, apply_mode, from_value, to_value, increment_value, rule_name, renumber_nodes, renumber_properties, renumber_materials, renumber_elements, force_ids, preserve_ids, connection_id_2body_element, link_part_rule_to_moduleid,internal_includes, special_rules, lock, source_with_expression):

	"""

	This function creates a numbering rule.


	@deck integer: The current deck.

	@rule_source string: Accepted values: "TOOL", "INCLUDE", "PART", "PROPERTY", 
	"CONNECTION", "GENERIC_ENTITIES_BUILDER", "ANSA_SIMULATION_MODEL", "ANSA_LOADCASE", "ANSA_SIMULATION_RUN", "ANSA_SUBSYSTEM", "ANSA_LIBRARY_ITEM"

	@reference_entity object: - Reference to an INCLUDE, PART, PROPERTY, CONNECTOR, 
	  GENERIC_ENTITIES_BUILDER, CONNECTION TEMPLATE, ANSA_SIMULATION_MODEL,
	ANSA_LOADCASE, ANSA_SIMULATION_RUN, ANSA_SUBSYSTEM or ANSA_LIBRARY_ITEM
	
	- A list of entities to be renumbered.
	
	- A list of properties or ids of properties when used in conjunction 
	  with SOURCE=PROPERTY. The elements of the user defined group 
	  of properties will be renumbered.
	
	- "WSPOT", "SPOTLINE", "ADH.LINE", "ADH.FACE", "SEAMLINE", 
	  "GUM DROP", "HEMMING", "BOLT". For reference to the Connection type.

	@element_type string: Type-name of entities or of group of entities to be renumbered, 
	or None for all groups of entities.

	@apply_mode string: "PER_GROUP" or "1" | "PER_TYPE" or "0".
	(Renumber whole group of entities or entities of same type)

	@from_value integer: Renumbering range's starting id.

	@to_value integer: Renumbering range's ending id.

	@increment_value integer: Renumbering range's increment value.

	@rule_name string: Name of numbering rule.

	@renumber_nodes boolean: (optional)Control renumber referenced nodes flag.

	@renumber_properties boolean: (optional)Control renumber referenced properties flag.

	@renumber_materials boolean: (optional)Control renumber referenced materials flag.

	@renumber_elements boolean: (optional)Control renumber referenced elements flag.

	@force_ids boolean: (optional)Control the force option.

	@preserve_ids boolean: (optional)Control the preserve option.

	@connection_id_2body_element boolean: (optional)In case of a CONNECTIONS rule add this parameter in order to 
	assign connector's id to first created body element.

	@link_part_rule_to_moduleid boolean: (optional)In case of a PART rule, add this parameter in order to link the 
	special rule to the ANSA PART through the module ID.

	@internal_includes boolean: (optional)In case of INCLUDE rule, add this parameter in order to apply 
	numbering rule to all internal rules that do not have numbering rules.

	@special_rules boolean: (optional)In case of general rules, control the special rules.

	@lock boolean: (optional)in case of general children rules, control the lock option.

	@source_with_expression string: (optional)a regular expression that leads to the creation of a dynamic special numbering rule. The supported wildcard characters are the asterisk ("*"), questionmark ("?") and brackets ("[]"). When a dynamic numbering rule is created a py_list is exported. The py_list contains the dynamic rule and the created special rules.

	@returns object: Returns a reference to the rule created, py_list when "source with expression" is given as argument, or None if invalid arguments are given. When "source with expression" is a valid regular expression containing the asterisk ("*"), questionmark ("?") or brackets ("[]"), a dynamic special numbering rule is created. The py_list contains first the dynamic rule followed by all the created special rules.

	"""

def CreateSectionForce(x0, y0, z0, dx, dy, dz, name, entities, local, mkrefnode, ref_step):

	"""

	Creates a Section Force Assistant Utility.


	@x0 float: The x coordinate of the point.

	@y0 float: The y coordinate of the point.

	@z0 float: The z coordinate of the point.

	@dx float: The x coordinate of the normal vector.

	@dy float: The y coordinate of the normal vector.

	@dz float: The z coordinate of the normal vector.

	@name string: The name of the Section Force to be created.

	@entities object: Selected entities to cut by the cross section.

	@local string: (optional)Results output frame. 'G' (for global), 'LX','LY','LZ' (for local respectively axis).

	@mkrefnode integer: (optional)Refererence node (if given) (ABQ).

	@ref_step integer: (optional)Reference step (if it is to be created) (ABQ).

	@returns object: Returns the section created on success, or 0 on failure.

	"""

def CreateShellsFromSolidFacets(option, pid, ret_ents, solids, part):

	"""

	This function creates shell elements from free or interior facets of solid elements.
	Hence new FE-Model shell elements can be created from selected facets. 
	The function runs on an array of solids given as input. If no solids array is given then the function runs on visible.


	@option string: Accepted values: "skin", "skin exclude internal bounds" or "interior".

	@pid integer: (optional)The id of the property that will be used for the shells. If it does not correspond to an existing PID a new one will be created for it. If none provided the new shells will be assigned to an auto created PID for each solid property.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@solids object: (optional)An array of solids from the facets of which the shells will be created.

	@part integer: (optional)The id of the part that will be used for the shells. If it does not correspond to an existing part a new one will be created for it. If none provided the new shells will be assigned to an auto created Part for each solid property.

	@returns object: Returns 0 on success or 1 on failure.
	If ret_ents=True, it will return a list with the created entities, or None if no entities are created.

	"""

def CreateTransformRotate(COMPONENT, ANGLE, X0, Y0, Z0, UX, UY, UZ):

	"""

	Creates a rotation transformation of an entity.


	@COMPONENT object: The entity to be rotated.

	@ANGLE float: Thre angle of rotation.

	@X0 float: The x coordinate of the rotation point.

	@Y0 float: The y coordinate of the rotation point.

	@Z0 float: The z coordinate of the rotation point.

	@UX float: The x component of the rotation vector.

	@UY float: The y component of the rotation vector.

	@UZ float: The z component of the rotation vector.

	@returns object: Returns a reference to the transformation on success, or None on error.

	"""

def CreateTransformScale(COMPONENT, X0, Y0, Z0, SX, SY, SZ):

	"""

	Performs a scale transformation of an entity.


	@COMPONENT object: The entity to be scaled.

	@X0 float: The x coordinate of the normal point.

	@Y0 float: The y coordinate of the normal point.

	@Z0 float: The z coordinate of the normal point.

	@SX float: The x component of the scale factor.

	@SY float: The y component of the scale factor.

	@SZ float: The z component of the scale factor.

	@returns object: Returns a reference to the transformation on success, or None on error.

	"""

def CreateTransformTranslate(COMPONENT, DIST, UX, UY, UZ):

	"""

	Creates a translation of structure COMPONENT (set or include), of a distance DIST according to 
	the vector UX, UY, UZ. In case of a zero distance, as DIST is taken vector's length.


	@COMPONENT object: The entity to be translated.

	@DIST float: The translation distance.

	@UX float: The x component of the translation vector.

	@UY float: The y component of the translation vector.

	@UZ float: The z component of the translation vector.

	@returns object: Returns a reference to the transformation on success, or None on error.

	"""

def CreateUserDefinedAttribute(element_type, name, type, default_value, group_name, read_only, accepted_values, deck, entity_subtype, save_in_defaults, save_in_dm, save_in_db):

	"""

	This function creates a user attribute that will accompany all entities of the specified ANSA keyword.
	Every newly created attribute will be added in the entity's list fields and it will be exist in the entity's card.
	Note that GetEntityCardValues/SetEntityCardValues can be used to get/set attribute values to an entity.


	@element_type string: The ANSA keyword.

	@name string: The user attribute name.

	@type string: (optional)The user attribute type (TEXT, BOOL, INTEGER, DOUBLE).

	@default_value string: (optional)The user attribute default value.

	@group_name string: (optional)The user attribute group name.

	@read_only boolean: (optional)The user attribute read-only state (True/False).

	@accepted_values string: (optional)The user attribute accepted values (comma separated).

	@deck integer: (optional)The deck type.

	@entity_subtype string: (optional)The entity subtype that may exists in addition to the ANSA keyword.

	@save_in_defaults boolean: (optional)Sets if the user attribute should be saved in ANSA defaults (default value: False)

	@save_in_dm boolean: (optional)Sets if the user attribute should be saved in DM (default value: False)

	@save_in_db boolean: (optional)Sets if the user attribute should be saved in the ANSA database (default value: True)

	@returns object: Returns a reference to the newly created user attribute entity, or None if this user attribute could not be created.
	Note that if a user attribute already exists with this name, then this already existing attribute will be returned.

	"""

def CreateWplane3Points(x1, y1, z1, x2, y2, z2, x3, y3,  z3):

	"""

	This function takes x, y, z coordinates from three points and creates a working plane.


	@x1 float: The x coordinate of the first point.

	@y1 float: The y coordinate of the first point.

	@z1 float: The z coordinate of the first point.

	@x2 float: The x coordinate of the second point.

	@y2 float: The y coordinate of the second point.

	@z2 float: The z coordinate of the second point.

	@x3 float: The x coordinate of the third point.

	@y3 float: The y coordinate of the third point.

	@z3 float: The z coordinate of the third point.

	@returns object: Returns a reference to the new working plane on success, otherwise 0.

	"""

def CreateWplaneNormal( x, y, z, dx, dy, dz):

	"""

	This function creates a working plane by giving its origin point and a vector which
	is normal to the created working plane.


	@x float: The x coordinate of the point.

	@y float: The y coordinate of the point.

	@z float: The z coordinate of the point.

	@dx float: The x component of the normal vector.

	@dy float: The y component of the normal vector.

	@dz float: The z component of the normal vector.

	@returns object: Returns a reference to the new working plane on success, otherwise None.

	"""

def CreateWplaneWith2Axis(x,y, z, dx1, dy1, dz1, dx2, dy2,dz2):

	"""

	This function takes a point which is the origin one and two vectors and creates a working plane.


	@x float: The x coordinate of the origin point.

	@y float: The y coordinate of the origin point.

	@z float: The z coordinate of the origin point.

	@dx1 float: The x component of the first vector.

	@dy1 float: The y component of the first vector.

	@dz1 float: The z component of the first vector.

	@dx2 float: The x component of the second vector.

	@dy2 float: The y component of the second vector.

	@dz2 float: The z component of the second vector.

	@returns object: Returns a reference to the new working plane on success, otherwise 0.

	"""

def CurrentDeck():

	"""

	The CurrentDeck function will return the current ANSA deck.


	@returns integer: Returns the current ANSA deck as an integer.

	"""

def CurrentMenu():

	"""

	Informs the user about the name of the current menu. All standard menus are supported (e.g. TOPO, TANK, NASTRAN) plus the exclussive custom menus.


	@returns string: Returns the name of the current menu.

	"""

def CurvesConnectMulti(curves, total, tolerance, angle, ret_ents):

	"""

	This script function can merge multiple Curves in a single one in one step.
	It can connect multiple 3D-Curves provided that the Corner Angle and Nodes Matching distance are below the user specified limits.


	@curves object: (optional)A curve, a connection curve, a cross curve, a list of these entities, 
	a string with value 'visible' or a string with value 'all'. If it is called with 
	'visible', it works with all the above visible entities. If it is called with 'all', 
	it works with all the above entities.
	If nothing is passed, visible entities are taken into account.

	@total integer: (optional)(Deprecated named argument. The result is not affected no matter what value is passed.
	Please do not use.)

	@tolerance float: (optional)Tolerance value for connectivity.
	If nothing is passed, HOT POINTS matching distance from settings is taken into account.

	@angle float: (optional)The angle tolerance between neighboring curves.
	(Default: 45)

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 0 on failure and 1 on success.
	If ret_ents=True, it will return a list with the created entities, or None if no entities are created.

	"""

def CurvesOffset(wplane, curve, x, y, z, offset_distance):

	"""

	This function takes a working plane, a curve, the coordinates of a point 
	and the distance value to create a new curve in new position. The coordinates of the point are 
	needed to define the direction of the offset.


	@wplane object: A reference to the working plane.

	@curve object: A reference to the existing curve.

	@x float: The x coordinate of the point.

	@y float: The y coordinate of the point.

	@z float: The z coordinate of the point.

	@offset_distance float: The offset distance value.

	@returns object: Returns a reference to the newly created curve on success, otherwise 0.

	"""

def CurvesProjectOnPlane(coordinate_system, axial_elements, produce_curves, split_orig, perform_topo, new_part, cross_section):

	"""

	A function to project curves on a plane and create the respective faces.


	@coordinate_system object: A list ([xo, yo, zo, dx1, dy1, dz1, dx2, dy2, dz2]) of doubles, representing 
	the coordinate System (origin & i,j vectors) of the projection plane 
	(dx3, dy3, dz3 calculated implicitly).

	@axial_elements object: (optional)A list of the entities to project (if nothing is passed, 
	all visible curves are projected).

	@produce_curves boolean: (optional)If set to True, curves are produced instead of faces.
	(Default: False)

	@split_orig boolean: (optional)In some cases the selected entities intersect with each other on the 
	Working Plane (2D space), but due to their position, they do not intersect in 
	the 3D space. At the resulting face, the intersection points will always be 
	created, no matter if the option is active or not, due to topological reasons.
	In order to continue and create faces between the new and the original face, 
	this option also creates the intersection hot points on the first selected 
	entities.
	If "produce_curves" is False, default value is True.

	@perform_topo boolean: (optional)Perform topology between the created faces. The argument 
	"split_orig" is also set to True, whether the user enables it or not.

	@new_part boolean: (optional)If set ti True, the function will assign the entities in a Part named 
	"Projection on Wrk. Plane".

	@cross_section boolean: (optional)If set to True and a cross_section exists, the produced curves will 
	appear as "cross_curves".

	@returns object: Returns a list with the id`s of the created faces or curves on success, otherwise None.

	"""

def CutModelByPlanes(deck, cutting_planes, apply_on, create_on_bounds, delete_unconnected, step_id, create_node_set, dofs, reconstruct_bounds, put_in_set, ret_ents):

	"""

	Script function to cut a model by using cutting planes. Optionally, the user can create
	entities on the boundary of the cut.


	@deck constant: The deck.

	@cutting_planes object: A list containing the CUTTING PLANEs to be used for the cut.

	@apply_on string: (optional)Accepted values: 'visible' or 'database'. Decide whether the cut 
	will be applied on the entire database or only on visible elements.

	@create_on_bounds string: (optional)Define entities to be created on the boundary of the cut.
	'spc', 'rbe2', 'rbe3', 'rbe2_and_mass', 'rbe3_and_mass' 
	(valid only for NASTRAN and LSDYNA)

	@delete_unconnected string: (optional)Accepted values: 'yes' or 'no' or 'yes_exclude_box'. Decide 
	whether elements that remain unconnected after the cut will be 
	deleted or not, or only the exterior ones of the cutting box.

	@step_id integer

	@create_node_set integer

	@dofs integer

	@reconstruct_bounds boolean

	@put_in_set boolean

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 0 on success or 1 otherwise.
	If ret_ents=True it will return a list with the created entities or None if no entities are created.

	"""

def Dach(rad1, rad2, len1, len2, tanfromnear):

	"""

	Replaces a series of fillets with the corresponding tangent surfaces.


	@rad1 float: :ower bound for radius.

	@rad2 float: Upper bound for radius.

	@len1 float: Lower bound for length.

	@len2 float: Upper bound for length.

	@tanfromnear integer: 0: use tangents from fillets.
	1: use tangents from neighbors.

	@returns integer: Always returns 1.

	"""

def DataBaseName():

	"""

	This function returns the full path to the current Ansa DataBase.


	@returns string: Always returns a valid string. If its length is 0 then the filename is not set.

	"""

def DefineRBE3WithFacets(master_faces, slave_faces, search_distance, diameter, ret_ents):

	"""

	DefineRBE3WithFacets creates RBE3s using the nodes of the master entities MASTER and the slave entities SLAVE, 
	using the search distance search_dist and the diameter diam. The created RBE3s will be assigned to the current part.


	@master_faces object: A list with master entities. They can be shells or solid facets.

	@slave_faces object: A list with slave entities. They can be shells or solid facets.

	@search_distance float: The search distance.

	@diameter float: The search radius.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Always returns 1.
	If ret_ents=True, it will return a list with the created entities or None if no entities are created.

	"""

def DefineVolumeFrom(pid, part_name):

	"""

	This function is used for the definition of closed volumes. The volumes may be bounded
	by Macro Areas of FE-Model shell elements.


	@pid integer: The pid value.

	@part_name string: The name of the newly created ANSAPart.

	@returns integer: Returns 0 in all cases.

	"""

def DeleteCurves(entities, delete_connections):

	"""

	Deletes the curves in the database, depending on the optional arguments.


	@entities object: (optional)A curve, a connection curve, a cross curve, a list of these entities, 
	a string with value 'visible' or a string with value 'all' . If it is called 
	with 'visible', it works with all the above visible entities. If it is called 
	with 'all', it works with all the above entities.
	If nothind is defined, the function will delete all the curves.

	@delete_connections boolean: (optional)If True, deletes the connection curves.
	(Default: False)

	@returns integer: Returns 1 in all cases.

	"""

def DeleteEntity(entities, force, compress):

	"""

	Delete an entity or a list of entities.


	@entities object: An entity or a list of entities to be deleted.

	@force boolean: (optional)If set to True, the function will delete the entities, along 
	with any reference to these entities.

	@compress boolean: (optional)If set to False, unused Nodes and Properties from the deleted 
	entities will not be deleted.
	(Default: True)

	@returns integer: Returns 0 if all elements were deleted, 1 otherwise.

	"""

def DeleteFaces(entities, filter_visible, convert_links):

	"""

	This function deletes the faces in a base.


	@entities object: (optional)A list of faces to be deleted. This list can contain faces, parts, 
	PIDs ot sets. If a faces list isn't provided or it is None, then the 
	faces are collected from the entire database.

	@filter_visible boolean: (optional)If True, the provided faces are filtered and only the visible ones are deleted.
	(Default: False)

	@convert_links boolean: (optional)If True , parent faces will be deleted, while linked faces will be converted 
	to geometry, else all provided faces will be deleted.
	(Default: False)

	@returns integer: Returns 1 in all cases.

	"""

def DeleteMetricFile(control, filename):

	"""

	Deletes a Metric File from a control.


	@control object: A reference to the selected control.

	@filename string: The path to the file to be deleted.

	@returns integer: Returns 0 if the file is successfully deleted, 1 otherwise.

	"""

def DeleteNumberingRules(rules):

	"""

	This function deletes numbering rules. All existing rules if no argument is defined, selected rules otherwise.


	@rules object: (optional)A list of references to numbering rules to be deleted.

	@returns integer: Returns 1 in all cases.

	"""

def DeletePart(parts, entities, hierarchy, follow_links, connections, connectors, titems, bconditions, orequests, setbuilders, generalbuilders, dpatches, resmap):

	"""

	This function deletes one or more parts contained in a list, according to a series of arguments.


	@parts object: A list of part entities.

	@entities boolean: (optional)Determines whether the parts' entities should be deleted or not.
	(Default: False)

	@hierarchy boolean: (optional)Determines whether the full hierarchy upwards should be deleted or not.
	(Default: False)

	@follow_links boolean: (optional)Determines whether linked parts will be deleted or not.
	(Default: False)

	@connections string: (optional)Determines whether internal and external connections should be deleted or
	not. Supported values are "INTERNAL", to include internal connections,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exlude all connections. By default the "EXCLUDE" option is assumed.

	@connectors string: (optional)Determines whether internal and external connectors should be deleted or
	not. Supported values are "INTERNAL", to include internal connectors,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exlude all connectors.
	(Default: "EXCLUDE")

	@titems string: (optional)Determines whether internal and external trim items should be deleted or
	not. Supported values are "INTERNAL", to include internal trim items,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exclude all trim items.
	(Default: "EXCLUDE")

	@bconditions string: (optional)Determines whether internal and external Boundary Conditions should
	be deleted or not. Supported values are "INTERNAL", to include internal
	Boundary Conditions, "ALL AFFECTED", to include internal and external ones,
	and "EXCLUDE" to exlude all Boundary Conditions.
	(Default: "EXCLUDE")

	@orequests string: (optional)Determines whether internal and external Output Requests should be
	deleted or not. Supported values are "INTERNAL", to include internal
	Output Requests, "ALL AFFECTED", to include internal and external ones,
	and "EXCLUDE" to exlude all Output Requests.
	(Default: "EXCLUDE")

	@setbuilders string: (optional)Determines whether internal and external setbuilders should be deleted or
	not. Supported values are "INTERNAL", to include internal setbuilders,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exclude all setbuilders.
	(Default: "EXCLUDE")

	@generalbuilders string: (optional)Determines whether internal and external generalbuilders should be deleted or
	not. Supported values are "INTERNAL", to include internal generalbuilders,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exclude all generalbuilders.
	(Default: "EXCLUDE")

	@dpatches string: (optional)Determines whether included Damping Patches should be
	deleted or not. Supported values are "INTERNAL", to include and
	"EXCLUDE" to exlude Damping Patches.
	(Default: "EXCLUDE")

	@resmap string: (optional)Determines whether included resmap should be
	deleted or not. Supported values are "INTERNAL", to include and
	 EXCLUDE" to exclude resmap.
	(Default: "EXCLUDE")

	@returns integer: Returns 0 in all cases.

	"""

def DeleteVisibleHotPoints():

	"""

	This function deletes all visible hot points from the screen in a similar way to when they are selected with box selection and deleted.


	@returns integer: Returns 1 in all cases.

	"""

def DestroyAnsaModel(model):

	"""

	This function destroys an ansa model.


	@model object: The ansa model object to be deleted.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def DetectSolidDescription(faces, thickness, return_percentage, estimate_thickness, separate_connectivity, separate_connectivity_stop_at_pid_bound, fix_unchecked_faces, estimate_thickness_num_decimals):

	"""

	Checks if the input entities are a middle surface or a 3D body.


	@faces object: A list of faces, parts, properties or sets. 
	If 0 is specified, then the function works on 
	all visible faces.

	@thickness float: (optional)The approximate thickness for thin walled solid 
	description detection.
	(Default: 0)

	@return_percentage boolean: (optional)If True, then a list with 3 percentage values 
	(0 <= percentage val <= 1) is returned:
	position 0: shell description.
	position 1: thin solid description. Filled only 
	when thickness is provided, else it is set to 0.
	position 2: solid description. If thickness is 
	provided, this percentage represents the area of 
	the part where distance > thickness.
	(Default: False)

	@estimate_thickness boolean: (optional)If True, the function provides a thickness estimation. 
	If thickness is provided, but percentages are not 
	requested, then areas with distance > thickness 
	are not considered as solid description.
	(Default: False)

	@separate_connectivity boolean: (optional)If True, input ents are separated in connectivity groups 
	and each connectivity group is examined separately.
	(Default: False)

	@separate_connectivity_stop_at_pid_bound boolean: (optional)This option is considered only if 
	separate_connectivity == True. If set to True, then 
	connectivity groups are separated per PID.
	(Default: False)

	@fix_unchecked_faces boolean: (optional)Results are more accurate if unchecked faces are fixed. 
	If this has been done before or the user just wishes to 
	skip it then set to False.
	(Default: True)

	@estimate_thickness_num_decimals integer: (optional)The option controls the number of decimal digits to be kept in the thickness estimation results. It is considered only if estimate_thickness = True. (Default: 1)

	@returns object: If return_percentage=True:
	Returns a list with 3 percentage values.
	
	If estimate_thickness=True:
	Returns a list with dicts. Each dict corresponds to one connectivity group. If separation in connectivities is disabled, then the list contains always 1 dict. Each dict has the estimated thickness value as key and its corresponding percentage as data.
	
	If return_percentage=False, estimate_thickness=False:  
	Returns an integer. It is equal to 1 if the input is Solid Description and to 0 otherwise.
	
	The estimated thickness value is a non negative float for Solid Description input or
	-1 if the thickness fails to be estimated (eg. the input is not Solid Description).

	"""

def DisplayModelShells(entities, connectivity_area_limit, target_length, defeaturing_length, feature_line_angle, fill_hole_diameter, exclude_holes_with_hard_points, freeze_hard_points, hard_points_are_grids_with_name, hard_points_are_grids_with_field10, respect_pid_bounds, add_existing_plotels_to_set, create_plotels_in_all_1d_elements, hard_points_are_alc_points, hard_points_are_grids_from_sets, hard_points_sets, convert_shells_to_plotels, output_element_type, create_display_element, alc_points):

	"""

	This function can be used to create FE shell elements based on the nodes of the current FE or macro mesh.


	@entities object: (optional)Can be a list of properties, parts, macros, volumes, 
	fe shells or fe solids, or a single Subsystem, Include or Set. Accepted values are a list of properties, parts, macros, volumes, fe shells, fe solids or a Subsystem, Include, Set, or 'visible'. If the selected entity is a Subsystem, an Include or Set, then the Display Model is created only on the entities of the selected entity.

	@connectivity_area_limit float: (optional)Ignores parts with area smaller than value.

	@target_length float: (optional)Target element length of the output mesh.

	@defeaturing_length float: (optional)Minimum distance between feature lines.

	@feature_line_angle float: (optional)Angle degrees required for the feature line definition.

	@fill_hole_diameter float: (optional)Maximum diameter that will be filled.

	@exclude_holes_with_hard_points boolean: (optional)Holes with hard points are excluded from fill.

	@freeze_hard_points boolean: (optional)Hard points are kept to output mesh (hard points 
	are named nodes or nodes with field 10 entry).

	@hard_points_are_grids_with_name boolean: (optional)Named grids are considered hard points.

	@hard_points_are_grids_with_field10 boolean: (optional)Grids with field 10 are considered hard points.

	@respect_pid_bounds boolean: (optional)Each property creates its own output mesh.

	@add_existing_plotels_to_set boolean: (optional)Adds existing visible plotel elements to set 
	(that DISP.MOD. produces).

	@create_plotels_in_all_1d_elements boolean: (optional)Creates plotel elements to visible 1-d elements.

	@hard_points_are_alc_points boolean: (optional)A/LC points are considered hard points.

	@hard_points_are_grids_from_sets boolean: (optional)Points from sets are considered hard points.

	@hard_points_sets object: (optional)List with set entities.

	@convert_shells_to_plotels boolean: (optional)Convert display model output to plotels. In case both 
	convert_shells_to_plotels and output_element_type 
	are used, convert_shells_to_plotels is ignored.

	@output_element_type string: (optional)Sets the element type of the display model output
	(accepted values: 'shell', 'plotel', 'segment').
	In case both convert_shells_to_plotels and output_element_type 
	are used, convert_shells_to_plotels is ignored.

	@create_display_element boolean: (optional)Create (and return) a Display Model entity instead of a SET.

	@alc_points object: (optional)Can be a list of A/LC points. Accepted values are a list of A/LC points or 'all'. In case a display model is requested for a subsystem value is ignored and the A/LC points used are the ones that belong to the subsystem.

	@returns object: Returns either the set with output mesh or the Display Model entity (if option create_display_element=True) on success, or 0 on failure.

	"""

def Divide(rad1, rad2, len1, len2):

	"""

	Splits a series of fillets in the middle.


	@rad1 float: Lower bound for radius.

	@rad2 float: Upper bound for radius.

	@len1 float: Lower bound for length.

	@len2 float: Upper bound for length.

	@returns integer: It returns 1 in all cases.

	"""

def DoesRepresentationBelongInDM(entity, representation, deck):

	"""
	Deprecated since version 17.0.0. Use function DoesRepresentationExist instead.

	The functions checks if the given representation exists in DM for one or more parts or includes.


	@entity object: May either be one ANSA Part or Include, or a list containing 
	multiple Parts/Includes.

	@representation string: A string describing a potential representation name.

	@deck integer: (optional)A reference to a deck, in case that entity is Include.

	@returns object: When the input to the function is one entity:
	        The function returns 1 if a representation file by the name of repr_name exists.
	        In case that PART is not a valid part or a file by the name repr_name does not exist, 0 is returned.
	When a list with entities is given as input:
	        The function returns a dictionary with the entity as the key and the return value as the value.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function DoesRepresentationExist instead.", DeprecationWarning)

def DownloadPartsFromDM(part, property_conflicts, material_conflicts, set_conflicts, coord_conflicts, node_conflicts):

	"""
	Deprecated since version 17.0.0. Use function DownloadEntities instead.

	This function may only be used along with CheckDMUpdates function.


	@part object: A part that contains DM Items which were output from the CheckDMUpdates() 
	function, in the same way they were given in the output array. Otherwise, 
	they may be collected from the database and given in a matrix.

	@property_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@material_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@set_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@coord_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@node_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@returns integer: Returns the total number of parts that were actually downloaded from DM.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function DownloadEntities instead.", DeprecationWarning)

def DrawCurves(vsb_flag):

	"""

	This function enables/disables the curves visibility flag.


	@vsb_flag integer: 1: Enable the curves visibility flag.
	0: Disable the curves visibility flag.

	@returns integer: Always returns 1.

	"""

def EditEntity(deck, entity, location, read_only):

	"""

	Edit an entity using the edit card's graphics interface. By executing this function,
	the edit card of the specified entity for the current deck pops up.
	If the entity is not visible in the current deck, then no card appears.


	@deck integer: The deck constant.

	@entity object: A reference to the entity.

	@location string: (optional)The location of a "Material Database".

	@read_only boolean: (optional)Opens the Edit Card in read only mode.

	@returns integer: Returns 0 if OK is pressed and 1 if CANCEL is pressed.

	"""

def EditPLMXMLTree(xml_fname, dl_list_fname):

	"""

	@xml_fname string: The path to the xml file or to the CATProduct.

	@dl_list_fname string: The file path to output the D/L List.

	@returns integer: Returns:
	0, if the xml file is invalid.
	1, if the user exited the editor by pressing the 'OK' button.
	2, if the user exited the editor by pressing the 'Cancel' button.

	"""

def EditProductTree(tree, dl_list_fname):

	"""

	Launches the product tree interface.


	@tree object: The tree is the object returned from a previous call to 'NewProductTree' function.

	@dl_list_fname string: The filepath to output the D/L List.

	@returns integer: Returns:
	-1, if the interface failed to open.
	1, if the user exited the interface by pressing the 'OK' button.
	2, if the user exited the interface by pressing the 'Cancel' or the 'ESC' button.

	"""

def EditVpmTree(vpm_fname, dl_list_fname):

	"""

	@vpm_fname string: The path to the vpm file or to the CATProduct.

	@dl_list_fname string: The file path to output the D/L List.

	@returns integer: Returns:
	0, if the vpm file is invalid.
	1, if the user exited the editor by pressing the 'OK' button.
	2. if the user exited the editor by pressing the 'Cancel' button.

	"""

def ElementQuality(entity, quality_criteria):

	"""

	Requests and gets the quality criteria of an element, with the options specified in
	the "Presentation Parameters" window.


	@entity object: Can be either Shell, Solid, Bar or Rod.

	@quality_criteria object: A name (string) or a list which contains the names of the Quality criteria as these 
	are reported in the ANSA TEXT window when applying ELEMENTS>INFO on an entity.

	@returns object: Returns a list containing the entity's quality criteria that were requested in the 
	respective quality_criteria_names list position.
	If the specified entity doesn't exist, 0 is returned.
	If a specified quality criterion is not defined for the entity, "error" is
	returned in the respective position.

	"""

def ElementsOffset(shells, option, offset, pid_offset, part, pid_specific, sharp_edges_limit_angle, distance_mode, set, expand_existing_set):

	"""

	This function offsets (copies/moves) shell elements by means of their normal vector.


	@shells object: List with shells to be offset.

	@option string: Can either be "Copy" or "Move" and determines whether 
	the shells are to be copied or moved to their new position.

	@offset float: Defines the offset distance.

	@pid_offset integer: (optional)The property id which will be assigned to the new shells will be offset 
	by this value. By default, they keep the original property.
	"pid_offset" and "pid_specific" are mutually exclusive.

	@part object: (optional)The new shells will be placed in the given part. If no 
	part is specified, they will go to the current part.

	@pid_specific integer: (optional)The property id which will be assigned to the new shells. 
	"pid_offset" and "pid_specific" are mutually exclusive.

	@sharp_edges_limit_angle float: (optional)The angle that limits the movement of nodes on sharp edges.

	@distance_mode string: (optional)Can either be "Absolute" or "Thickness" and determines the mode
	by which the "distance_offset" will be applied.

	@set object: (optional)The set that the offset result shells will be added to.

	@expand_existing_set boolean: (optional)Expands existing set to the new shells.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def EmptyInclude(include):

	"""

	Deletes all entities contained in include. If an entity cannot be deleted (is used) then it is set as undefined and moved out of includes. If an entity is used and does not support undefined flag then it cannot be moved or deleted and EmptyInclude is considered unsuccessful


	@include object: The include entity to be emptied.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def CurvesFromEntities(entities, connect_curves):

	"""

	This script function defines 3D-curves from input FACEs, CONS, shell/solid edges, Connection Lines, Linear Elements etc.


	@entities object: (optional)This is a list with FACEs, CONS, Connection lines, line elements, SHELLs, SOLIDs etc.
	Also accepts a string with value 'visible' or a string with value 'all' . 
	If it is called with 'visible', it works with all the visible entities concerning the 
	above types . If it is called with 'all', it works with all the entities.
	If nothing is passed it works with the visible.

	@connect_curves object: (optional)A list with two float variables defining nodes matching distance in the first place 
	and angle in the second respectively. If list is given. then script function will 
	merge the created curves, according to the input values, else curves per 
	segment will be created.

	@returns object: Returns a list with the created curves on success, otherwise an empty list on failure.

	"""

def EraseConnectorsFeRep(entities):

	"""

	This function erases the FE Representation of the corresponding Connector entity or 
	all the Connector entities contained in a list.


	@entities object: The connector entities contained in a list.

	@returns integer: Returns 0 if invalid arguments were specified, or 1 otherwise.

	"""

def EraseGenericEntitiesFeRep(entities):

	"""

	This function erases the FE Representation of the corresponding generic entity or all the generic entities 
	contained in a list.


	@entities object: An object or a list of Generic Entity objects.

	@returns integer: Returns 0 if invalid arguments were specified, or 1 otherwise.

	"""

def EvaluateCurvePoint(CURVE, U):

	"""

	The function returns the coordinates in a specific distance on a 3D curve.


	@CURVE object: A reference to the curve entity.

	@U float: The distance of the requested coordinates, from the curve's start point.
	Valid values are between 0 and 1.

	@returns object: The function returns a list containing the XYZ coordinates requested in 
	the global coordinate system. In case an error occurs, 0 will be returned.

	"""

def F11GraphParamsOptionsSet(criterion_name, criterion_status, criterion_min_value, criterion_max_value, number_of_colors):

	"""

	This function enables/disables/changes the corresponding visibility flag/pulldown menus 
	and values, in the "Graph Parameters" tab of the F11 window. 


	@criterion_name string: The criterion name of the F11 window to enable, disable or change. Available values:
	'Use Shell's nodes', 'Use Shell's middle point', 'Show draw mode label', 'Show extra colors', 'Invert colors', 'Color bar limits', 'Color bar range', 'Number of colors', 'Quality graph by', 'No value color', 'Edit colors'

	@criterion_status anything: This argument holds the value that the selected criterion will acquire.
	If the criterion_name is 'Use Shell's nodes', 'Use Shell's middle point', 'Show draw mode label', 'Show extra colors' or 'Invert colors' the accepted value is a boolean.
	If the criterion_name is 'Color bar limits', 'Color bar range' or 'Quality graph by' the accepted value is a string.
	If the criterion_name is 'Number of colors' the accepted value is an integer or a string.
	If the criterion_name is 'No value color' the accepted value is a list of three integers.
	If the criterion_name is 'Edit colors' the accepted value is a dictionary of color index to color value (list of three integers)

	@criterion_min_value anything: (optional)This argument is available if criterion_name="Color bar limits" and 
	criterion_status="User min-max" or "Ranges defined min-max".
	It holds the minimun value, which can be a float or a string respectively.

	@criterion_max_value anything: (optional)This argument is available if criterion_name="Color bar limits" and 
	criterion_status="User min-max" or "Ranges defined min-max".
	It holds the maximum value, which can be a float or a string respectively.

	@number_of_colors integer: (optional)The total number of colors.

	@returns integer: Returns 1 on success or 0 on error.

	"""

def F11PresParamsOptionsGet(parameter_name):

	"""

	This function gets the corresponding visibility flag/pulldown menu and their values (if they exist).


	@parameter_name object: "Shrink shells %", "Shrink Rbe2s", "Draw 2nd order faster",
	"Draw 2nd order perim in detail", "Draw shell as solid",
	"Element orientation", "Material orientation", "Bar/Beam CrossSection",
	"CrossSection M,S,1-2 sys", "Transformations", "Transformations method", "Explode view", 
	"Connections draw mode:", "Shell Normal Vectors", "Shell Normal Vectors Size".
	
	Draw Sizes buttongroup: "Coords", "Loads", "SPCs", "Line width"
	Graphics buttongroup: "Elements %", "Light", "Shadow unmeshed", "Feature lines angle".
	
	Labels buttongroup: "Elements", "Nodes", "labels Loads", "labels Masses",
	"labels SPCs", "Names".
	
	Magnitude buttongroup: "magnitude Masses", "magnitude Loads",
	"magnitude DVGrid", "magnitude DVGrid", "Detail on Demand effect".
	
	Visualization buttongroup: "Draw per PID", "Draw CONS in PID,MID,... mode,like in ENT mode", 
	"Transparency".

	@returns object: Returns a dictionary with keys "status" and "value", on success.
	On failure, returns an empty dictionary.

	"""

def F11PresParamsOptionsSet(parameter_name, parameter_status, parameter_value):

	"""

	This function enables/disables/changes the corresponding visibility flag/pulldown menu 
	and values.


	@parameter_name string: The criterion name to enable or disable.

	@parameter_status anything: (double/boolean) A boolean to enable/disable a value, 
	or a double when numerical input is required.

	@parameter_value float: (optional)An optional argument to set a float value, according to the criterion.

	@returns integer: Returns 1 on success or 0 on error.

	"""

def F11ShellsOptionsGet(criterion_name):

	"""

	This function returns the corresponding visibility flag/pulldown menu 
	and values for shells quality criteria. The visibility flag is returned in the argument "status".
	If the criterion has a calculation method, then it's name is returned in the argument "calc".
	If the criterion does not have a calculation method, then the "calc" argument is 0.
	The criterion failed value is returned in the last argument.


	@criterion_name string: The name of the desired criterion, to retrieve its value.

	@returns object: Returns a dictionary on success or None on error.
	The dictionary's key are: "status", "calculation" and "value".

	"""

def F11ShellsOptionsSet(criterion_name, criterion_status, criterion_calculation, criterion_value):

	"""

	This function enables/disables/changes the corresponding visibility flag/pulldown menu 
	and values. When status equals True the visibility flag is turned on, while off if value if False. 
	The pulldown menu options can be accessed using the exact name of the Calculation used (e.g. NASTRAN)


	@criterion_name string: The criterion name of the F11 window to enable, disable or change.

	@criterion_status boolean: True or False, to set the criterion active or inactive.

	@criterion_calculation string: A string to set the respective criterion's calculation field.
	An empty string should be given if you don't care for this argument.
	Using a string that doesn't match any calculation name will return an error.

	@criterion_value float: A float to set the respective criterion's value field.

	@returns integer: Returns 1 on success or 0 on error.

	"""

def F11SolidsOptionsGet(criterion_name):

	"""

	This function returns the corresponding visibility flag/pulldown menu 
	and values for solids quality criteria. The visibility flag is returned in the argument "status".
	If the criterion has a calculation method, then it's name is returned in the argument "calc".
	If the criterion does not have a calculation method, then the "calc" argument is 0.
	The criterion failed value is returned in the last argument.


	@criterion_name string: The criterion name, to retrieve its value.

	@returns object: Returns a dictionary on succes or None on failure.
	The dictionary's keys are: "status", "calculation" and "value".

	"""

def FacesConvert(entities):

	"""

	Converts link faces to geom faces.


	@entities object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@returns integer: Returns the length of the converted faces, as an integer.

	"""

def FacesNewFitted(faces_array, join_perimeters, respect_user_selection, ret_ents):

	"""

	This script function creates a surface that fits the elements (CONS, CURVES) of list, in order to host the new face.
	It takes a list of cons curves, puts in line the elements of table (automatically) and then creates a face.


	@faces_array object: Is a list with entities (CONS, CURVES, ELEMENTS, CONNECTION CURVES etc.).
	The new face will be created based on these entities.

	@join_perimeters boolean: (optional)Is a boolean value to join the perimeters of the created face or not.

	@respect_user_selection boolean: (optional)If True then the order of entries in faces_array will be respected and thus 
	Cons will be created in that order.
	(Default: False)

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.
	(Default: False)

	@returns object: Returns the number of created faces, otherwise 0.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def FacesNewPlanar(faces_array, join_perimeters, respect_user_selection, ret_ents):

	"""

	This script function creates a new planar face. The underlying planar Surface is automatically created.
	It takes a matrix of cons curves, puts in line the elements of table (automatically) and then create a face.


	@faces_array object: A list with entities (CONS, CURVES, ELEMENTS, CONNECTION CURVES etc.).
	The new face is created based on these entities.

	@join_perimeters boolean: (optional)A boolean value to join the perimeters of the created face or not.
	(Default: False)

	@respect_user_selection boolean: (optional)if True then the order of entries in faces_array will be respected and thus 
	Cons will be created in that order.
	(Default: False)

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.
	(Default: False)

	@returns object: Returns the number of the created faces on success, otherwise 0.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def FacesProject(faces1, faces2, range, project_type, min_length, split_original, connect_with_faces, paste, produce_curves, part, property):

	"""

	This script function projects all the CONS of a group of faces (faces1) to a second group of faces (faces2), also applying the topology, if desired.


	@faces1 object: A face, a list of faces, a string with value 'visible' or a string with 
	value 'all'. If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@faces2 object: A face, a list of faces, a string with value 'visible' or a string with 
	value 'all'. If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@range float: (optional)If given, projections are being created only in areas that the projection 
	distance is not bigger than the specified value, else there is no limitation.

	@project_type object: (optional)A dictionary containing tuples of string values 'normal' or 'user' - a triple 
	of floats defining the direction, in case that string value is 'user'.
	Triple of floats may not be given, in case that the string value equals 
	to 'normal'.

	@min_length float: (optional)If given, avoids projections in areas that would create CONs very close 
	to existing ones, provided that the defined value is not bigger than the 
	critical length.

	@split_original boolean: (optional)If True, the source CONS of the faces1 will be split according to their 
	projections' Hot Points.

	@connect_with_faces boolean: (optional)If True, results in the creation of Faces between the original CONS of the 
	faces1 and their projections.

	@paste boolean: (optional)If True, CONS of faces1 and target projections (faces2) are pasted, where/ if 
	their distance is smaller than the "CONS matching distance" parameter in 
	Windows>Settings>Settings>Tolerance.

	@produce_curves boolean: (optional)If True, 3D Curves are produced instead of CONS as projections of the faces1.

	@part object: (optional)The part of the created face(s) in case that connect_with_faces flag is True.

	@property object: (optional)The property of the created face(s) in case that connect_with_faces flag is True.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def Field10ToGrids(pattern):

	"""

	The Field10ToGrids() function returns all Grids with non-empty field 10.
	If the 'pattern' argument is defined, then the function returns all Grids whose field 10 matches the defined pattern.


	@pattern string: (optional)A string with the search pattern.

	@returns object: Returns None, when no field 10 matches are found, or a list containing references to entities with successful field 10 matches.

	"""

def FillCorner(faces):

	"""

	Transforms free round shaped edges (red CONS) into sharp-edged corners.


	@faces object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@returns integer: Always returns 1.

	"""

def FindMatchesInDM(parts, tolerance):

	"""
	Deprecated since version 17.0.0. Use function FindMatches instead.

	Given a parts list, this function searches the DM for matching parts, under the tolerance.


	@parts object: List that contains the ANSA parts for which a match will be searched in DM.

	@tolerance float: The match tolerance value.

	@returns object: The function returns the list of matches that were found in DM. Otherwise it returns None

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function FindMatches instead.", DeprecationWarning)

def FlangeTopo(FACES1, FACES2):

	"""

	This script function takes two list of faces, locates the common area between them and deletes it from the second group. 
	Finally topology applied between two groups of faces.


	@FACES1 object: A list of faces.

	@FACES2 object: A list of faces.

	@returns integer: Returns 1 on success, or 0 otherwise.

	"""

def FourBarsAutoPositionSeat(Y_Point, S_Point):

	"""

	All arguments correspond to the respective fields of the 4 Bar Mechanism dialog
	FourBarsDefineMembers and FourBarsDefineSlider should be called before FourBarsAutoPositionSeat.


	@Y_Point

	@S_Point

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FourBarsDefineBackrest(backrest, T1, T2):

	"""

	FourBarsDefineMembers should be called before FourBarsAutoPositionSeat.


	@backrest

	@T1

	@T2

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FourBarsDefineMembers(coupler, driver, follower, OA, OB, A, B, x, y, z):

	"""

	All arguments correspond to the respective fields of the 4bars dialog.


	@coupler

	@driver

	@follower

	@OA

	@OB

	@A

	@B

	@x

	@y

	@z

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FourBarsDefineSlider(slider, T1, T2):

	"""

	All arguments correspond to the respective fields of the 4 Bar Mechanism dialogFourBarsDefineSlider should be called before FourBarsAutoPositionSeat.


	@slider

	@T1

	@T2

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FourBarsLockBackrest(status):

	"""

	FourBarsLockBackrest should be called after FourBarsDefineBackrest and FourBarsDefineMembers.


	@status: ON or OFF. (1 for ON 0 for OFF)

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FourBarsLockSlider(status):

	"""

	FourBarsLockSlider should be called after FourBarsDefineSlider and FourBarsDefineMembers.


	@status: LockSlider status ON or OFF. (1 for ON 0 for OFF)

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FourBarsRotateMechanism(angle):

	"""

	All arguments correspond to the respective fields of the 4 Bar Mechanism dialog.


	@angle

	@returns integer: Returns 0 on success, non-zero on failure.

	"""

def FreezeVisibleFaces():

	"""

	Freezes the visible faces.


	@returns integer: Always returns 1.

	"""

def GatherElements(deck, type, search_mode, gather_from, gather_from_containers, x, y, z, search_radius, source, angle):

	"""

	A function that gathers desired elements from all elements of the model or from every visible item or from containers.
	This function works as a script alternative for selecting. The user can gather any element he needs in a similar way as he would select elements from the screen.
	
	The function works in three modes:
	
	Mode A: Proximity
	 The function will gather all elements that are approximated to a user defined selection point, 
	 according to a given range.
	Mode B: Connectivity
	 The function will gather all elements that are connected to a starting (user given) element. Two elements are
	 considered connected if they have at least one common node.
	Mode C: Feature angle 
	 The function will gather elenents in a way that mimics the feature angle selection tool of ANSA. A starting point 
	 must also be given.
	Mode D: Macro area 
	 The function will gather elenents in a way that mimics the macro area selection tool of ANSA. A starting point 
	 must also be given.


	@deck integer: The desired deck. Default current deck.

	@type string: (optional)Accepted values: "Same" or "All". Choose if the elements that will be 
	returned are going to have the same type with the given starting point.
	With option "All", every elements will be returned regardless of their type, 
	or by giving a type (or a list of types) the user can select which types 
	are going to be returned.

	@search_mode string: (optional)Accepted values: "Proximity", "Connectivity", "Feature_angle" or "Macro_area".
	(Default: "Proximity")

	@gather_from string: (optional)Accepted values: "Visible" or "All". Choose the pool from where the function 
	will gather the elements.

	@gather_from_containers object: (optional)As containers the user can give an entity or a list of entities that can hold
	elements. Examples of containers are Sets, Parts, Properties etc.

	@x float: (optional)The x coordinate of the selection point (Mode A only).

	@y float: (optional)The y coordinate of the selection point (Mode A only).

	@z float: (optional)The z coordinate of the selection point (Mode A only).

	@search_radius float: (optional)The range around selection point that the function will search to 
	gather elements (Mode A only).

	@source object: (optional)Starting element (or list of starting elements) (Mode B, Mode C and Mode D only).

	@angle float: (optional)The desired feature angle in order to execute Mode C.

	@returns object: Returns a dictionary with gathered elements on success or 0 on failure.
	        
	When in Mode B, Mode C or Mode D the keys of the dictionary correspond to the starting elements.
	The value of each key is a list containing the gathered elements.

	"""

def GeoMirrorAxis(input_function_type, pid_offset, group_offset, input_sets_type, x, y, z, fx, fy, fz, entities, draw_results, keep_connectivity, existing_part):

	"""

	The function mirrors entities by means of an axis.


	@input_function_type string: Determines whether the entities will be copied, 
	moved or linked. The avaialble options are: "COPY", 
	"MOVE" and "LINK" respectively.

	@pid_offset integer: Determines if the pids of the entities will be 
	offset or not. Use 0 to denote that offset will 
	not take place and any other integer to denote 
	the exact offset value.
	Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset
	the original PID or "CURRENT_PROPERTY" to assign
	the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The avaialble options 
	are: "COPY", "EXPAND" and "NONE"

	@x float: The coordinates of the first of the two points that 
	specify an axis.

	@y string: The coordinates of the first of the two points that 
	specify an axis.

	@z float: The coordinates of the first of the two points that 
	specify an axis.

	@fx float: The coordinates of the second of the two points that 
	specify an axis.

	@fy float: The coordinates of the second of the two points that 
	specify an axis.

	@fz float: The coordinates of the second of the two points that 
	specify an axis.

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion of the function.
	(Default: False)

	@keep_connectivity boolean: (optional)True or False.
	(Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GeoMirrorPlane(input_function_type, pid_offset, group_offset, input_sets_type, fx, fy, fz, fx2, fy2, fz2, fx3, fy3, fz3, entities, draw_results, keep_connectivity, existing_part):

	"""

	The function mirrors entities by means of a plane.


	@input_function_type string: Determines whether the entities will be copied, 
	moved or linked. The avaialble options are: "COPY", 
	"MOVE" and "LINK" respectively.

	@pid_offset anything: Determines if the pids of the entities will be offset or not.
	Use 0 to denote that offset will not take place and any 
	other integer to denote the exact offset value.
	Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset
	the original PID or "CURRENT_PROPERTY" to assign
	the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The avaialble options 
	are: "COPY", "EXPAND" and "NONE"

	@fx float: The coordinates of the first of three points that 
	specify the mirror plane.

	@fy float: The coordinates of the first of three points that 
	specify the mirror plane.

	@fz float: The coordinates of the first of three points that 
	specify the mirror plane.

	@fx2 float: The coordinates of the second of three points that 
	specify the mirror plane.

	@fy2 float: The coordinates of the second of three points that 
	specify the mirror plane.

	@fz2 float: The coordinates of the second of three points that 
	specify the mirror plane.

	@fx3 float: The coordinates of the third of three points that 
	specify the mirror plane.

	@fy3 float: The coordinates of the third of three points that 
	specify the mirror plane.

	@fz3 float: The coordinates of the third of three points that 
	specify the mirror plane.

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion of the function.
	(Default: False)

	@keep_connectivity boolean: (optional)True or False.
	(Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GeoMirrorPoint(input_function_type, pid_offset, group_offset, input_sets_type, fx, fy, fz, entities, draw_results, keep_connectivity, existing_part):

	"""

	The function mirrors entities by means of a point.


	@input_function_type string: Determines whether the entities will be copied, 
	moved or linked. The avaialble options are: "COPY", 
	"MOVE" and "LINK" respectively.

	@pid_offset integer: Determines if the pids of the entities will be 
	offset or not. Use 0 to denote that offset will 
	not take place and any other integer to denote 
	the exact offset value.
	Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset
	the original PID or "CURRENT_PROPERTY" to assign
	the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The avaialble options 
	are: "COPY", "EXPAND" and "NONE"

	@fx float: The coordinates of the point that specifies the 
	mirror plane.

	@fy float: The coordinates of the point that specifies the 
	mirror plane.

	@fz float: The coordinates of the point that specifies the 
	mirror plane.

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion of the function.
	(Default: False)

	@keep_connectivity boolean: (optional)True or False.
	(Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GeoRotate(input_function_type, pid_offset, group_offset, input_sets_type, fx, fy, fz, fx2, fy2, fz2, angle, entities, draw_results, keep_connectivity, existing_part):

	"""

	The function rotates entities around a rotation axis.


	@input_function_type string: Determines whether the entities will be copied, 
	moved or linked. The available options are: "COPY", 
	"MOVE" and "LINK" respectively.

	@pid_offset integer: Determines if the pids of the entities will be 
	offset or not. Use 0 to denote that offset will 
	not take place and any other integer to denote 
	the exact offset value.
	Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset
	the original PID or "CURRENT_PROPERTY" to assign
	the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The avaialble options 
	are: "COPY", "EXPAND" and "NONE".

	@fx float: The coordinates of the first of two points that 
	specify the rotation axis.

	@fy float: The coordinates of the first of two points that 
	specify the rotation axis.

	@fz float: The coordinates of the first of two points that 
	specify the rotation axis.

	@fx2 float: The coordinates of the second of two points that 
	specify the rotation axis.

	@fy2 float: The coordinates of the second of two points that 
	specify the rotation axis.

	@fz2 float: The coordinates of the second of two points that 
	specify the rotation axis.

	@angle float: The desired rotation angle in degrees.

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion
	of the function. (Default: False)

	@keep_connectivity boolean: (optional)If True it will keep the connectivity. (Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 upon successful execution, or 1 if an error occurs.

	"""

def GeoRotateMoveSet(set, x1, y1, z1, x2, y2, z2, angle):

	"""

	This function rotates all geometric entities of a set.


	@set object: The set.

	@x1 float: The x coordinate of the first point.

	@y1 float: The y coordinate of the first point.

	@z1 float: The z coordinate of the first point.

	@x2 float: The x coordinate of the second point.

	@y2 float: The y coordinate of the second point.

	@z2 float: The z coordinate of the second point.

	@angle float: The rotation angle.

	@returns integer: Returns 0 on success, 1 on failure.

	"""

def GeoScale(input_function_type, pid_offset, group_offset, input_sets_type, dx, dy, dz, scale_value, entities, draw_results, keep_connectivity, existing_part):

	"""

	This function scales entities.


	@input_function_type string: Determines whether the entities will be copied, moved or linked. 
	The avaialble options are: "COPY", "MOVE" and "LINK" respectively.

	@pid_offset integer: Determines if the pids of the entities will be offset or not. Use 0 to denote 
	that offset will not take place and any other integer to denote the exact 
	offset value. Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset the original PID
	or "CURRENT_PROPERTY" to assign the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The avaialble options 
	are: "COPY", "EXPAND" and "NONE".

	@dx float: The coordinates of the reference point.

	@dy float: The coordinates of the reference point.

	@dz float: The coordinates of the reference point.

	@scale_value float: The scale factor.

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion of the function.
	(Default: True)

	@keep_connectivity boolean: (optional)True or False. (Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GeoSymmetry(input_function_type, pid_offset, group_offset, input_sets_type, entities, draw_results, keep_connectivity, existing_part):

	"""

	This function creates symmetric entities.


	@input_function_type string: Determines whether the entities will be copied, 
	moved or linked. The avaialble options are: "COPY", 
	"MOVE" and "LINK" respectively.

	@pid_offset integer: Determines if the pids of the entities will be 
	offset or not. Use 0 to denote that offset will 
	not take place and any other integer to denote 
	the exact offset value.
	Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset
	the original PID or "CURRENT_PROPERTY" to assign
	the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The avaialble options 
	are: "COPY", "EXPAND" and "NONE"

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion
	of the function. (Default: False)

	@keep_connectivity boolean: (optional)True or False. (Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GeoTransform(input_function_type, pid_offset, group_offset, input_sets_type, x0, y0, z0, dx1, dy1, dz1, dx2, dy2, dz2, x1, y1, z1, dx3, dy3, dz3, dx4, dy4, dz4, entities, draw_results, keep_connectivity, convert_ranges_to_entities, existing_part, duplicate_affected_coords, move_with_coord):

	"""

	This function transforms entities in a way that immitates the GUI function Utilities>Transform>Copy/Move/Link>Transform. The transformation takes place between two coordinate systems (defined implicitly via the x0/1, y0/1, z0/1 and dx1/2, dy1/2, dz1/2 arguments of the function)/ It is a simultaneous translation and rotation procedure.


	@input_function_type string: Determines whether the entities will be copied, 
	moved or linked. The available options are: "COPY", 
	"MOVE" and "LINK" respectively.

	@pid_offset object: Determines if the pids of the entities will be 
	offset or not. Use 0 to denote that offset will 
	not take place and any other integer to denote 
	the exact offset value.
	Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset
	the original PID or "CURRENT_PROPERTY" to assign
	the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the ways sets will be treated. It is used 
	only in COPY and LINK mode. The available options 
	are: "COPY", "EXPAND" and "NONE"

	@x0 float: The x coordinate of the origin point.

	@y0 float: The y coordinate of the origin point.

	@z0 float: The z coordinate of the origin point.

	@dx1 float: The x coordinate of the 1st origin vector (i.e of the unit vector that defines the x direction of the origin coordinate system).

	@dy1 float: The y coordinate of the 1st origin vector.

	@dz1 float: The z coordinate of the 1st origin vector.

	@dx2 float: The x coordinate of the 2nd origin vector (i.e of the unit vector that, together with the 1st origin vector, defines the xy plane of the origin coordinate system).

	@dy2 float: The y coordinate of the 2nd origin vector.

	@dz2 float: The z coordinate of the 2nd origin vector.

	@x1 float: The x coordinate of the destination point.

	@y1 float: The y coordinate of the destination point.

	@z1 float: The z coordinate of the destination point.

	@dx3 float: The x coordinate of the 1st destination vector (i.e of the unit vector that defines the x direction of the destination coordinate system).

	@dy3 float: The y coordinate of the 1st destination vector.

	@dz3 float: The z coordinate of the 1st destination vector.

	@dx4 float: The x coordinate of the 2nd destination vector (i.e of the unit vector that, together with the 1st destination vector, defines the xy plane of the destination coordinate system).

	@dy4 float: The y coordinate of the 2nd destination vector.

	@dz4 float: The z coordinate of the 2nd destination vector.

	@entities object: A list containing references to the entities to 
	be copied/moved. The list can contain different
	types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)If True it will refresh the screen after completion
	of the function. (Default: False)

	@keep_connectivity boolean: (optional)If True it will keep the connectivity. (Default: False)

	@convert_ranges_to_entities boolean: (optional)Affects the copies of Sets that involve Ranges of entity ids.
	When set to True, the copied sets acquire directly the
	corresponding entities instead of Ranges (Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@duplicate_affected_coords boolean: (optional)If True, a new local coordinate system is created and assigned to 
	the transformed entities. If False, the local coordinate system of 
	the original entities is used. (Default: True)

	@move_with_coord boolean: (optional)Determines whether entities are transformed together with
	their local coordinate system during MOVE operation
	of the latter. (Default: True)

	@returns integer: Returns 0 on success, or 1 if an error occurs.

	"""

def GeoTranslate(input_function_type, pid_offset, group_offset, input_sets_type, dx, dy, dz, entities, draw_results, keep_connectivity, existing_part):

	"""

	This function translates entities according to the input given by the arguments. The arguments are explained below:


	@input_function_type string: Determines whether the entities will be copied, moved or linked. 
	The available options are: "COPY", "MOVE" and "LINK" respectively.

	@pid_offset object: Determines if the pids of the entities will be offset or not. 
	Use 0 to denote that offset will not take place and any other integer to denote 
	the exact offset value. Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset the original PID
	or "CURRENT_PROPERTY" to assign the current PID to all the new entities.

	@group_offset string: It is used only in COPY and LINK mode. The avaialble 
	options are: "SAME PART", "CURRENT PART",
	"EXISTING PART", "NEW PART" and "NEW INSTANCE".
	The "existing_part" argument should be specified if
	"EXISTING PART" is used.

	@input_sets_type string: Controls the way sets will be treated. It is used only in COPY and LINK mode.
	The available options are: "COPY", "EXPAND" and "NONE".

	@dx float: Specify the translation distance in the x axis.

	@dy float: Specify the translation distance in the y axis.

	@dz float: Specify the translation distance in the z axis.

	@entities object: A list containing references to the entities to be copied/moved. 
	The list can contain different types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)Defines whether the results should be redrawn at the end of the transformation. 
	Values can be True or False. Default value is False.

	@keep_connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved entities 
	should be released or not in a MOVE transformation. Value can be True or False. 
	Default value is False.

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GeoTranslateMoveSet(set, dx, dy, dz):

	"""

	This function translates geometrical entities hosted in a SET according to
	the translation vector given by the arguments.


	@set object: The set.

	@dx float: The x component of the vector.

	@dy float: The y component of the vector.

	@dz float: The z component of the vector.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def GetANSAdefaultsValues(fields, mbcontainer_type):

	"""
	Deprecated since version 22.0.0. Use function BCSettingsGetValues instead.

	Function is obsolete. Use BCSettingsGetValues() instead.


	@fields object: A list of ANSA defaults keywords whose values will be retrieved.

	@mbcontainer_type string: (optional)If this argument is provided, for fields 
	that can be customized per Model Browser
	Container, the value of the specified 
	container type is collected.
	
	Accepted values are:
	"ANSA_SUBSYSTEM",
	"ANSA_SIMULATION_MODEL",
	"ANSA_LOADCASE",
	"ANSA_SIMULATION_RUN"

	@returns object: On success it returns a dictionary where the keys are the ANSA defaults keywords
	provided as arguments and the values are their retrieved values stored in ANSA. 
	On failure it returns None.
	In case the optional script argument "mbcontainer_type" is specified, the return
	value will contain the ANSA default values of the that type.

	"""

	import warnings; warnings.warn("Deprecated since version 22.0.0. Use function BCSettingsGetValues instead.", DeprecationWarning)

def GetConfigurationIncludes(INCLUDE_CONFIG):

	"""

	This function gets all the includes that belong to an include configuration.


	@INCLUDE_CONFIG object: A reference to an include configuration.

	@returns object: Returns a list that contains all the includes that belong to the INCLUDE_CONFIG.

	"""

def GetCrossSectionsSettings(fields):

	"""

	Gets values of global parameters for ANSA Cross Sections.


	@fields object: A list with the request labels. Recognizable parameter names and 
	extracted values are:
	"Transparent Plane": 0, 1
	"Transparency"
	"Cross curves resolution"
	"Automatically Update After Every Run": 0, 1
	"Calculate offsets and orientation of beams": 0, 1
	"Boundary elements accumulation factor"
	
	"<result> visibility": 0, 1 (<result>: any Cross Section result)
	"<result> format": "Default", "Float", "Scientific" (<result>: any Cross Section result)
	"<result> decimal digits" (<result>: any Cross Section result)
	
	"Extracted type": "PBAR", "PBEAM" 
	"Assign values based on": "X-Y", "1-2"
	"Segments' distortion angle limit"
	"Restrictions": "Version < 2013.1", "Version >= 2013.1"
	"POINT start id"
	"SET3 start id"
	
	"Enable similarity": 0, 1
	"Similarity mode": "Geometry", "Results"
	"factor(%)"
	"tol geom"
	"tol thick"
	"tol E"
	"tol n"
	"<result> tolerance" (<result>: any Cross Section result)
	
	"Assume nonhomogeneous if E differs more than" 
	"Definition of reference E, v": "user_selection", "specify"
	"Eref"
	"vref"

	@returns object: Returns a dictionary on success, or None on failure. 
	The return keys of the dictionary correspond to the list of the requested labels.
	The dictionary's values are the function's returns.

	"""

def GetCurrentAnsaModel():

	"""

	This function returns the ansa model instance, which is currently set as current. Different databases can be opened
	and handled in Ansa in separate model instances, but only one instance can be current at any single moment. All ansa
	functionality will run on the current model. The function should only be used in combination with the following
	functions: SetCurrentAnsaModel(), GetCurrentAnsaModel(), DestroyAnsaModel().


	@returns object: Returns the current ansa model.

	"""

def GetCurrentDeckDatabaseTypesInInclude( include, recursive):

	"""
	Deprecated since version 18.0.0. Use function GetDatabaseTypesInInclude instead.

	Returns all different ansa types contained in an include as seen in current deck database. Helpfull to answer questions like "does include has this type entities?".


	@include object: A reference to an INCLUDE ANSA entity.

	@recursive boolean: Recursively search any containers contained in a higher level INCLUDE. 
	Availiable options: True or False

	@returns object: Returns a list with the types of entities contained in the selected INCLUDE.
	In case that the selected INCLUDE is empty, it returns 0.

	"""

	import warnings; warnings.warn("Deprecated since version 18.0.0. Use function GetDatabaseTypesInInclude instead.", DeprecationWarning)

def GetCurrentIncludeConfiguration():

	"""

	Returns the current include configuration.


	@returns object: Returns the current include configuration or None if no current include configuration exists.

	"""

def GetCurveLength(element_curve):

	"""

	This function calculates the length of a curve. CURVE is the required curve entity.


	@element_curve: The curve entity, to calculate its length.

	@returns integer: Returns the length of the curve, or -1 if an error occurs.

	"""

def GetCurveTolerance():

	"""

	This funtion gives the current CONS matching distance. This value coresponds to the field "CONS matching distance" 
	placed in Options>Settings>Tolerances.


	@returns float: Returns the current cons matching distance.

	"""

def GetEntity(deck, type, element_id, location):

	"""

	Returns a reference to an entity using its ID and TYPE.


	@deck integer: The deck.

	@type string: A string that describes the type of the entity. 
	It can be retrieved from the title of the element's edit card, 
	where it is displayed within brackets. 
	To get a reference to a property, material, model browser container
	or coordinate system, the types "__PROPERTIES__", "__MATERIALS__",
	"__MBCONTAINERS__"and "__COORD_SYSTEMS__" can be used instead
	of the exact entity type.

	@element_id integer: The id of the entity seeking its reference.

	@location string: (optional)For entities in the material database location = 'Material Database'

	@returns object: Returns a reference to the entity on success, or None if the entity is not found.

	"""

def GetEntityAttributeFromSet(set, entity, attribute_name):

	"""

	Returns the value that an entity's attribute has in a set.


	@set object: A reference to a set.

	@entity object: A reference to an entity.

	@attribute_name string: Availabe attribute names:
	-"Oriented": value can be "SPOS", "SNEG" or " ".
	-"Output as": value can be "PART_IO" or "PART" for properties and 
	  "BOX_SHELL", "BOX_SOLID", "BOX_SLDIO" or "BOX" for boxes.
	-"Output Face as": value can be "Solidfacets" or "Shells".
	
	When ENTITY is not included in the SET, the attribute value 
	is "not found", and if the ENTITY does not support the 
	specified attribute its value is "invalid attribute".

	@returns string: Returns a string with the attribute's value.

	"""

def GetEntityInclude(entity):

	"""

	Returns the include file of the given entity.


	@entity object: A reference to the entity.

	@returns object: Returns the include file on success, None otherwise.

	"""

def GetEntityPart(entity):

	"""

	Gets a reference to the PART of an entity.


	@entity object: A reference to an entity, to find the part it belongs to.

	@returns object: Returns a reference to the part where the entity belongs, or None if the element does not belong to a PART.

	"""

def GetEntityType(DECK, entity):

	"""

	Returns a string containing the TYPE of an entity.


	@DECK integer: The desired Deck

	@entity: A reference to the entity, to find its type.

	@returns string: Returns a string containing the TYPE of the Entity, on success.

	"""

def GetEntityVisibFlag(deck, entity_name):

	"""

	This function gets the corresponding visibility flag status of entity.


	@deck integer: The deck constant.

	@entity_name string: The name of the entity to get visibility status.

	@returns integer: Returns 1 if the visibility flag is turned on, 0 if it is turned off and -1 at error.

	"""

def GetFaceArea(FACE):

	"""

	This function calculates the area of a face.


	@FACE object: The required face entity.

	@returns float: Returns the area of a face or -1.0, if an error occurs.

	"""

def GetFaceMacro(face):

	"""

	This function returns the macro that the given face belongs to.


	@face object: The face entity.

	@returns object: Returns the macro that the given face belongs to, or None in case of error.

	"""

def GetFaceOrientation(face):

	"""

	The function calculates a faces orientation vector.


	@face object: The face entity whose orientation vector will be calculated.

	@returns object: Returns a list containing the vector's coordinates.

	"""

def GetFacesOfCons(cons):

	"""

	Returns the faces that the input CONS belong to.


	@cons object: A CONS entity, CONS ID, a list of CONS entities, a list of CONS IDs, or a list of CONS entities and IDs.

	@returns object: Returns a list with the faces that the input CONS belong to.

	"""

def GetFirstEntity(deck, type, location):

	"""

	Gets a reference to the first entity of the database using its TYPE.


	@deck integer: The deck.

	@type string: A string that describes the entity. It can be retrieved from the title of 
	the entity's edit card, where it is displayed within brackets.

	@location string: (optional)For entities in the material database location = 'Material Database'.

	@returns object: Returns a reference to the entity, or None if no entity is found.

	"""

def GetFirstPartEntity(PART):

	"""

	Gets a reference to the first entity of a PART.


	@PART object: A reference to an ANSA part. It can be obtained from a previous 
	call to GetFirstEntity, GetNextEntity.

	@returns object: Returns a reference to the entity, or None if no entity is found.

	"""

def GetFringeBarMinMaxValues():

	"""

	This function calculates the minimum and maximum limits of the visible fringe bars.
	The lists min_values and max_values will contain the minimum and maximum limits of the visible fringe bars respectively.If one fringe bar is visible, then only the first position of each list will have a value. The second position will be zero.If no fringe bars are visible, then both list will contain zeros.
	If two fringe bars are visible, then each list will have two values. 
	The latter occurs when the "Color Bar Limits" is "Ranges defined min-max" or when the "Color Bar Colors" is "Use unique color for each range" and there are both shells and solids visible and the view mode is QGRAPH.


	@returns object: Returns a Dictionary object with two keys: min_values and max_values.
	min_values and max_values are lists with two positions.

	"""

def GetGeneralComment():

	"""

	Gets the Deck's General Comment.


	@returns string: Returns the string entered as a General Comment.

	"""

def GetGlobalControl(deck):

	"""

	Function that returns the active global control of the base. Works for Decks that have one control per model, 
	(DECK_DYN, DECK_PAM, DECK_RDS, CFD_OPENFOAM, DECK_ANSYS). For other decks such as for example ABAQUS one 
	can use the GetEntity() function.


	@deck constant: (optional)The deck. Default value is the current deck.

	@returns object: Returns a reference to the Control object on success, or 0 on failure.

	"""

def GetHighlightColor(container, ent):

	"""

	Gets the color with which an entity is set into a Highlight Container.


	@container object: A reference to a highlight container.

	@ent object: A reference to an entity that will placed in the highlight container.

	@returns string: Returns the color keyword on success or the keyword "Invalid" upon failure.

	"""

def GetHighlightContainerContents(container):

	"""

	All the objects that are contained into the highlight container will be returned as a list.


	@container object: A reference to a highlight container.

	@returns object: Returns a list containing ansa entities.

	"""

def GetIncludeActiveState(include):

	"""

	Returns the include active state.


	@include object: A reference to the include object.

	@returns integer: Returns the active state:
	0: Include is inactive, has been unloaded from includes manager or "UnloadInclude" script function,
	   it is empty and visible only on includes manager and NVH console.
	1: Include is active and visible.
	2: Include is in a middle (zombie) state, tried to unload but contained entities with external references
	   and thus could not fully be unloaded. it seems active but is mostly unused to the model.
	   Usually LoadIncludeConfiguration (with "reload" option) or ReplaceInclude will solve this situation.

	"""

def GetIncludeExclusiveState(include):

	"""

	Returns the include "configuration exclusive" state.
	The exclusive state is mainly used in the Includes Configurator and usualy refers to group includes.
	An exclusive group include can have only one of its children includes active (loaded).


	@include object: A reference to an include object.

	@returns integer: Returns the exclusive state:
	-0: include is not exclusive.
	-1: include is exclusive (if LoadInclude is applied in one of its children, all other children will be unloaded).

	"""

def GetInternalAndExternalFacets(deck, entities):

	"""

	The GetInternalAndExternalFacets returns the internal and the external facets of the ANSA model.
	If the 'entities' argument is defined, then the function will only return the facets from these entities.


	@deck integer: The deck constant.

	@entities object: (optional)An object or a list of objects to get the facets from.

	@returns object: Returns a dictionary with two items:
	-key: "internal_facets"         value: a list with the internal facets
	-key: "external_facets"         value: a list with the external facets

	"""

def GetLoadCurveData(entity):

	"""

	Returns the values of a curve data table.


	@entity object: A reference to the curve data table.

	@returns: Returns a two dimensional list that contains the values of a curve's data table, on success.
	On failure returns None.

	"""

def GetMasterInstance(PART):

	"""

	Gets a reference to the master instance of a PART or GROUP.


	@PART object: A reference to a part object.

	@returns object: Returns a reference to the master instance.
	If an element is the master part then it returns itself.

	"""

def GetNextEntity(deck, entity, location):

	"""

	Gets a reference to the next entity of the database by specifying the current.


	@deck integer: One of NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS, 
	FLUENT, FLUENT2D, STAR, UH3D, CFDPP, OPENFOAM, PERMAS.

	@entity object: A reference to an entity.

	@location string: (optional)For entities in the material database, location = 'Material Database'.

	@returns object: Returns a reference to an entity, or None when no entity is found.

	"""

def GetNextPartEntity(PART, ENTITY):

	"""

	Gets a reference to the next entity of a PART by specifying the current.


	@PART: A reference to an ANSA part. It can be obtained from a previous call to 
	GetFirstEntity or GetNextEntity.

	@ENTITY: A reference to an element. It can be retrieved from a previous call to 
	GetFirstEntity or GetNextEntity.

	@returns object: Returns a reference to the entity, or None when no entity is found.

	"""

def GetNodeTolerance():

	"""

	The function gives the current "HOT POINTS matching distance" value from Options>Settings>Tolerances.


	@returns float: Returns the current hot points matching distance.

	"""

def GetNormalVectorOfShell(shell):

	"""

	This function gets the normal vector of a shell or a facet.


	@shell object: A reference to a shell or facet entity.

	@returns object: Returns the unit normal vector (list) of the given shell or facet, or 0 if the vector is not defined.

	"""

def GetOldAndNewEntitiesMap():

	"""

	The function is used to get a dictionary with the selected and created entities, after a copy
	transformation has been performed. It is used in combination with the function
	Prepare2GetOldAndNewEntitiesMap, which is called prior to the transformation.


	@returns object: Returns a dictionary of the selected and newly created entities.

	"""

def GetOutOfPlaneShearComponents(mat):

	"""

	This function calculates the two out-of-plane shear components 
	of the material's elastic stifness matrix.


	@mat object: A reference to a material entity.

	@returns object: Returns a list of size 2 containing the two out-of-plane shear components 
	of the material's elastic stifness list. (i.e. the G12 and G13 components)
	        
	In case of failure, a message is displayed ("No tranverse shear components 
	defined for material") and the returned list has its two values set to 
	zero.

	"""

def GetPartCogAndPrincipalInertiaVectors(part):

	"""

	The GetPartCogAndPrincipalInertiaVectors function calculates the part's center of gravity, based on
	the part's faces, shells, solids and volumes.
	It also calculates the principal inertia vectors and the Ixx, Iyy, Izz moments of inertia.


	@part object: An ANSAPART Entity.

	@returns object: In case of successful calculation of the cog and intertia vectors,the function returns a list with 15 elements.
	The first three elements of the list, are the coordinates of the center of gravity.
	The following nine, are the three vectors for the principal inertia vectors.
	The last three elements are the Ixx, Iyy and Izz moments of inertia.
	In case of failure, it returns None.

	"""

def GetPartDepth(part):

	"""

	The GetPartDepth function returns the part's depth and it's parent part.(if any)


	@part object: The part to search for it's depth and it's parent part.

	@returns object: Returns a dictionary in case of success and None on failure.

	"""

def GetPartFromModuleId(ID, type):

	"""

	This function finds the reference to the ANSAPART or ANSAGROUP, according to the Module Id given as argument.
	
	This function can also find a reference to a Configuration or a Subsystem, if the second optional argument "type" is used.
	
	For Configurations the type is "ANSA_CONFIGURATION".
	For Subsystems the type is "ANSA_SUBSYSTEM".


	@ID string: The module id.

	@type string: (optional)The type of the entity.
	
	For Configurations use type: "ANSA_CONFIGURATION".
	For Subsystems use type: "ANSA_SUBSYSTEM".

	@returns object: Returns the reference to the ANSAPART or ANSAGROUP with this Module Id.
	If such a part does not exist None is returned.
	
	If the additional argument "type" has been used, the returned type can
	also be an "ANSA_CONFIGURATION" or an "ANSA_SUBSYSTEM".

	"""

def GetPartInstancesFromModuleId(ID):

	"""

	This functions finds the references to all ANSAPART's or ANSAGROUP's 
	instances, according to the Module Id given as argument.


	@ID string: The module id.

	@returns object: Returns a list with the references to all instances of the ANSAPART or
	ANSAGROUP with the given Module Id. If such a part does not exist 0 is returned.

	"""

def GetPlanarGMatrixAndThickness(deck, prop, layer):

	"""

	This function computes the Planar G Matrix for a PSHELL or PCOMP property.
	If prop is a PCOMP, the layer must also be defined, otherwise only prop is sufficient.


	@deck integer: The deck constant.

	@prop object: A reference to a property object.

	@layer integer: (optional)The number of the layer.

	@returns object: Returns a list of size 10, containing the 9 components of the G Matrix (G11, G12, G13, G21, G22, G23 ... ) 
	and the thickness of the PSHELL (or the layer of the PCOMP).

	"""

def GetShellEffectiveEngineeringProperties(deck, entity):

	"""

	This function calculates the effective egineering properties of a laminate shell: E11, E22, N12, N21, G and ABD matrix.


	@deck integer: The deck constant.

	@entity object: A reference to a laminate shell object.

	@returns object: Returns a dictionary on success:
	
	Key   | Value 
	"E11" | double, E11 
	"E22" | double, E22 
	"N12" | double N12 
	"N21" | double N21 
	"G"   | double G 
	"ABD" | list of 6 lists with 6 doubles: double ABD[6][6]
	
	Returns None on failure.

	"""

def GetShellsFromBeamSection(beams, deck, element_length):

	"""

	This function creates shell elements in the form of specific beam cross sections.


	@beams object: An object or a list of beam objects, "all", "visible", 0.
	If set to 0 or "all", runs for all compatible elements of the database.
	If set to "visible," runs for all compatible elements which are visible.

	@deck integer: (optional)Deck in which function is run.

	@element_length float: (optional)Element length. In case this length is greater than maximum element length, that is estimated from the function, maximum element length is used.

	@returns object: Returns a list that contains all created shells or 0 if no shell could be created.
	Returns NULL in case of invalid "element_length" (<= 0).

	"""

def GetSpecialNumberingRules(element):

	"""

	The GetSpecialNumberingRules returns all special rules defined for the PROPERTY, 
	PART, SET, INCLUDE, CONNECTOR, GENERIC ENTITY BUILDER, ANSA_SIMULATION_MODEL,
	ANSA_LOADCASE, ANSA_SIMULATION_RUN, ANSA_SUBSYSTEM or ANSA_LIBRARY_ITEM defined.


	@element object: A reference to a property, part, set, include, connector, generic entity builder, subsystem, simulation model, loadcase, simulation run, or library item.

	@returns object: Returns a list containing all the numbering rules of the entity.

	"""

def GetTypesToCompareSettingsValues(key, fields):

	"""

	Gets the values of parameters concerning 'Compare Settings' window in Compare process (not 'Advanced' options).


	@key string: A string describing the parameters' full name in tree view.
	e.g., "GEOMETRY (PARTS)::PROPERTY::PSHELL".

	@fields object: (optional)A list  with the command we need its value.
	e.g. "compare".

	@returns object: Returns a dictionary with keys the needed command and values whether it's On/Off.

	"""

def GetUserDefinedAttribute(element_type, name, deck, entity_subtype):

	"""

	This function returns a reference to a user attribute entity with specific name that was created for a specific ANSA keyword. Note that GetEntityCardValues/SetEntityCardValues can be used to get/set the characteristics of user attributes like their Name, Type, Default Value, etc.


	@element_type string: The ANSA keyword.

	@name string: The user attribute name.

	@deck integer: (optional)The deck type.

	@entity_subtype string: (optional)The entity subtype that may exists in addition to the ANSA keyword.

	@returns object: Returns a reference to a user attribute entity or None if this user attribute was not found.

	"""

def GetUserDefinedAttributes(element_type, deck, entity_subtype):

	"""

	This function collects all user attribute entities of a specific ANSA keyword. Note that GetEntityCardValues/SetEntityCardValues can be used to get/set the characteristics of user attributes like their Name, Type, Default Value, etc.


	@element_type string: The ANSA keyword.

	@deck integer: (optional)The deck type.

	@entity_subtype string: (optional)The entity subtype that may exists in addition to the ANSA keyword.

	@returns object: Returns a list with all the existing user attribute entities or 0 if no user attribute was found for the given ANSA keyword.

	"""

def GetViewAngles( ):

	"""

	GetViewAngles() returns the screen view in the form of the angle rotation around X, Y, Z axis.


	@returns object: Returns a list with three memeber holding the angles.

	"""

def GetViewButton(fields):

	"""

	This function gets the corresponding visibility flag status.
	The flag status is stored in the variable following the name of the button.


	@fields object: A list with button names to obtain their status.

	@returns object: Returns a dictionary with keys the names of the visibility buttons and 
	values 1 or 0, whether they are enabled or not, respectively.

	"""

def GetViewMode():

	"""

	This function returns the current view mode to the provided variable.


	@returns string: Returns the label of the current view mode.

	"""

def GetZoom():

	"""

	This function returns a list of 9 values with the current Graphic window minimum and
	maximum limits and the rotation center point in the following form: 
	[xmin, ymin, zmin, xmax, ymax, zmax, rtcn_x, rtcn_y, rtcn_z].


	@returns object: Returns a list with 9 values [xmin, ymin, zmin, xmax, ymax, zmax, rtcn_x, rtcn_y, rtcn_z]

	"""

def InputAdamsView(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function imports a .cmd (Adams/View) format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputBetaTank(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function imports a .tank format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputCFX(filename, nodes_id, elements_id, properties_id, model_action, unit_system):

	"""

	This function imports a CFX format file in ANSA similar to the FILE>INPUT>CFX functionality.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputFibersim(filename, elements_id, properties_id, materials_id, input_properties, merge_files_to_one_laminate, properties_file_name, merge_to, thickness_tolerance, theta_tolerance, model_action):

	"""

	Import a Fibersim file in ANSA.


	@filename string: The path to the filename to import.

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@input_properties string: (optional)Flag to Input Nastran Properties.
	Accepted values: "on", "off"
	(Default: "off")

	@merge_files_to_one_laminate string: (optional)Flag to merge multiple input files to one laminate property.
	Accepted values: "on", "off"
	(Default: "off")

	@properties_file_name string: (optional)Nastran file name with properties.

	@merge_to string: (optional)Merge method
	Accepted values: "Laminate", "Laminate by PCOMPG", "Nothing"
	(Default: "Nothing")

	@thickness_tolerance float: (optional)Thickness tolerance for merge_to = "Laminate"
	(Default: "0.0")

	@theta_tolerance float: (optional)Angle tolerance for merge_to = "Laminate"
	(Default: "0.0")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputFreeForm(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function inputs a free format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputInventor(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function imports an .iv format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputMedina(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, create_ansa_parts, put_layers, model_action):

	"""

	This function imports a MEDINA format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset")

	@create_ansa_parts string: (optional)Accepted values: "from_parts", "from_layers", "from_properties"
	(Default: what set at the last execution)

	@put_layers string: (optional)Accepted_values: "in_sets", "in_lockviews", "in_sets_and_lockviews"
	(Default: None)

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def ImportFATXMLTree(fatxml_filename, merge_parts):

	"""

	Imports a FATXML file into ANSA without launching the PLMXML tree editor.


	@fatxml_filename string: The file path of the FATXML Tree to read.

	@merge_parts boolean: (optional)In order to merge or not the parts.
	(Default: True)

	@returns integer: Returns 1 on success and 0 on error.

	"""

def ImportPLMXMLTree(plm_fname, dl_list_fname, linked_groups):

	"""

	Imports a PLMXML file, or a CATProduct into ANSA without launching the PLMXML tree editor.
	All the products of the tree will be automatically imported into ANSA
	while a download list will be written with all tree information. Upon request,
	a group containing links of all newly created parts, can also be created.


	@plm_fname string: The path to the xml file or to the CATProduct.

	@dl_list_fname string: The file path to output the D/L List.

	@linked_groups boolean: (optional)Option to create a group of links to newly created parts.
	(Obsolete)

	@returns integer: Returns 1 on success and 0 on error.

	"""

def ImportProductTree(tree, dl_list_fname, linked_groups):

	"""

	Imports a product tree into ANSA without launching the product tree editor.
	All the products of the tree will be automatically imported into ANSA
	while a download list will be written with all tree information. Upon request,
	a group containing links of all newly created parts, can also be created.
	The tree is the element returned from a previous call to 'NewProductTree' 
	function.


	@tree object: The object of the tree created from the 'NewProductTree' function.

	@dl_list_fname string: The file path to output the D/L List.

	@linked_groups boolean: (optional)Option to create a group of links to newly created parts.
	(Obsolete)

	@returns integer: Returns 1 on success and 0 on error.

	"""

def ImportVpmTree(vpm_fname, dl_list_fname, linked_groups):

	"""

	Imports a VPM file or a CATProduct into ANSA without launching the VPM tree editor.
	All the products of the tree will be automatically imported into ANSA
	while a download list will be written with all tree information. Upon request,
	a group containing links of all newly created parts, can also be created.


	@vpm_fname string: The path to the vpm file or to the CATProduct.

	@dl_list_fname string: The file path to output the D/L List.

	@linked_groups boolean: (optional)Option to create a group of links to newly created parts. 
	(Obsolete)

	@returns integer: Returns 1 on success and 0 on error.

	"""

def InputAbaqus(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, merge_steps_by_name, new_include, merge_parts, read_only, read_hmcomments, create_parameters, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_safety, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, create_assembly_and_instances, advanced_options, coords_id, comment_input_attributes, perform_material_synchronization, header, source_unit_system, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id):

	"""

	The InputAbaqus function imports an Abaqus model file in ANSA.


	@filename: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@merge_steps_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@new_include string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@read_hmcomments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@create_parameters string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_safety string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@create_assembly_and_instances string: (optional)Create ASSEMBLY and INSTANCEs. Enable Modules must be turned on in Settings > Decks.
	
	Accepted values: "on" or "off". 
	(Default: "off")

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, Contacts.
	When this argument is defined, only the provided types will be read.
	When dr exists in the beginning of the string the provided types 
	will not be read.
	By default, everything will be read.

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@perform_material_synchronization string: (optional)"on" or "off". If left blank, the current ANSA defaults value is assumed.

	@header string: (optional)Accepted values: "overwrite", "skip", "merge", "new"
	(Default: "merge")

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from the
	argument's unit system to the ANSA unit system after input.
	If no unit system is defined in ANSA, no conversion will take
	place.

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is enabled, it returns a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def InputAnsaThickness(filename):

	"""

	Imports an Ansa Thickness format file in ANSA, similar to the FILE>INPUT>Ansa Thickness functionality.


	@filename string: The file system path.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputAnsys(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, merge_parts, header, ignore_enddata, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, coords_id, perform_material_synchronization, source_unit_system, read_hmcomments, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id, functions_id):

	"""

	The InputAnsys function imports an Ansys model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@merge_parts string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge" or "skip".
	(Default: "overwrite")

	@ignore_enddata string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_parts_groups float: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@coords_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off".
	(Default: current ANSA defaults value)

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from the
	argument's unit system to the ANSA unit system after input.
	If no unit system is defined in ANSA, no conversion will take
	place.

	@read_hmcomments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@functions_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@returns integer: Returns 1 in success, 0 otherwise.

	"""

def InputCFDPP(dirname, nodes_id, elements_id, properties_id, mcfd_inp, nodesin, cellsin, exbcsin, inbcsin, cgrpsin, bcnames, grpnames, model_action, unit_system, cfd_light_mode):

	"""

	InputCFDPP is a wrapper of INPUT_CFDPP. It supports variable number of arguments.


	@dirname string: The path to the directory to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "offset-freeid" or "keep-new".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values:"offset", "nooffset", "keep-old", "keep-new" or  "offset-freeid".
	(Default: "offset-freeid")

	@mcfd_inp string: (optional)The filename for the mcfd file.
	(Default: "mcfd.inp")

	@nodesin string: (optional)The filename for the nodes data file.
	(Default: "nodesin.bin")

	@cellsin string: (optional)The filename for the cells data file.
	(Default: "cellsin.bin")

	@exbcsin string: (optional)The filename for the external boundary condition file. 
	(Default: "exbcsin.bin")

	@inbcsin string: (optional)The filename for the internal boundary condition file. 
	(Default: "inbcsin.bin")

	@cgrpsin string: (optional)The filename for the groups data file.
	(Default: "cgrpsin.bin")

	@bcnames string: (optional)The filename for the BC family names file.
	(Default: "mcfd.bc")

	@grpnames string: (optional)The filename for the group names file.
	(Default: "mcfd.grp")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	The filename for the external boundary condition file.
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	By default, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off". 
	If it is set to "on", ANSA CFD Light data will be input.
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def InputCGNS(filename, nodes_id, elements_id, properties_id, model_action, unit_system, cfd_light_mode):

	"""

	The InputCGNS function imports a CGNS model file in ANSA.


	@filename string: the path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off".
	If it is set to "on", ANSA will use the light volume representation,
	which is more suitable for CFD meshes.
	(Default: "off")

	@returns integer: Returns 1 on success and 0 on failure

	"""

def InputFluent(filename, nodes_id, elements_id, properties_id, skip_inner_faces, skip_cells, read_solver_info, read_comments, model_action, unit_system, cfd_light_mode):

	"""

	InputFluent imports a fluent file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@skip_inner_faces string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@skip_cells string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_solver_info string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off". 
	If it is set to "on", ANSA CFD Light data will be input.
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def InputLSDyna(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, header, ignore_enddata, read_only, read_hmcomments,create_parameters, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_safety, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, create_independent_sections, model_action, version, comment_input_annotations, advanced_options, coords_id, comment_input_attributes, perform_material_synchronization, ignore_primer_keywords, source_unit_system, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id, propsections_id, eos_id, hourlgass_id, functions_id):

	"""

	The InputLSDyna function imports a LsDyna model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" 
	or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge", "skip" or "new".
	(Default: "overwrite")

	@ignore_enddata string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@read_hmcomments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@create_parameters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_safety string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@create_independent_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@version string: (optional)Accepted values: "960" or "970" or "971" or "971r5/6" or 
	"971r71" or "971r8" or "971r9" or "971r10" or "r11" or "r11.1"
	If left blank, the current version is used.

	@comment_input_annotations string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, 
	Contacts. When this argument is defined only the provided 
	types will be read. When dr exists in the beginning of the 
	string the provided types will not be read
	If left blank everything will be read.

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off". 
	If left blank, the current ANSA defaults value is assumed.

	@ignore_primer_keywords string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from the
	argument's unit system to the ANSA unit system after input.
	If no unit system is defined in ANSA, no conversion will take
	place.

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@propsections_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@eos_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@hourglass_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@functions_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is defined, 
	it returns a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def InputMoldex3D(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	The InputMoldex3D function imports a Moldex3D model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 1 in success, 0 otherwise.

	"""

def InputNastran(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, header, ignore_enddata, read_only, sets_type_definition, read_hmcomments, bc_sets_offset, create_parameters, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, read_replication_lines, model_action, comment_input_annotations, advanced_options, coords_id, comment_input_attributes, perform_material_synchronization, source_unit_system, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id):

	"""

	The InputNastran function imports a Nastran model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" 
	or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge", "skip" or "new".
	(Default: "overwrite")

	@ignore_enddata string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@sets_type_definition string: (optional)Pairs of ids and type of imported sets. Ranges of sets can be 
	specified by a pair of lower and upper ids separated by ":".
	The whole range of imported sets can be represented by "ALL". 
	Set type can be assigned the option "NODE", "ELEMENT", 
	"DESVAR", "RANDOM", "FATIGUE", "UNDEFINED" or "TRIM".

	@read_hmcomments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@bc_sets_offset string: (optional)Accepted values: "offset" or "keep-old".
	(Default: "offset")

	@create_parameters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@read_replication_lines string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, 
	Contacts. When this argument is defined only the provided 
	types will be read. When dr exists in the beginning of the 
	string the provided types will not be read
	If left blank everything will be read.

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off". 
	If left blank, the current ANSA defaults value is assumed.

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from the
	argument's unit system to the ANSA unit system after input.
	If no unit system is defined in ANSA, no conversion will take
	place.

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". (Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". (Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is enabled, it returns 
	a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def InputOpenFoam(filename, nodes_id, elements_id, properties_id, ctrl_action, version, polymesh,binary_io_single_precision, model_action, unit_system, cfd_light_mode, binary_io_64bit_integers):

	"""

	This function imports an OpenFOAM format directory in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid", or the last option used)

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid", or the last option used)

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid", or the last option used)

	@ctrl_action string: (optional)Controls whether to overwrite or not the solver info.
	Accepted values: "overwrite" or "skip".
	(Default: "overwrite", or the last option used)

	@version string: (optional)Accepted values: from "v1.4" to "v7.0".
	(Default: "v7.0")

	@polymesh string: (optional)The subdirectory inside openfoam case where the polymesh folder lies.
	Accepted values: "constant" or "1", "2", "3.0", etc.
	By default, the directory which has the largest arithmetic value
	and contains polymesh folder is assumed.

	@binary_io_single_precision string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	By default, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off".
	If it is set to "on", ANSA will use the light volume representation,
	which is more suitable for CFD meshes.
	(Default: "off")

	@binary_io_64bit_integers string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@returns integer: It returns 1 in success, 0 otherwise.

	"""

def InputPamCrash(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, header, ignore_enddata, read_only, version, read_hmcomments, create_parameters, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_safety, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, advanced_options, coords_id, comment_input_attributes, perform_material_synchronization, source_unit_system, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id, functions_id):

	"""

	The InputPamCrash function imports a InputPamCrash model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" 
	or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge" or "skip".
	(Default: "overwrite")

	@ignore_enddata string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@version string: (optional)Accepted values: "2002" or "2003", etc.

	@read_hmcomments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@create_parameters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_safety string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, 
	Contacts. When this argument is defined only the provided 
	types will be read. When dr exists in the beginning of the 
	string the provided types will not be read
	If left blank everything will be read.

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off". 
	If left blank, the current ANSA defaults value is assumed.

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from the
	argument's unit system to the ANSA unit system after input.
	If no unit system is defined in ANSA, no conversion will take
	place.

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@functions_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is enabled, it returns 
	a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def InputPatran(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def InputPermas(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, header, read_only, merge_variants_by_name, medina_to_ansa_parts, put_medina_layers, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, advanced_options, coords_id, comment_input_attributes, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id):

	"""

	This function imports a Permas model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" 
	or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge" or "skip".
	(Default: "overwrite")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@merge_variants_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@medina_to_ansa_parts string: (optional)Accepted values: "from_parts", "from_layers" or "from_properties".
	(Default: what set at the last execution)

	@put_medina_layers string: (optional)Accepted values: "in_sets", "in_lockviews" or "in_sets_and_lockviews".
	(Default: None)

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, 
	Contacts. When this argument is defined only the provided 
	types will be read. When dr exists in the beginning of the 
	string the provided types will not be read
	If left blank everything will be read.

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def InputRadTherm(filename, nodes_id, elements_id, properties_id, materials_id, params_action, model_action):

	"""

	This function imports a RADTHERM format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@params_action string: (optional)Accepted values: "overwrite" or "skip".
	(Default: what set at the last execution)

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 1 on success and 0 otherwise.

	"""

def InputRadioss(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, version, new_include, merge_parts, header, ignore_enddata, read_only, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_safety, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc , comment_input_lock_views, create_parameters, create_independent_sections, read_engine_file, model_action, comment_input_annotations, merge_properties_for_time_step,  coords_id, comment_input_attributes, perform_material_synchronization, source_unit_system, advanced_options, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, ignore_hypercrash_keywords, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id, propsections_id, functions_id):

	"""

	The InputRadioss function imports a Radioss model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" 
	or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@version string: (optional)Accepted values: "4.1" or "4.2" or "4.4" or "5.1" or "9.0" 
	or "10.0" or "11.0" or "12.0" or "13.0" or "14.0" or "2017" or "2018" or "2019".
	(Default: what set at the last execution)

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge" or "skip".
	(Default: "overwrite")

	@ignore_enddata string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_safety string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@create_parameters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@create_independent_sections string: (optional)Enables/ disables 'Create Independent RADIOSS PROPS' selection. Accepted values: "on" or "off". 
	(Default: "off")

	@read_engine_file string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_properties_for_time_step string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off". 
	If left blank, the current ANSA defaults value is assumed.

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from the
	argument's unit system to the ANSA unit system after input.
	If no unit system is defined in ANSA, no conversion will take
	place.

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, 
	Contacts. When this argument is defined only the provided 
	types will be read. When dr exists in the beginning of the 
	string the provided types will not be read
	If left blank everything will be read.

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@ignore_hypercrash_keywords string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@propsections_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@functions_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is enabled, 
	it returns a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def InputSCTetra(filename, nodes_id, elements_id, properties_id, model_action, unit_system):

	"""

	This function imports a SCTETRA format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def InputSHL(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function imports an SHL format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputStarCCM(filename, nodes_id, elements_id, properties_id, state_name, model_action, unit_system, cfd_light_mode):

	"""

	The InputStarCCM function imports a StarCCM model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@state_name string: (optional)The name of the state to be read. By default, if only one state exists, it is read.
	If many states exist, the state named 'state_name' is read (if it exists). If there
	are many states and the 'state_name' is not defined, the first valid state is read.

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	By default, no scaling occurs.

	@cfd_light_mode string: (optional)If set to "on", ANSA CFD Light data will be input.
	(Default: "off")

	@returns integer: Return 1 on success, 0 on failure.

	"""

def InputStarCD(filename, nodes_id, elements_id, properties_id, version, read_comments, model_action, unit_system):

	"""

	The InputStarCD function imports a StarCD model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@version string: (optional)The version of the solver. 
	Accepted values: "v3", "v4".
	(Default: "v3")

	@read_comments string: (optional)'True' or 'False'.
	(Default: 'False')

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Returns 1 on success and 0 otherwise.

	"""

def InputStereoLithography(filename, nodes_id, elements_id, properties_id, model_action, unit_system):

	"""

	Inputs an STL file.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Rreturns 0 on success and 1 on failure.

	"""

def InputTosca(filename, model_action):

	"""

	Inputs a TOSCA File.


	@filename string: The path to the filename to import.

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputUh3d(filename, nodes_id, elements_id, properties_id, model_action, unit_system):

	"""

	Inputs a UH3D file.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Returns 0 on success and 1 otherwise.

	"""

def InputVrml(filename, nodes_id, elements_id, properties_id, model_action, length, paste_coincident_nodes):

	"""

	This function imports a VRML format file in ANSA similar to the FILE>INPUT>VRML functionality.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@length string: (optional)Accepted values: "m" or "as-is". "m" option states that the input file 
	is in meters and converts it to the current ANSA units. "as-is" option 
	states that no conversion will occur.
	(Default: "m")

	@paste_coincident_nodes string: (optional)Accepted values: "on" or "off". When enabled coincident nodes will be
	pasted during input.
	(Default: "off")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputWaveFront(filename, nodes_id, elements_id, properties_id, model_action, unit_system):

	"""

	InputWaveFront imports a Wave Front file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InsertMetricFile(control, filename):

	"""

	Inserts a metric file to a control.


	@control object: The selected control object.

	@filename string: The name of the file to be inserted.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def Intersection( topological_paste, first_area, second_area, reconstruct, delete, keep ):

	"""

	Load 2 different Matrices containing the 2 different areas of SHELLs and/or FACEs.Only FACEs and SHELLs are allowed.


	@topological_paste boolean: Set to True if topological paste should follow, else set to False.

	@first_area object: A list of entities of the first area.

	@second_area object: A list of entities of the second area.

	@reconstruct boolean: (optional)True or False, if reconstruct should follow.

	@delete integer: (optional)Set to 0 for NO delete or
	1 for Boolean Union,
	2 for Boolean Intersect,
	3 for Boolean Subtract (first_area - second_area).

	@keep object: (optional)A list of coordinate triplets, that lie on the area to be 
	kept ( [[x1,y1,z1], [x2,y2,z2], ..., [xn,yn,zn]] ).

	@returns object: Returns None on failure (i.e. Frozen Face, Unchecked Face, Multiple input etc.).
	Returns a list with 3 inner lists on success:
	Index 0: a list with the first_area intersected entities.
	Index 1: a list with the second_area intersected entities.
	Index 2: a list with the new cons created at the intersection position 
	         (filled only if first_area and second_area contain faces).

	"""

def Invert():

	"""

	This function inverts the current visibility status in ANSA.


	@returns integer: Returns 0 in all cases.

	"""

def IsEntityDeleted(entity):

	"""

	Examines whether a deleted Entity can be retrieved by the Undelete functionality.


	@entity object: A reference to the entity object.

	@returns boolean: Returns True if the entity is deleted and can be retrieved 
	by the UNDELETE function, False otherwise.

	"""

def IsEntityVisible(entity):

	"""

	Examines whether an entity is visible or not.
	It is applicable only for elements that have visibility control within ANSA,
	as well as for Parts, Properties, Materials, Sets.


	@entity object: A reference to the entity object.

	@returns boolean: Returns True if the entity is visible, False otherwise.

	"""

def IsolateConnectivityGroups(entities, separate_at_blue_bounds, separate_at_pid_bounds, feature_angle, feature_type):

	"""

	Isolate entities which form connectivity groups.


	@entities object: A list that can contain faces, volumes, shells and solids.
	If 0 is specified, then the function works on visible.

	@separate_at_blue_bounds integer: If 1 is specified, then regions connected via triple bounds are placed 
	into separate connectivity groups. If 0 is specified, then all connected 
	entities are placed into the same group.

	@separate_at_pid_bounds integer: If 1 is specified, then all entities contained in a connectivity group will 
	have the same PID. If 0 is specified, then each connectivity group 
	can contain connected entities with different PIDs.

	@feature_angle float: (optional)Values: 0 - 180, default: 0 (disabled).The feature angle limit in degrees.
	If this value is exceeded, the groups get separated at this feature line.

	@feature_type string: (optional)Values: "convex", "concave", "convex_and_concave". 
	Default: convex_and_concave. This option  is considered only when 
	separation by feature angle is enabled. Groups get separated at the 
	examined bound only if feature_angle is exceeded and the feature type 
	is of the specified type.

	@returns object: Returns a dictionary. 
	The keys are the group names and their respective data are lists containing the entities belonging to each group.
	If no connectivity groups are found, it returns None.

	"""

def IsolateFringeBarValues(min_val, max_val):

	"""

	This function isolates all elements whose values are between the given minimum and maximum limits.
	Their values depend on the current view mode(i.e. QGRAPH).


	@min_val float: The minimum value.

	@max_val float: The maximum value.

	@returns integer: Returns:
	-1, if elements are left visible.
	-0, if arguments are incorrect or no elements match the specified range.

	"""

def IsolateSolidFlanges(user_items, recognize_using_all_any_methods, recognize_by_shape, recognize_by_shape_and_proximity, proximity_distance, proximity_angle, recognition_by_sets, sets, auto_calculate_orientation):

	"""

	The function searches for flanges on a solid base.
	Search flanges by shape and proximity: if it is active, function will search for
	flanges with respect to shape and proximity. Faces that will be returned, match
	both searching methods and not only one.


	@user_items object: (optional)A list of properties, parts or faces. 
	None:  the function works on visible faces.

	@recognize_using_all_any_methods boolean: (optional)False: tries to match all recognition methods.
	True:  tries to match any recognition method.
	(DEPRECATED ARGUMENT)

	@recognize_by_shape boolean: (optional)Activates recognition by shape.
	(DEPRECATED ARGUMENT)

	@recognize_by_shape_and_proximity boolean: (optional)Activates search for flanges with respect to shape and proximity.

	@proximity_distance float: (optional)Proximity distance of the opposite faces.

	@proximity_angle float: (optional)Angle between the normal vectors of the opposite faces.

	@recognition_by_sets boolean: (optional)Activates recognition by sets.
	(DEPRECATED ARGUMENT)

	@sets object: (optional)A list with the ids of sets. 
	Faces that belong to these sets will be recognised as solid flanges.
	(DEPRECATED ARGUMENT)

	@auto_calculate_orientation boolean: (optional)Activates automatic calculation of orientation.
	Otherwise the existing orientation will be used.

	@returns object: Returns a list that contains all the faces recognized as flanges, or 0 if an error exists.

	"""

def IsolateTubes(diameter, generate_lines, feature_line_angle_limit):

	"""

	The function corresponds to the GUI function ISOLATE>HOLES3D of the bottom menu. It leaves
	visible only the tubes with diameter smaller than the given in the diameter argument.


	@diameter float: Tubes with smaller diameter will be isolated.

	@generate_lines boolean: True will create a center line.

	@feature_line_angle_limit float: (optional)The feature line angle limit.

	@returns: The function returns zero (0) in any case.

	"""

def KinematicsAddConfigToConfig(PARENT, CHILD):

	"""
	Deprecated since version 16.0.1. Use function AddConfigToConfig instead.

	This function adds a kinematic configuration as child to another
	kinematic configuration. In order for the operation to succeed, CHILD
	must not be already contained to PARENT. CHILD is considered to be
	contained in PARENT, if ANY of the Kinematic Joints and Kinematic
	Configurations that CHILD contains, are already contained in PARENT
	or in any Kinematic Configuration that contains PARENT.


	@PARENT object: A kinematic configuration object.

	@CHILD object: The kinematic configuration that will be added to the PARENT.

	@returns integer: Returns 0 if CHILD was added to PARENT. If PARENT does not exist, the function returns 1.
	If PARENT exists, but CHILD doesn't, the function returns 2.
	Finally, if CHILD cannot be added to PARENT, the return value is 3.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function AddConfigToConfig instead.", DeprecationWarning)

def KinematicsAddForceToConfig(CONFIG, FORCE):

	"""
	Deprecated since version 17.1.0. Use function AddForceToConfig instead.

	This function adds a kinematic force to a kinematic configuration. In
	order for the operation to succeed, FORCE must not be already
	contained in CONFIG. FORCE is considered to be contained in CONFIG if
	it is one of its kinematic forces or it is contained in any kinematic
	hierarchy that also contains CONFIG.


	@CONFIG object: A kinematic configuration element that a kinematic force will be added to.

	@FORCE object: The kinematic force that will be added to the CONFIG.

	@returns integer: Returns 0 if FORCE was added to CONFIG. If CONFIG does not exist, the function returns 1.
	If CONFIG exists, but FORCE doesn't, the function returns 2.
	Finally, if FORCE cannot be added to CONFIG, the return value is 3.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.0. Use function AddForceToConfig instead.", DeprecationWarning)

def KinematicsAddJointToConfig(CONFIG, JOINT):

	"""
	Deprecated since version 16.0.1. Use function AddJointToConfig instead.

	This function adds a kinematic joint to a kinematic configuration. In
	order for the operation to succeed, JOINT must not be already
	contained in CONFIG. JOINT is considered to be contained in CONFIG if
	it is one of its kinematic joints or it is contained in any kinematic
	hierarchy that also contains CONFIG.


	@CONFIG object: A kinematic configuration entity that a kinematic joint will be added to.

	@JOINT object: The kinematic joint element that will be added to the CONFIG.

	@returns integer: Returns 0 if JOINT was added to CONFIG. If CONFIG does not exist, the function returns 1.
	If CONFIG exists, but JOINT doesn't, the function returns 2.
	Finally, if JOINT cannot be added to CONFIG, the return value is 3.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function AddJointToConfig instead.", DeprecationWarning)

def KinematicsAddToKinematicJoint(JOINT, ELEMENT):

	"""
	Deprecated since version 17.1.0.

	This function adds an element as part of a kinematic joint.


	@JOINT object: The kinematic joint element.

	@ELEMENT object: The element to add as part of the given kinematic joint.

	@returns integer: Returns 0 if ELEMENT was added to JOINT.
	Otherwise, if JOINT is invalid, the function returns 1.
	If ELEMENT is invalid, the return value is 2.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.0.", DeprecationWarning)

def KinematicsAddToRigidBody(BODY, ELEMENTS):

	"""
	Deprecated since version 16.0.1. Use function AddToRigidBody instead.

	This function adds an element OR list of elements as part of rigid body.


	@BODY object: The rigid body that the given element is added to.

	@ELEMENTS: A list of elements to be added in the rigid body.

	@returns integer: Returns 0 if ELEMENT / list of elements was added to BODY. 
	Otherwise, if BODY is invalid, the function returns 1.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function AddToRigidBody instead.", DeprecationWarning)

def KinematicsConvertToNMap(CONFIG, POSITION):

	"""
	Deprecated since version 16.0.1. Use function ConvertToTransformation instead.

	This function relates the current position of a given Kinematic 
	Configuration to another Kinematic Position.


	@CONFIG object: A Kinematic Configuration whose current position is to be related to POSITION.

	@POSITION object: The name of the Kinematic Position that CONFIG's current 
	position is to be related. If "Reference Position" is given as the 
	second argument, the CONFIG's current position is related to the 
	reference position.

	@returns integer: The function returns 0 if the transformation was calculated successfully.
	In all other cases, it may return the following error codes:
	-1, CONFIG is not a Kinematic Configuration entity.
	-2, CONFIG is invalid.
	-3, POSITION was not found among existing Kinematic Positions.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function ConvertToTransformation instead.", DeprecationWarning)

def KinematicsMoveConfig():

	"""

	This function performs the actual motion of a kinematicconfiguration. The motion parameters 
	must be set by calling thefunction KinematicsSetParameters, before calling this function.


	@returns object: If move method is 'BY JOINT' or 'BY ACTUATOR JOINT' this function returns 
	a 6-entries list with the amount of the performed movement for 
	each dof (the first 3 entries correspond to the translational dofs and 
	the last 3 to the rotational ones).
	If move method is 'BY TIME' or 'BY MATCHING POINTS',then this function returns 1 on success.
	The function returns zero in case of failure for all move methods.

	"""

def KinematicsMoveToPosition(CONFIG, POSNAME):

	"""
	Deprecated since version 16.0.1. Use function MoveToPosition instead.

	This function moves a given kinematic configuration to a desired position.
	The position was created by function KinematicsSavePosition.


	@CONFIG object: The kinematic configuration entity to move.

	@POSNAME string: The name of the desired position.

	@returns integer: The function returns 0 if no error was encountered. If an error was encountered the function
	returns a positive non-zero value. The possible error codes are the following:
	1, CONFIG is not the proper type of element.
	2, CONFIG is not valid.
	3, POSNAME is not valid (e.g empty).
	4, POSNAME is already used by another kinematic position.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function MoveToPosition instead.", DeprecationWarning)

def KinematicsRmvFrKinematicJoint(JOINT, ELEMENT):

	"""
	Deprecated since version 17.1.0.

	This function removes an element which is part of a kinematic joint.


	@JOINT object: The kinematic joint that the given element will be removed from.

	@ELEMENT object: The element to be removed from the kinematic joint.

	@returns integer: Returns 0 if ELEMENT was removed from JOINT.
	Otherwise, if JOINT is invalid, the function returns 1.
	If ELEMENT is invalid, the return value is 2.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.0.", DeprecationWarning)

def KinematicsRmvFrRigidBody(BODY, ELEMENT):

	"""
	Deprecated since version 16.0.1. Use function RemoveFromRigidBody instead.

	This function removes an element which is part of a rigid body.


	@BODY object: The rigid body that the given element will be removed from.

	@ELEMENT object: The element to remove the rigid body.

	@returns integer: Returns 0 if ELEMENT was removed from BODY.
	Otherwise, if BODY is invalid, the function returns 1.
	If ELEMENT is invalid, the return value is 2.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function RemoveFromRigidBody instead.", DeprecationWarning)

def KinematicsSavePosition(CONFIG, NAME):

	"""
	Deprecated since version 16.0.1. Use function SavePosition instead.

	This function saves the current position of a kinematic configuration with a desired name given
	by the user. The saved position can later be recalled by calling the script function
	KinematicsMoveToPosition. Two positions cannot have the same name.


	@CONFIG object: The kinematic configuration whose current position will be saved.

	@NAME string: The desired name of the configuration's current position.

	@returns integer: The function returns 0 if no error was encountered. If an error was encountered, the function
	returns a positive non-zero value. The possible error codes are:
	1. CONFIG was not a valid kinematic configuration entity.
	2. The function failed to save the position.
	3. NAME is invalid (e.g empty).
	4. NAME is already used by another kinematic position.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function SavePosition instead.", DeprecationWarning)

def KinematicsSetJointStatus(JOINT, STATUS):

	"""
	Deprecated since version 16.0.1. Use function SetJointStatus instead.

	This function sets the current status of a kinematic joint entity to either "LOCKED",
	or "UNLOCKED". The status of a newly created joint is set to "UNLOCKED".


	@JOINT object: The reference to the kinematic joint whose status is to be set.

	@STATUS string: It defines the desired status ("LOCKED" or "UNLOCKED").

	@returns integer: The function returns 0 if the joint's status was altered successfully.
	The return value is 1 if JOINT is invalid, 2 if JOINT is not actually
	a joint entity, 3 if the given STATUS is neither "LOCKED" nor "UNLOCKED",
	and 4 if the STATUS argument was not a string.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function SetJointStatus instead.", DeprecationWarning)

def KinematicsSetParameters(kin_config, move_method, kin_joint, displacement, angle, translate_x, translate_y, translate_z, rotate_x, rotate_y, rotate_z, sp, tp, motor_joint, end_time, start_at_equilibrium, step_size_type, step_size, number_of_steps, results_file, max_step_size, translate_x_total, translate_y_total, translate_z_total, rotate_x_total, rotate_y_total, rotate_z_total, displacement_total, angle_total):

	"""
	Deprecated since version 16.0.1. Use function ConfigSetParameters instead.

	This function performs the setup of the kinematic parameters for kinematic configuration motion.


	@kin_config integer: The id of the kinematic configuration element 
	that motion is to be applied. ANSA SETs to apply mass on.

	@move_method string: "BY JOINT", "BY MATCHING POINTS", "BY ACTUATOR JOINT", "BY TIME".
	Apply motion to a kinematic joint of a kinematic configuration or 
	move a kinematic configuration by matching points or move a kinematic 
	configuration by the actuator joint or move a kinematic configuration 
	by time.

	@kin_joint integer: The id of the kinematic joint of the kinematic configuration that 
	motion is to be applied.

	@displacement float: Amount of translation to be applied to a kinematic joint. Valid 
	only if "MOVE METHOD" = "BY JOINT" or "BY ACTUATOR JOINT"
	and the joint has a translational dof.

	@angle float: Amount of rotation to be applied to a kinematic joint. Valid 
	only if "MOVE METHOD" = "BY JOINT" or "BY ACTUATOR JOINT"
	and the joint has a rotational dof.

	@translate_x float: Translation in 'X' axis (step).

	@translate_y float: Translation in 'Y' axis (step).

	@translate_z float: Translation in 'Z' axis (step).

	@rotate_x float: Rotation about 'X' axis (step).

	@rotate_y float: Rotation about 'Y' axis (step).

	@rotate_z float: Rotation about 'Z' axis (step).

	@sp object: Either the id of a node to be used as a source point
	or ANSA entity.
	Valid only if "MOVE METHOD" = "BY MATCHING POINTS".
	The node must belong to a rigid body.

	@tp object: Either the id of a node to be used as a target point
	or ANSA entity.
	Valid only if "MOVE METHOD" = "BY MATCHING POINTS".

	@motor_joint integer: The id of the kinematic joint that will be set 
	as the actuator joint of the kinematic configuration 
	(optional). If another kinematic joint is already 
	defined as the actuator joint of the kinematic 
	configuration, this parameter will override the 
	previous selection. Valid only if 
	"MOVE METHOD" = "BY ACTUATOR JOINT".

	@end_time float: Total simulation time. Valid only if 
	"MOVE METHOD" = "BY TIME".

	@start_at_equilibrium boolean: valid only if "MOVE METHOD" = "BY TIME".

	@step_size_type string: "NONE", "SIZE", "NUMBER". Valid only if 
	"MOVE METHOD" = "BY TIME".

	@step_size float: Valid only if "MOVE METHOD" = "BY TIME" and "STEP SIZE TYPE"= "SIZE".

	@number_of_steps integer: Valid only if "MOVE METHOD" = "BY TIME" and "STEP SIZE TYPE"= "NUMBER".

	@results_file string: Desired file name (*.xml). Valid only if "MOVE METHOD" = "BY TIME".

	@max_step_size float: Maximum step size of HHT-I3 Solver.

	@translate_x_total float: Translation in 'X' axis (total).

	@translate_y_total float: Translation in 'Y' axis (total).

	@translate_z_total float: Translation in 'Z' axis (total).

	@rotate_x_total float: Rotation about 'X' axis (total).

	@rotate_y_total float: Rotation about 'Y' axis (total).

	@rotate_z_total float: Rotation about 'Z' axis (total).

	@displacement_total float: Total amount of translation to be applied to a kinematic joint.
	Valid only if "MOVE METHOD" = "BY JOINT" or "BY ACTUATOR JOINT"
	and the joint has a translational dof.

	@angle_total float: Total amount of rotation to be applied to a kinematic joint. 
	Valid only if "MOVE METHOD" = "BY JOINT" or "BY ACTUATOR JOINT"
	and the joint has a rotational dof.

	@returns integer: Always returns 0.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function ConfigSetParameters instead.", DeprecationWarning)

def LaminateCreate(deck, fields, laminate_type):

	"""

	The LaminateCreate function creates a Laminate property valid for all the supported decks.


	@deck constant: One of NASTRAN, LSDYNA, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@fields object: Given as pairs of arguments, in order to initialize the definition.

	@laminate_type string: (optional)Accepted values: 'shell' or 'solid'.
	(Default: 'shell')

	@returns object: Returns a reference to the newly created laminate part on success.
	Otherwise, None is returned.

	"""

def LaminateInfo(deck, laminate, fields, ret_ents):

	"""

	@deck constant: One of NASTRAN, LSDYNA, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@fields object: A list of the edit card fields to retrieve info.

	@ret_ents boolean: (optional)If set to True, the returning dictionary will have entities instead of their ids.

	@returns object: Returns a dictionary with keys the requested fields and values their retrived values on success.
	Otherwise it returns None.
	If ret_ents is set to True, the returning dictionary will have entities instead of their ids.

	"""

def LaminateLayerCopy(laminate, sequence_pos, layer_pos):

	"""

	@laminate object: The laminate object.

	@sequence_pos integer: The position of the sequence to copy.

	@layer_pos integer: The position of the layer to copy.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateLayerDelete(laminate, sequence_pos, layer_pos):

	"""

	@laminate object: The laminate object.

	@sequence_pos integer: The position of the sequence to delete.

	@layer_pos integer: The position of the layer to delete.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateLayerInfo(deck, laminate, sequence_pos, layer_pos, fields):

	"""

	Get values from a Laminate Layer in the specified laminate or pcomp Property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate or pcomp Property.

	@sequence_pos integer: The position of the sequence to retrieve information (always 1 for a pcomp property).

	@layer_pos integer: The position of the layer to retrieve information.

	@fields object: A list of the fields to retrieve info
	
	Available fields are:
	
	NAME (string): The name of the layer
	T (double): The thickness of the layer
	THETA (double): The orientation of the layer
	NIP (integer): The number of integration points through the layer's thickness.
	SOUT (string): "", "YES" or "NO" the NASTRAN output parameter
	type (string): "", "SHELL", "PLANE" or "CORE", the PERMAS ply type
	MID (element): Material of the layer for the given deck
	PLY (element): PLY of the layer for PAMCRASH
	elements (list): A list containing the elements of the layer
	mapped_data (string): "Thick", Orient", "Thickness", "Orientation" or ""
	mapped_thickness (list): A list of the mapped thicknesses of the elements in "elements" matrix
	mapped_orientation (list): A list of the mapped orientations of the elements in "elements" matrix
	FT (string): "", "HOFF", "TSAI", "STRN", "STRS" or "TS" (Solid Laminate, NX Nastran)
	ILFT (string): "" or "NB" (Solid Laminate, NX Nastran)
	color (list): A list with 3 integers (rgb)
	rosette (integer): ID of the rosette
	side (string): "POS", or "NEG"
	active (boolean): layer is active or not
	drape (string): "not_draped", "draped_with_failed_elements", "draped"
	template (integer): Template id
	A (double): Angle between first and second material direction (Radioss)
	visible (boolean): Visibility of the layer
	draw_orientation (boolean): Visibility of the layer orientation. Used in LAMINATE draw mode.

	@returns object: Returns a dictionary with keys the 'field' values on success.
	Otherwise, None is retuned.

	"""

def LaminateLayerModify(deck, laminate, sequence_pos, layer_pos, name, t, theta, sout, gplyid, type, mat, ply, nip, add_elements, remove_elements, mapped_data, modify_elements, mapped_thickness, mapped_orientation, layer_new_pos, ft, ilft, color, rosette, side, active, sequence_new_pos, template, regenerate_mapped_data, a, visible, draw_orientation):

	"""

	Modifies a Laminate Layer in the specified laminate Property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: The position of the sequence to modify.

	@layer_pos integer: The position of the layer to modify.

	@name string: (optional)The name of the layer.

	@t float: (optional)The thickness of the layer.

	@theta anything: (optional)double or list,  the orientation/orientations of the layer.

	@sout string: (optional)"", "YES" or "NO" the nastran output parameter.

	@gplyid integer: (optional)The GPLYID of the layer.

	@type string: (optional)"", "SHELL", "PLANE" or "CORE", the PERMAS ply type.

	@mat object: (optional)A reference to a material for the layer.

	@ply object: (optional)The element PLY of the layer for PAMCRASH.

	@nip integer: (optional)The number of integration points through the layer's thickness.

	@add_elements object: (optional)A list containing the elements to be added to the layer.

	@remove_elements object: (optional)A list containing the elements to be removed from the layer.

	@mapped_data string: (optional)"Thick, Orient", "Thickness", "Orientation" or ""
	"mapped_data" must be set to "Orientation" or "Thick, Orient", 
	when changing the "mapped_orientation" of the "modify_elements"
	and must be set to "Thickness" or "Thick, Orient", when changing 
	the "mapped_thickness".

	@modify_elements object: (optional)A list of the elements that will be modified.

	@mapped_thickness object: (optional)A list of the mapped thicknesses of the elements in 
	"modify_elements" or "add_elements" list.

	@mapped_orientation object: (optional)A list or a list with lists of the mapped orientations of the 
	elements in "modify_elements" or "add_elements" list.

	@layer_new_pos integer: (optional)The new position of the layer.

	@ft string: (optional)"", "HILL", "HOFF", "TSAI", "STRN", "STRS" or "TS" (Solid Laminate, NX Nastran)

	@ilft string: (optional)"", "SB" or "NB" (Solid Laminate, NX Nastran).

	@color object: (optional)A list with 3 integers (rgb).

	@rosette object: (optional)A rosette id, or None to clear rosette.

	@side string: (optional)"POS" or "NEG".

	@active boolean: (optional)If the layer is active or not.

	@sequence_new_pos integer: (optional)The new sequence position of the layer.

	@template integer: (optional)The template id.

	@regenerate_mapped_data boolean: (optional)If the mapped data of the layer will be regenerated when there are elements to be added to it. If it was already draped by ANSA, draping will be reapplied. Otherwise, any existing mapped data will be extrapolated to the newly added elements.

	@a float: (optional)The angle between first and second material direction (Radioss).

	@visible boolean: (optional)Visibility of layer.

	@draw_orientation boolean: (optional)Visibility of layer orientation. Used in LAMINATE draw mode.

	@returns integer: Returns 0 on success, otherwise 1 is retuned.

	"""

def LaminateLayerNew(deck, laminate, sequence_pos, layer_pos, gplyid, t, theta, nip, sout, type, mat, ply, name, add_elements, remove_elements, mapped_data, mapped_thickness, mapped_orientation, ft, ilft, color, rosette, side, active, template, a):

	"""

	Creates a new Laminate Layer in the specified laminate Property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: The position of the new sequence. Use 0 to position this last.

	@layer_pos integer: The position of the new layer. Use 0 to position this last.

	@gplyid integer: (optional)The GPLYID of the layer.

	@t float: (optional)The thickness of the layer.

	@theta object: (optional)double or list, the orientation/orientations of the layer.

	@nip integer: (optional)The number of integration points through the layer's thickness.

	@sout string: (optional)"", "YES" or "NO" the nastran output parameter.

	@type string: (optional)"SHELL", "PLANE" or "CORE", the PERMAS ply type.

	@mat object: (optional)The material of the layer.

	@ply object: (optional)The element PLY of the layer for PAMCRASH.

	@name string: (optional)The name of the layer.

	@add_elements object: (optional)A list containing the elements to be added to the layer.

	@remove_elements object: (optional)A list containing the elements to be removed from the layer.

	@mapped_data string: (optional)"Thick, Orient", "Thickness", "Orientation" or "".

	@mapped_thickness object: (optional)A list of the mapped thicknesses of the elements 
	in "add_elements" matrix.

	@mapped_orientation object: (optional)A list or a list with lists of the mapped orientations of the elements 
	in "add_elements" matrix.

	@ft string: (optional)"", "HILL", "HOFF", "TSAI", "STRN", "STRS" or "TS" (Solid Laminate, NX Nastran)

	@ilft string: (optional)"", "SB" or "NB" (Solid Laminate, NX Nastran).

	@color object: (optional)A list with 3 integers (rgb).

	@rosette object: (optional)A rosette id.

	@side string: (optional)"POS" or "NEG". (Default: "POS")

	@active boolean: (optional)If the layer is active or not.

	@template integer: (optional)The template id.

	@a float: (optional)The angle between first and second material direction (Radioss).

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateModify(deck, laminate, fields):

	"""

	Modifies the specified laminate Property.


	@deck integer: One of NASTRAN, LSDYNA, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to the laminate Property.

	@fields object: A dictionary with edit card fields as keys and the modified values as values.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateSequenceCopy(laminate, sequence_pos, mirror):

	"""

	Copies a Laminate Sequence of the specified laminate Property.


	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: The position of the sequence to copy.

	@mirror boolean: (optional)True or False option to mirror copy the layers included in the sequence.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateSequenceDelete(laminate, sequence_pos):

	"""

	Deletes a Laminate Layer from the specified laminate Property.


	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: The position of the sequence to delete.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateSequenceInfo(laminate, sequence_pos):

	"""

	Gets values from a Laminate Sequence in the specified laminate Property.


	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: The position of the sequence to retrieve information.

	@returns object: Returns a dict with keys:
	
	"name"                  string          The name of the sequence
	"number_of_layers"      integer         The number of layers of the sequence
	"active"                boolean         True if at least one layer of the sequence is active. False otherwise.
	
	In case of error, it returns None.

	"""

def LaminateSequenceModify(laminate, sequence_pos, name, sequence_new_pos, active):

	"""

	Modifies a Laminate Sequence in the specified laminate Property.


	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: (optional)The position of the sequence to modify.
	If not given the first sequence will be modified.

	@name string: (optional)The name of the sequence.

	@sequence_new_pos integer: (optional)The new position of the sequence.

	@active boolean: (optional)Activates or deactivates all the layers of the sequence.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LaminateSequenceNew(laminate, sequence_pos, name):

	"""

	@laminate object: A reference to a laminate Property.

	@sequence_pos integer: (optional)The position of the new sequence.
	Use 0 to position the new sequence last.
	(Default: 0)

	@name string: (optional)The name of the sequence.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def LoadInclude(include, load_exclusively):

	"""

	Loads the include from its reference (full path name or AnsaDB text). Has the same effect 
	as adding the include to the current configuration (or marking for next update if already in configuration) 
	and updating the configuration.


	@include object: A reference to an include element.

	@load_exclusively boolean: (optional)If True and include is part of a group include, parent will be exclusive, 
	include will be the only one loaded among group children.

	@returns integer: Always returns 0.

	"""

def LoadIncludeConfiguration(include_config, load_option, incomplete_unload):

	"""

	Update or reload the include configuration include_config.


	@include_config object: A reference to a configuration object.

	@load_option integer: 1, for update include configuration.
	2, for reload include configuration. 
	Note: This option renders all pointers to 
	entities invalid, including those to configurations and includes.

	@incomplete_unload boolean: (optional)True or False (See RETURN).

	@returns object: Returns 0 if invalid arguments were specified. Returns 1 otherwise.
	If the argument "incomplete_unload" is set to True, the function returns an object with two variables:
	a) success (integer, 0 for failure, 1 for success)
	b) incomplete_entities (list containing the includes that failed to unload)

	"""

def LoadStoredLockView(lockview):

	"""

	This function accepts as an argument a string with the name of an already
	stored locked view or a lock view object obtained by calling the 
	base.StoreLockView function. It restores the saved model view.


	@lockview object: The name of the stored lockview or an object.

	@returns integer: Returns 1 on success or None on error.

	"""

def InvertGeomOrientation():

	"""

	This function inverts the orientation of Macros like the FACEs>INVERT function.
	Works only on visible macros or negative volume solid elements.


	@returns integer: Returns 0 in all cases.

	"""

def PerformGeomOrientation():

	"""

	This function sets a uniform orientation vector to all visible connected Macro Areas and shell
	elements, FE-Model as well.


	@returns integer: Returns 0 in all cases.

	"""

def CreateCurvesFromFeatureLines(angle, ret_ents):

	"""

	This function creates 3D curves from visible feature lines of a Geometry or FE-Model shell mesh.


	@angle float: The angle to be used for the feature line recognition.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 0.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def FillHoleFe(diameter, create_3D_point,convert_to_connection_point, create_3D_curve, number_of_shell_zones_affected):

	"""

	This function is used to select and close holes according to some measurements given by the user.


	@diameter float: The diameter upon which the holes will be filled.

	@create_3D_point string: Defines whether to create a 3d point at the center of the
	hole or not. Can be set either "on" or "off".

	@convert_to_connection_point string: Defines whether to convert the 3d point to connection point
	or not. Can be set either "on" or "off".

	@create_3D_curve string: Defines whether to create a 3d curve at the hole edges or
	not. Can be set either "on" or "off".

	@number_of_shell_zones_affected integer: The number of shell zones that will be affected.

	@returns integer: Returns 0 in all cases.

	"""

def MakeNewInstance(PART, TRANSFORMATION_MATRIX):

	"""

	This function creates a new instance of an existing part/group.
	The position of the new created instance is controlled by a 4X4 transformation matrix.


	@PART object: The part object.

	@TRANSFORMATION_MATRIX object: A 4x3 list that describes the transformation matrix.

	@returns object: Returns a reference to the new instance or None in case of error.

	"""

def MassBalance(sets, calculate_mass_from, mass_definition_type, target_mass, cog_x, cog_y, cog_z, upper_limiting_factor):

	"""

	This function adds masses on selected regions of the model in order to modify its total mass and relocate
	its center of gravity. These target regions, where the masses will be spread, are specified using ANSA SETs.


	@sets object: A list of integers (SET ids) or list of entities (SET objects) were the
	mass will be applied.

	@calculate_mass_from string: (optional)Calculates Mass from visible elements or the whole DB. "visible" or "whole_database".

	@mass_definition_type string: (optional)Specifies the definition type of "target_mass" parameter. valid options are
	"total_target_mass" or "mass_to_be_added".

	@target_mass float: (optional)The target mass.

	@cog_x float: (optional)Co-ordinate X of target center of gravity.

	@cog_y float: (optional)Co-ordinate Y of target center of gravity.

	@cog_z float: (optional)Co-ordinate Z of target center of gravity.

	@upper_limiting_factor float: (optional)Upper Bound limiting factor (> 1.).

	@returns integer: Returns 1 on error and 0 on success.

	"""

def MassesInertiaToHexas(pid_name, mode, ret_ents):

	"""

	The MassesInertiaToHexas function creates hexahedron elements from mass elements.


	@pid_name string: The name of the solid pid of the hexahedron elements. 
	If is set to "", a new solid PID will be created. If the pid_name
	 already exists, the created hexahedrons are assigned with that pid.

	@mode string: (optional)If equals "All", all the mass elements are processed. In any other case, 
	the function waits for user interaction. User must select from the screen 
	the mass elements and confirm the selection. If mode argument is ommited, 
	the function enters the selection mode and waits for user interaction.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns None.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def MatchNodes(source_nodes, target_nodes, move_target):

	"""

	Match pairs of nodes to each other. The source nodes will be matched to the 
	target nodes. The source and target matrices may contain either
	references to nodes or node ids.
	The target_nodes and source_nodes matrices must have the same number
	of items, otherwise incorrect results may occur.


	@source_nodes object: A list of the nodes to match from.

	@target_nodes object: A list of the nodes to match to.

	@move_target float: (optional)The valid values are between 0 and 1.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def MaterialOrientation(entities, orientation_elements_type, orientation_type, coordinate, vertical_limit, orientation_vector, orientation_element, orientation_curves, skip_non_orthotropic_shells, orientation_vector_z, deck, shear_lock_angle, detail_level, orientation_surface, orientation_surface_flip, orientation_surface_axis, orientation_curves_axis, orientation_vector_axis, calculate_thickening, spacing, treat_offending_geometry):

	"""

	Just like its GUI counterpart (UTIL->MaterialOrientation) this function specifies the orientation of materials held by Shells, Thick Shells, Solids or Cohesives. The correct orientation is based upon prototypes given by the user.
	These prototypes can be an other element, one or more curves, a coordinate, a vector or a surface.


	@entities object: A list of element entities to apply material orientation.

	@orientation_elements_type string: One of "shells", "thick_shells", "composite_solids", "solids", "cohesives".

	@orientation_type string: One of "by_coordinate", "by_vector", "by_theta",
	"by_curves" which accepts both curves and edges, "by_draping", 
	"by_surface_and_edge","by_surface_and_vector", "by_vector_and_edge"
	For shells: by_coordinate, by_vector, by_theta, by_curves, by_draping
	For thick_shells: by_coordinate, by_vector, by_theta, by_curves
	For composite_solids: by_coordinate (only in Ansys), by_vector, 
	by_theta, by_curves
	For solids: by_surface_and_edge, by_surface_and_vector, 
	by_vector_and_edge, by_vector, by_coordinate
	For cohesives: by_coordinate, by_vector, by_theta, by_curves.

	@coordinate object: (optional)A coordinate system.

	@vertical_limit float: (optional)Angle in degrees. Material orientation fails if the angle 
	between the normal vector and the vector which 
	gives the orientation is lesser than the vertical_limit.

	@orientation_vector object: (optional)A list with three double values. Needed for 
	"by_vector", "by_theta", "by_draping",
	"by_surface_and_vector", "by_vector_and_edge"
	(optional):object A list with three double values. Used only for solids.
	xis (optiona): string One of "X", "Y", "Z"

	@orientation_element string: (optional)One of "shells", "thick_shells", "composite_solids", "solids", "cohesives"
	optional): object A shell, thick shell, composite solid or cohesive depending 
	on the orientation_elements_type. Needed for "by_theta" or "by_draping".

	@orientation_curves object: (optional)A matrix of curves. Needed for
	"by_curves", "by_surface_and_edge", "by_vector_and_edge".

	@skip_non_orthotropic_shells boolean: (optional)Choose whether it will skip non orthotropic shells.

	@orientation_vector_z object: (optional)with three double values. Used only for solids.

	@deck integer: (optional)will be used by default.

	@shear_lock_angle float: (optional)Lock angle in degrees. Needed 'by_draping'.

	@detail_level string: (optional)Valid values are 'minimum', 'average', 'maximum'.
	Needed 'by_draping'.

	@orientation_surface object: (optional)A set containing shells or solid facets. Need for 
	"by_surface_and_edge", "by_surface_and_vector"

	@orientation_surface_flip boolean: (optional)If True, the surface axis is flipped.

	@orientation_surface_axis string: (optional)One of "X", "Y", "Z".

	@orientation_curves_axis string: (optional)One of "X", "Y", "Z".

	@orientation_vector_axis string: (optional)One of "X", "Y", "Z".

	@calculate_thickening boolean: (optional)Calculate thickening. Optional only for "by_draping".
	(Default: False)

	@spacing float: (optional)Optional only for "by_draping".
	(Default: 5)

	@treat_offending_geometry boolean: (optional)Treat offending geometry. Optional only for "by_draping".
	(Default: True)

	@returns object: Returns None on success and a list of failed entities if any of the given entities fail to orient.

	"""

def MidSurfAuto(thick, faces, handle_many_solids, handle_as_single_solid, length, join_distance, elem_type, exact_middle, paste_triple_len, add_features_to_set, part, ret_ents, property, join_distance_as_percentage, paste_triple_len_as_percentage, connect_weldings, thickness_ratio, sharpen_fillets_min_radius, thickness_limit, thickness_limit_percentage, get_result_type, steady_thickness_limit, thickness_sides_min_angle, thickness_sides_max_width, intersection_angle, get_solid_percentage ):

	"""

	Creates mesh in the middle surface of solids defined by faces.
	It needs a list of (argument name, argument value) pairs.


	@thick float: The minimum thickness of the solid(s), must be > 0.

	@faces object: (optional)A list of faces and shells. (if 0 is typed then it runs for all faces and shells of the database)

	@handle_many_solids boolean: (optional)Deprecated

	@handle_as_single_solid boolean: (optional)If set to True, input is handled as a single solid

	@length float: (optional)The target element length must be greater than the minimum thickness.
	By default it equals to the minimum thickness.

	@join_distance float: (optional)The minimum distance where two perimeters are collapsed.

	@elem_type integer: (optional)Accepted values:
	-1: QUAD
	-2: TRIA
	-3: MIXED
	-4" ORTHO_TRIA
	(Default:3)

	@exact_middle integer: (optional)Deprecated.

	@paste_triple_len float: (optional)The minimum distance where two triple bounds are collapsed.

	@add_features_to_set integer: (optional)Deprecated.

	@part string: (optional)Accepted values: "use_existing", "use_current", "auto_create" and "auto_create_once".

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@property string: (optional)Accepted values: "use_existing", "use_current", "auto_create" and "auto_create_once".

	@join_distance_as_percentage boolean: (optional)If set to True, "join_distance" value is used as a percentage.

	@paste_triple_len_as_percentage boolean: (optional)If set to True, "paste_triple_len" value is used as percentage.

	@connect_weldings boolean: (optional)Is set to True, weldings are automatically connected after casting,

	@thickness_ratio float: (optional)The minimum distance where two areas are connected, expressed as a ratio of the local nodal thickness.

	@sharpen_fillets_min_radius float: (optional)The minimum radius where a fillet is sharpened.

	@thickness_limit float: (optional)The thickness limit for an area to be identified as solid.

	@thickness_limit_percentage float: (optional)The percentage of the area above a thickness_limit where a part would be identified as solid.

	@get_result_type boolean: (optional)If set to True it returns the result type of each input part.

	@steady_thickness_limit float: (optional)If get_result_type is enabled it sets the limit where two areas are considered to have different thickness.

	@thickness_sides_min_angle float: (optional)Minimum angle that defines whether a face is identified as thickness side.

	@thickness_sides_max_width float: (optional)Maximum width that defines whether a face is identified as thickness side.

	@intersection_angle float: (optional)Modifies the intersection angle limit. Valid values are between 5 and 45 degrees.

	@get_solid_percentage boolean: (optional)Always return solid percentage in the return list (thickness_limit must be set)

	@returns object: Returns 0 on success or 1 on failure.
	If ret_ents is True it returns a list with the created entities, or None if no entities are created.
	If get_result_type is True it returns an object 'ret' with the following members:
	ret.type: a list of result types in the following format ["input part id", "output part id", "type", "solid percentage"] or in the following format ["part id", "failed percentage", "type", "solid percentage"] if the part has been identified as solid. Return types are "Ribs", "Steady thickness", "Variable thickness" and "Solid".
	ret.ents: (if ret_ents is True) a list with the created entities, or None if no entities are created

	"""

def MirrorPartAxis(parts, transformation_mode, x1, y1, z1, x2, y2, z2, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function mirrors parts based on the arguments provided.


	@parts object: A list that contains the part/s to be mirrored.

	@transformation_mode string: Accepted values: "COPY", "MOVE" or "LINK".

	@x1 float: First point used to define the mirror axis.

	@y1 float: First point used to define the mirror axis.

	@z1 float: First point used to define the mirror axis.

	@x2 float: Second point used to define the mirror axis.

	@y2 float: Second point used to define the mirror axis.

	@z2 float: Second point used to define the mirror axis.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. Used only in COPY and
	LINK cases. Supported values are 0, to denote that offset will not take
	place and any other integer to denote the actual property offset value.
	Alternatively, you can set the value to "auto_offset", so that pids will be
	automatically offset by ANSA or "current_property" to assign the current
	PID to all the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module Id. It is
	taken into account only when used with the 'NEW PART' option. It is ignored in
	any other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE".
	Used only in COPY and LINK cases.
	(Default: "NONE")

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved entities should
	be released or not in a MOVE transformation. Supported values are True or False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def MirrorPartPlane(parts, transformation_mode, x1, y1, z1, x2, y2, z2, x3, y3, z3, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function mirrors parts based on the arguments provided.
	The list PARTS contains the part/s to be mirrored.


	@parts object: A list that contains the part/s to be mirrored.

	@transformation_mode string: Accepted values: "COPY", "MOVE" and "LINK"

	@x1 float: First point used to define the mirror plane.

	@y1 float: First point used to define the mirror plane.

	@z1 float: First point used to define the mirror plane.

	@x2 float: Second point used to define the mirror plane.

	@y2 float: Second point used to define the mirror plane.

	@z2 float: Second point used to define the mirror plane.

	@x3 float: Third point used to define the mirror plane.

	@y3 float: Third point used to define the mirror plane.

	@z3 float: Third point used to define the mirror plane.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. Used only in COPY and
	LINK cases. Supported values are 0, to denote that offset will not take
	place and any other integer to denote the actual property offset value.
	Alternatively, you can set the value to "auto_offset", so that pids will be
	automatically offset by ANSA or "current_property" to assign the current
	PID to all the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module Id. It is
	taken into account only when used with the 'NEW PART' option. It is ignored in
	any other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE".
	Used only in COPY and LINK cases.
	(Default: "NONE")

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved entities should
	be released or not in a MOVE transformation. Supported values are True or False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def MirrorPartPoint(parts, transformation_mode, x, y, z, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function mirrors parts based on the arguments provided.


	@parts object: A list that contains the part/s to be mirrored.

	@transformation_mode string: Accepted values: "COPY", "MOVE" or "LINK".

	@x float: Point used to define the mirror plane.

	@y float: Point used to define the mirror plane.

	@z float: Point used to define the mirror plane.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. Used only in COPY and
	LINK cases. Supported values are 0, to denote that offset will not take
	place and any other integer to denote the actual property offset value.
	Alternatively, you can set the value to "auto_offset", so that pids will be
	automatically offset by ANSA or "current_property" to assign the current
	PID to all the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module Id. It is
	taken into account only when used with the 'NEW PART' option. It is ignored in
	any other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE".
	Used only in COPY and LINK cases.
	(Default: "NONE")

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved entities should
	be released or not in a MOVE transformation. Supported values are True or False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def ModelCutAddPlane(model_cut, cutting_plane):

	"""

	Adds a CUTTING PLANE to a MODEL CUT.


	@model_cut object: A reference to a MODEL CUT object.

	@cutting_plane object: A reference to a CUTTING PLANE object that is to be added to the model_cut.

	@returns integer: Returns 0 on succes, non-zero otherwise.

	"""

def ModelCutApply(model_cut):

	"""

	Performs a model cut using the CUTTING PLANEs of the MODEL CUT object.


	@model_cut object: The MODEL CUT object that contains the CUTTING PLANEs and performs the cut.

	@returns integer: Returns 0 on succes, non-zero otherwise.

	"""

def ModelCutRemovePlane(model_cut, cutting_plane):

	"""

	Removes a CUTTING PLANE from a MODEL CUT.


	@model_cut object: A reference to a MODEL CUT object.

	@cutting_plane object: A reference to a CUTTING PLANE object that is to be removed from the model_cut.

	@returns integer: Returns 0 on succes, non-zero otherwise.

	"""

def ModifyIncludeSubcontainerRules(includes, rules, keep_existing_rules, empty_before_apply):

	"""

	This function changes subcontainer rules for the specified includes.


	@includes object: A list with includes.

	@rules string: (optional)Can be declared as a string or a matrix of strings of the following form:
	"Include/Exclude nodes/elements/all entities used (only) by included 
	groups/faces/volumes/properties/connections/connector_entities/GEBs".
	isting_rules: boolean Controls if the new rules will be appended to the 
	existing rules.

	@keep_existing_rules boolean: (optional)Controls if the new rules will be appended to the existing rules.

	@empty_before_apply boolean: (optional)Controls if INCLUDE will contain only related to the rules 
	entities after Apply All.

	@returns integer: Returns 0 if include is not a valid reference or 1 otherwise.

	"""

def HotPointsMatchingDistance(tolerance):

	"""

	Sets the nodes tolerance - nodes matching distance.


	@tolerance float: The value used for the hotpoints automatic topology.

	@returns integer: Returns 0 in all cases.

	"""

def NameToEnts(pattern, deck, match):

	"""

	Get a list containing elements whose name matches a specific pattern based on the compare mode. If your input contains special characters, use re.escape to escape all the characters in pattern.
	
	Read the manual of the Python 're' module for help on regular expression syntax.


	@pattern string: It must be a Perl compatible regular expression.
	(internally interpreted by the PCRE library)

	@deck integer: (optional)The desired DECK. If no deck is given, the function 
	will search entities of all decks.

	@match constant: (optional)Control the matching mode of the name lookup.
	Values are:
	-constants.ENM_REGEX: a regular expression match (default)
	-constants.ENM_EXACT: an exact match
	-constants.ENM_SUBSTRING: a sub-string match
	-constants.ENM_SUBSTRING_IGNORECASE: a sub-string case-insensitive match

	@returns object: Returns None when no name matches are found or a list containing references 
	to entities with successful name matches.

	"""

def Near(radius, dense_search, custom_entities):

	"""

	This function can be used in order to bring to visible all entities, which are located within 
	a user defined distance from the already visible ones (or from user specified entities provided 
	via the 'custom_entities' option) .


	@radius float: (optional)The maximum distance from the target entities (visible or custom). Default is 10.

	@dense_search boolean: (optional)Flag which controls if interpolation will be made for large entities, in order to
	obtain more points from which projections will be performed to non visible entities.
	This gives more accurate results, but can slow down the function. Default is False.

	@custom_entities object: (optional)A container (Property, Ansa Part, Set, Include or python list) 
	for which the near entities will be searched.

	@returns integer: Returns 0 in all cases.

	"""

def NearElements(coordinates, tolerance, search_entities):

	"""

	This function finds elements near a 3D point that are within the specified tolerance.


	@coordinates object: A list with lists of the x, y, z coordinates for which the nearest 
	elements need to be found.

	@tolerance float: The tolerance between the node/point and the searched entities.

	@search_entities object: (optional)A list of objects where the search will take place.

	@returns object: Returns a list, where every member of the list is a list with the entities found foreach 
	xyz given in the xyz lists. The returned list can contain elements of various types.

	"""

def NearestNode(coordinates, tolerance, search_entities):

	"""

	This function finds the nearest node to a set of points. A list with lists of the x, y, z
	coordinates are given as input and for each point the nearest node is found.


	@coordinates object: A list with lists of the x, y, z coordinates for
	the nearest node to be found.

	@tolerance float: The search tolerance.

	@search_entities object: (optional)A list of entities were the search will take place. These entities can be 
	parts, properties, sets, materials and set ranges.

	@returns object: Returns a list, where the elements of the list are references to the closest nodes
	to each point. The first element is a reference to the closest node to the first point
	as it is determined by the x, y, z coordinates of the first element in the coordinates list. 
	If a nearest node does not exist None is returned.

	"""

def NearestShell(coordinates, tolerance, search_entities):

	"""

	This function finds the nearest shell element to a set of 3D points. A list containing lists of the x, y, z
	coordinates is given as input and for each point the nearest node is found.


	@coordinates object: A list containing lists of x, y, z coordinates is given as 
	input and for each point the nearest shell is found.

	@tolerance float: The tolerance between the node/point and the searched entities.

	@search_entities object: (optional)A list of objects where the search will take place.

	@returns object: Returns a list, where the first element of the list is a reference to the
	shell closest to the first point, the second is a reference to the shell found closest
	to the second point and so on. If a shell does not exist for a point, then None is
	inserted.

	"""

def Neighb(number_of_steps):

	"""

	This function can be used in order to bring to visible neighboring items connected to the
	already visible ones. The string can be a number, which sets the number of steps taken
	each time by the NEIGHB function.


	@number_of_steps string: A number indicating how many steps will be brought 
	to visible everytime the NEIGHB function is run. If 
	an empty string is given, the number of steps is 
	assumed to be "1". 2)"ALL", to bring all neighbours.

	@returns integer: Returns 0 in all cases.

	"""

def NewGroup(name, module_id):

	"""

	This function instructs the program to create a new group named 'name' with module id 'module_id'.
	Please refer to the appropriate ANSA documentation for a detailed documentation on groups and their management.


	@name string: The name of the new part.

	@module_id string: (optional)The module id of the new part.

	@returns object: Returns a reference to the new group, if it is created successfully, and None otherwise.

	"""

def NewGroupFromVisible(name, module_id, create_links):

	"""

	This function creates a new group and adds to it all currently visible parts.


	@name string: The name of the new group.

	@module_id string: The module_id of the new group.

	@create_links string: (optional)"yes" or "no", to specify the creation of links or move to the new group.
	(Default: "yes")

	@returns object: Returns a reference to the newly created group, or 0 if it fails. 
	Reasons of failure are the existence of a part with the same name or module id.
	In this case different values for NAME and MODULE_ID should be applied.

	"""

def NewPart(name, module_id):

	"""

	This function creates a new part whose name and module id are specified through the name and module_id arguments. The new part appears in the part manager the next time it is launched.


	@name string: The name of the part.

	@module_id string: (optional)The module id of the part.

	@returns object: Returns a reference to the newly created part if it is created successfully and None otherwise.
	Reasons of failure are the existence of a part with the same name or module id.
	In this case different values D should be applied.

	"""

def Newpoint(x, y, z):

	"""

	Creates a 3D-point.


	@x float: The x coordinate of the point.

	@y float: The y coordinate of the point.

	@z float: The z coordinate of the point.

	@returns object: Returns a reference to the newly created 3D-point.

	"""

def NodesOfVisibleElements():

	"""

	Collect all the nodes of the visible elements. This function performs in the same way as
	the GRIDS flag in the ANSA main window except that it does not consider free nodes.


	@returns object: Returns a dictionary with a reference to a node key, and the
	value '1' as data, for the nodes of the visible elements.

	"""

def NodesToElements(nodes, sources):

	"""

	Given some nodes, NodesToElements finds the elements that use these nodes.


	@nodes object: Can be one of the following:
	1) A list with node ids.
	2) A list containing node references.
	3) A specific node id.
	4) A specific reference to a node object.

	@sources object: (optional)A list with values 'entities' and 'bcs'. 'entities' (default) returns the 
	elements that use the nodes and 'bcs' returns the boundary conditions 
	that use the nodes.

	@returns object: Returns a dictionary, where the key of each entry of the dictionary is a reference to the corresponing node.
	The data of the dictionary is a list that contains references to the elements that use the corresponig node.

	"""

def Not(entities, deck, keyword, id, apply_on_contents):

	"""

	This function sets the entities matching the criteria defined by the arguments to be non-visible on the screen.


	@entities object: A list of entities to be removed from the screen.
	NOTE: This argument can be omitted, if the arguments 'keyword' 
	and 'id' are defined.

	@deck integer: (optional)The deck type of the entities which will be visible, 
	(e.g. deck = constants.NASTRAN)

	@keyword string: (optional)The type of entity for the specified id (e.g. "PSHELL").

	@id integer: (optional)The ID of the specified entity, or a list with the IDs of the 
	entities to be removed from the screen.

	@apply_on_contents boolean: (optional)If set to True, the focus command will also apply
	on the contents of the given entity, else it will not.
	(Default: True)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OffsetCons(offset_distance, faces):

	"""

	Offset CONS lying on faces by a given distance.
	For each CONS, a curve is created at the position prescribed by the offset distance.


	@offset_distance float: The offset distance.

	@faces object: (optional)Can be either a face, a list of faces, a string with value 'visible' 
	or a string with value 'all'. If it is called with 'visible', it works with 
	all the visible faces . If it is called with 'all', it works with all the faces.
	If faces value is not defined it works with the visible entities.

	@returns integer: Returns 0 pon success and 1 on failure.

	"""

def OffsetFaces(offset_distance, old_faces, faces, part, property):

	"""

	Offsets faces by a given distance.


	@offset_distance float: The offset distance.

	@old_faces string: The old_faces can be "DELETE" or "KEEP".
	(deletes or keeps the original faces).

	@faces object: (optional)Can be either a face, a list of faces, a string with value 'visible' 
	or a string with value 'all' . If it is called with 'visible', it works with 
	all the visible faces . If it is called with 'all', it works with all the faces.
	If faces value is not defined it works with the visible entities.

	@part object: (optional)Is the part for the created face(s).

	@property object: (optional)Is the property for the created face(s).

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OffsetIds(ENT_TYPE, OFFSET_VALUE, FROZEN_IDS_OFFSET, OFFSET_SET_RANGE):

	"""

	This function applies an offset value to ids of predefined or of all the existing model groups
	in the current base.


	@ENT_TYPE object: A group of entities or a list of groups of entities to apply offset value.
	"ALL" for all existing groups of entities.

	@OFFSET_VALUE float: The offset value.

	@FROZEN_IDS_OFFSET string: Accepted values: "IGNORE_FROZEN", "RESPECT_FROZEN", "ABORT_IF_FROZEN" or "",
	to determine how to proceed in case of FROZEN id. ("", aborts)

	@OFFSET_SET_RANGE integer: 1 or 0, to offset range values of existing set ranges or not.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OffsetLink(offset_distance, faces):

	"""

	Offset faces as new faces, linked to the original ones.


	@offset_distance string: A parameter (0-1) of the property thickness, or an absolute (~value).

	@faces object: (optional)Can be either a face, a list of faces, a string with value 'visible' 
	or a string with value 'all' . If it is called with 'visible', it works with 
	all the visible faces . If it is called with 'all', it works with all the faces.
	If faces value is not defined it works with the visible entities.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def Open(filename):

	"""

	This function instructs ANSA to open an existing file.


	@filename: The path to the file that will be opened.

	@returns integer: Returns 0 in case of success or:
	0: OPEN_ANSA_FILE_SUCCESS
	1: OPEN_ANSA_FILE_PERMISSION_DENIED
	2: OPEN_ANSA_FILE_NOT_ANSA_DB
	3: OPEN_ANSA_FILE_NOT_VALID_CAD
	4: OPEN_ANSA_FILE_NOT_COMPATIBLE_DB
	5: OPEN_ANSA_FILE_READ_ERROR
	6: OPEN_ANSA_FILE_CAD_ERROR
	7: OPEN_ANSA_FILE_NOT_ALLOWED_IN_THIS_MODULE

	"""

def Or(entities, deck, keyword, id, apply_on_contents):

	"""

	This function sets only the entities matching the criteria defined by
	the arguments to be visible on the screen.


	@entities object: An entity or a list of entities to be isolated on the screen.
	NOTE: This argument can be omitted, if the arguments 'keyword' 
	and 'id' are defined.

	@deck integer: (optional)The deck type of the entities which will be visible.
	(e.g. deck = constants.NASTRAN)

	@keyword string: (optional)The type of entity for the specified id (e.g. "PSHELL").

	@id integer: (optional)The ID of the specified entity, or a list with the IDs of the 
	entities to be removed from the screen.

	@apply_on_contents boolean: (optional)If set to True, the focus command will also apply 
	on the contents of the given entity, else it will not.
	(Default: True)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def Orient(items_array):

	"""

	Orients visible faces/shells/solids.


	@items_array object: (optional)A list of faces/shells/solids to be oriented.

	@returns integer: Returns:
	1: If the orientation was made uniform.
	2: If the orientation was inverted.
	0: In any other case.

	"""

def OutputAbaqus(filename, mode, write_comments, preserve_ids_in_names, element_sets_as_surfaces, solver, split_pyramid, disregard_includes, output_element_thickness, thickness, apply_subcontainer_rules, version, substructure, lf_mode, output_numbering_rules, include_output_mode, output_only_main_file, output_parts_in_xml, cosimulation, update_include_fname, output_parameter_keywords, output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_lock_views, advanced_options, include, configuration, comment_output_annotations,comment_output_attributes, mbcontainer, target_unit_system, create_include_output_directory, substructures, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, output_heading_keyword, output_heading_keyword_main_file, comment_output_fe_perimeters, comment_output_connections_user_defined_geometry, comment_output_features):

	"""

	This function outputs an Abaqus format file like the FILE>OUTPUT>ABAQUS functionality.


	@filename string: (optional)The name of the output file.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	mode="custom_mbcontainer" can be used only 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "as_v_11_2_4", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@preserve_ids_in_names string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@element_sets_as_surfaces string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@solver string: (optional)"standard" or "explicit".
	(Default: "explicit" if there is at least one active explicit step, otherwise "standard")

	@split_pyramid string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_element_thickness string: (optional)"off", "at_element_card", "as distribution" or "at_property_card".
	(Default: what set at the last execution)

	@thickness float: (optional)The value of the element thickness.
	(Default: "0.0")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@version string: (optional)The abaqus version.
	(Default: what set at the last execution)

	@substructure integer: (optional)Deprecated. Use the "substructures" argument instead.
	
	The id of the Substructure to output.
	(Default: "0")

	@lf_mode string: (optional)"dos", "unix" or "system native".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@cosimulation integer: (optional)The cosimulator entity id.
	(Default: "0")

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters of 
	the GUI function.
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of dw, wo, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElement, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, UContacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to an include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer" argument.
	Outputs either an inactive configuration when no other.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	Should not be used along with "include" or 
	"configuration" argument.
	If used, mode argument must be 
	set to "custom_mbcontainer"

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from
	ANSA's unit system to the argument's unit system before
	output. If no unit system is defined in ANSA, no conversion
	will take place.

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@substructures anything: (optional)It can be either a list with the Substructure entities we want to output or 'all' in order to output all available Substructures. This option must be used along with mode='model'.

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@output_heading_keyword string: (optional)"on" or "off".
	(Default: "on")

	@output_heading_keyword_main_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputAdamsView(filename, mode, adams_name):

	"""

	This function outputs an AdamsView file.


	@filename string: The path to the directory to export.

	@mode string: (optional)"all" or "model" or "visible". 
	The default option is defined in ANSA Defaults.

	@adams_name string: (optional)"on" or "off". Modifies the kinematic entities names 
	according adams hierarchy rules.
	The default option is defined in ANSA Defaults.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputAnsys(filename, mode, beam_node_orient, write_comments, lf_mode, output_numbering_rules, include, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_misc, comment_output_inline_include, comment_output_lock_views, version, configuration, comment_output_annotations, mbcontainer, target_unit_system, create_include_output_directory, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids,comment_output_connections_user_defined_geometry, comment_output_fe_perimeters, comment_output_features):

	"""

	This function outputs an Ansys format file like the FILE>OUTPUT>ANSYS functionality.


	@filename string: (optional)The name of the output file.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@beam_node_orient string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@write_comments string: (optional)"none" or "at_eof".
	(Default: what set at the last execution)

	@lf_mode string: (optional)"dos", "unix" or "system native".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@include object: (optional)A reference to an include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_misc string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@version string: (optional)"11.0", "12.0", "12.1", "13.0", "14.0", "14.5", "15.0", "16.0", "17.0", "18.0", "19.0" or "All".
	(Default: what set at the last execution)

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer" argument.
	Outputs either an inactive configuration when no other.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	Should not be used along with "include" or 
	"configuration" argument.
	If used, mode argument must be 
	set to "custom_mbcontainer"

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from
	ANSA's unit system to the argument's unit system before
	output. If no unit system is defined in ANSA, no conversion
	will take place.

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@advanced_options string: (optional)One of dw, wo, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElement, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, UContacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputBetaTank(filename, mode):

	"""

	@filename string: The name of the output file; must contain the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputCFDPP(dirname, mode, nodesin, cellsin, exbcsin, inbcsin, cgrpsin, bcnames, grpnames, model_check, model_check_template, cancel_output_if_model_check_error, unit_system, scale):

	"""

	OutputCFDPP is a wrapper of OUTPUT_CFDPP. It supports variable number of arguments.


	@dirname string: The path to the directory to import.

	@mode string: "all" or "model" or "visible".

	@nodesin string: The filename for nodes data file.
	(Default: "nodesin.bin")

	@cellsin string: The filename for cells data file.
	(Default: "cellsin.bin")

	@exbcsin string: The filename for external boundary condition file.
	(Default: "exbcsin.bin")

	@inbcsin string: The filename for internal boundary condition file.
	(Default: "inbcsin.bin")

	@cgrpsin string: The filename for groups data file.
	(Default: "cgrpsin.bin")

	@bcnames string: The filename for BC family names file.
	(Default: "mcfd.bc")

	@grpnames string: filename for group names file.
	(Default: "mcfd.grp")

	@model_check string: (optional)"on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The name of template to run if model_check is "on".

	@cancel_output_if_model_check_error string: (optional)"on" or "off".
	(Default: "on")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputCFX(filename, mode, format, unit_system, scale):

	"""

	This function outputs a CFX format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"ascii" or "binary".
	(Default: "ascii")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def OutputCGNS(filename, mode, deck, format, write_separated, unit_system, scale, filetype, unstructured_options, write_families):

	"""

	OutputCGNS is a wrapper of OUTPUT_CGNS. It supports variable number of arguments.


	@filename string: The name of the output file; must include
	the full path to the file.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@deck integer: The current deck.

	@format string: (optional)"structured" or "unstructured".
	(Default: "unstructured")

	@write_separated string: (optional)"yes" or "no".
	It controls whether to output elements in
	different sections or not.
	(Default: "no") - Obsolete, use unstructured_options instead

	@unit_system object: (optional)A UnitSystem object.
	Dictates the length unit to which the
	output will be scaled from the existing
	ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments
	are defined, the latter will override the first.
	(Default: "1.0")

	@filetype string: (optional)Select the type of the output file.
	Can be "HDF5" or "ADF", in
	both upper- and lower-case.
	(Default: "ADF")

	@unstructured_options string: (optional)"mixed" or "separated" or "ngon".
	It controls the format of unstructured meshes.
	"mixed" - output all elements in a common section.
	"separated" - output elements in different sections 
	based on their types.
	"ngon" - output elements as arbitrary polyhedral elements.
	(Default: "mixed")

	@write_families string: (optional)"yes" or "no".
	It controls whether to group boundary conditions under Famliy_t nodes and write them with FamilySpecified type or not.
	(Default: "no")

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def OutputFibersim(filename, mode, pid, mid):

	"""

	Output a Fibersim file.


	@filename string: The filesystem path.

	@mode string: (optional)"all", "model" or "visible".
	(Default: what set at the last execution)

	@pid integer: (optional)PID start (obsolete)

	@mid integer: (optional)MID start (obsolete)

	@returns integer: This function returns 0 on success and 1 on failure.

	"""

def OutputFluent(filename, mode, format, write_solver_info, write_comments, model_check, model_check_template, cancel_output_if_model_check_error, unit_system, scale):

	"""

	OutputFluent output a FLUENT file. It supports variable number of arguments.


	@filename string: The name of the output file; must include the full path to 
	the file.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"binary", "ascii", "hdf5".
	(Default: "ascii")

	@write_solver_info string: (optional)"on", "off".
	(Default: "off")

	@write_comments string: (optional)"none" , "off", "at_eof".
	(Default: "none")

	@model_check string: (optional)"on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The name of template to run if model_check is "on".

	@cancel_output_if_model_check_error string: (optional)"on" or "off".
	(Default: "on")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputFluent2D(filename, mode, format, write_solver_info, write_comments, unit_system, scale):

	"""

	Outputs a FLUENT2D file.


	@filename string: The name of the output file; must include the full path to the file.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"binary", "ascii".
	(Default: "ascii")

	@write_solver_info string: (optional)"on", "off".
	(Default: "off")

	@write_comments string: "none" , "off", "at_eof".
	(Default: "none")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputFreeForm(filename, mode, solids):

	"""

	This function outputs a model in Free Format.


	@filename string: The file system path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@solids string: (optional)"on" or "off".
	(Default: "off")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputIdeasMseries(filename, mode, format, output_pyramids):

	"""

	This function outputs an I-DEAS M-Series format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"MS_8", "MS_9", "MS_10" or "MS_11".
	(Default: what set at the last execution)

	@output_pyramids string: (optional)"on", "off".
	(Default: "off")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputIdeasV(filename, mode):

	"""

	This function outputs a .unv format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: "all" or "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputInventor(filename, mode, format, angle):

	"""

	Outputs an Inventor format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"All in ONE" or "Separate PIDs".
	(Default: "All in ONE")

	@angle float: (optional)The angle.
	(Default: "0.0")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputLSDyna(filename, mode, write_comments, format, enddata, disregard_includes, output_element_thickness, thickness, apply_subcontainer_rules, lf_mode, output_numbering_rules, include_output_mode, output_only_main_file, output_parts_in_xml, update_include_fname, output_parameter_keywords, output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, fields_format, comment_output_lock_views, advanced_options, include, configuration, substructure, comment_output_annotations, comment_output_attributes, mbcontainer, target_unit_system, create_include_output_directory, substructures, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, comment_output_connections_user_defined_geometry, output_primer_kinematic_entities, comment_output_fe_perimeters, comment_output_features, comment_output_as_hypermesh):

	"""

	This function outputs an LS Dyna format file like the FILE>OUTPUT>LS-DYNA functionality.


	@filename string: (optional)The name of the output file. must reference the full path 
	to the file.

	@mode string: (optional)"all" , "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "as_v_11_2_4", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@format string: (optional)"960", "970", "971", "971R5/6", "971R71", "971R8", "971R9", "971R10", "R11" or "R11.1".
	(Default: what set at the last execution)

	@enddata string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_element_thickness string: (optional)"off", "at_element_card" or "at_property_card".
	(Default: what set at the last execution)

	@thickness float: (optional)The thickness of the element.
	(Default: "0.0")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@lf_mode string: (optional)"system native", "unix" or "dos".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters 
	of the GUI function.
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@fields_format string: (optional)"short", "long", "short_i10_keyword_option" or "short_i10_percent_sign".
	(Default: what set at the last execution)

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of w, dw, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElements, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, UContacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to the include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer" argument.
	Outputs either an inactive configuration when no other.

	@substructure integer: (optional)Deprecated. Use the "substructures" argument instead.
	
	The id of the substructure entity to be output. If set to -1 all substructures will be output. This option must be used along with mode='model'.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	Should not be used along with "include" or 
	"configuration" argument.
	If used, mode argument must be 
	set to "custom_mbcontainer"

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from
	ANSA's unit system to the argument's unit system before
	output. If no unit system is defined in ANSA, no conversion
	will take place.

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@substructures anything: (optional)It can be either a list with the Substructure entities we want to output or 'all' in order to output all available Substructures. This option must be used along with mode='model'.

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@output_primer_kinematic_entities string: (optional)This argument controls the output of the Primer 
	Kinematic Entities at the end of the file. 
	Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_as_hypermesh string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputMSeries(filename, mode, format, output_pyramids):

	"""

	This function outputs an M-Series format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"MS_8", "MS_9", "MS_10" or "MS_11".
	(Default: what set at the last execution)

	@output_pyramids string: (optional)"on", "off".
	(Default: "off")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputMedina(filename, mode, model, analysis, transformation, units, output_ansa_parts, output_ansa_lockviews, disregard_includes):

	"""

	@filename string: The name of the output file.

	@mode string: (optional)Accepted values: "all" or "model" or "visible".
	(Default: what set at the last execution)

	@model string: (optional)Accepted values: "nastran", "abaqus", "ls-dyna", 
	"pamcrash", "ansys" or "permas".
	(Default: "nastran")

	@analysis string: (optional)Accepted values: "0", "1", "2", "3", "4", "5", "6".
	(Default: what set at the last execution)

	@transformation string: (optional)"0"(impl.) or "1"(local) coord. system.
	(Default: what set at the last execution)

	@units string: (optional)Accepted values: "0", "1", "2", "3", "4", "5", "6".
	(Default: what set at the last execution)

	@output_ansa_parts string: (optional)Accepted values: "on" or "off".
	(Default: what set at the last execution)

	@output_ansa_lockviews string: (optional)Export ANSA LockViews as MEDINA Layers.
	Accepted values: "on" or "off".

	@disregard_includes string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputMetaPost(filename):

	"""
	Deprecated since version 17.0.0.

	This function outputs a Meta-Post format file like the FILE>OUTPUT>META-POST functionality.


	@filename string: The name of the output file; must include the full path.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0.", DeprecationWarning)

def OutputMetaProject(filename, mode, deck, label, title, geometry_name, label_name, parts):

	"""
	Deprecated since version 17.0.0.

	@filename string

	@mode string

	@deck string

	@label string

	@title string

	@geometry_name string

	@label_name string

	@parts object

	@returns integer: Returns 0 on success and 1 on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0.", DeprecationWarning)

def OutputMoldex3D(filename, mode, format, fast_cool):

	"""

	OutputMoldex3D is a wrapper of OUTPUT_MOLDEX3D. It supports variable number of arguments.


	@filename string: The name of the output file; must include the full path to the file.

	@mode string: "all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: "shell" or "solid".
	(Default: "shell")

	@fast_cool string: (optional)"yes" or "no".
	(Default: "no")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputNastran(filename, mode, write_comments, format, continuation_lines, enddata, split_pyramid, disregard_includes, output_element_thickness, thickness, second_as_first, first_as_r, cweld_el_as_grid, apply_subcontainer_rules, lf_mode, beginbulk, output_numbering_rules, version, include_output_mode, output_only_main_file, output_parts_in_xml, update_include_fname, output_all_same_directory, use_relative_name_for_readonly_includes, output_parameter_keywords, output_pcompg_as_pcomp, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_as_hypermesh, comment_output_lock_views, advanced_options, include, configuration, comment_output_annotations, comment_output_attributes, mbcontainer, target_unit_system, second_as_first_solids, comment_output_names_as_plain_comment, create_include_output_directory, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, comment_output_connections_user_defined_geometry, comment_output_fe_perimeters, comment_output_features):

	"""

	This function outputs a Nastran format file like the FILE>OUTPUT>NASTRAN functionality.


	@filename string: (optional)The name of the output file. must reference the full path 
	to the file.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "as_v_11_2_4", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@format string: (optional)"short", "long" or "free".
	(Default: what set at the last execution)

	@continuation_lines string: (optional)"on" or "off".
	(Default: "off")

	@enddata string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@split_pyramid string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_element_thickness string: (optional)"off", "at_element_card" or "at_property_card".
	(Default: what set at the last execution)

	@thickness float: (optional)The thickness of the element.
	(Default: "0.0")

	@second_as_first string: (optional)"on" or "off". Convert second order shells to 
	first order for output.
	(Default: "off")

	@first_as_r string: (optional)"on" or "off".
	(Default: "off")

	@cweld_el_as_grid string: (optional)"on" or "off".
	(Default: "off")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@lf_mode string: (optional)"system native", "unix" or "dos".
	(Default: what set at the last execution)

	@beginbulk string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@version string: (optional)Nastran version. One of "msc nastran", "md nastran", 
	"nx nastran" or "ne nastran".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters 
	of the GUI function.
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_pcompg_as_pcomp string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_as_hypermesh string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of w, dw, followed by Header, UHeader, Nodes, UNodes, 
	Elements, UElements, Properties, UProperties, 
	Materials, UMaterials, Sets, USets, Contacts, 
	Ucontacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to the include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer"argument.
	Outputs either an inactive configuration when no 
	other actives, or the active one.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	Should not be used along with "include" or 
	"configuration" argument.
	If used, mode argument must be 
	set to "custom_mbcontainer".

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from
	ANSA's unit system to the argument's unit system before
	output. If no unit system is defined in ANSA, no conversion
	will take place.

	@second_as_first_solids string: (optional)"on" or "off". Convert second order solids to 
	first order for output.
	(Default: "off")

	@comment_output_names_as_plain_comment string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputOpenFoam(dirname, mode, version, initial_conditions_folder, solver_info, scale, sets_folder, model_check, model_check_template, cancel_output_if_model_check_error, binary_io_single_precision, unit_system, binary_io_64bit_integers):

	"""

	This function outputs an OpenFOAM directory.


	@dirname string: The directory name to output the OpenFoam case. It consists of 
	path/Case_dir_name, where Case_dir_name CAN NOT be a path. If 
	Case_dir_name does not exist, it is created.

	@mode string: "all" or "model" or "visible".
	If left blank, the value in .defaults is used.

	@version string: "v1.4" to "v7.0" or "SolverInfo".
	(Default: "SolverInfo")

	@initial_conditions_folder string: "On" or "Off".
	(Default: "On")

	@solver_info string: It outputs solver info. Available arguments are "On" or Off".
	(Default: "On")

	@scale float: A float number for scaling the mesh (scale factor).
	(Default: 1.0) (no scaling takes place).

	@sets_folder string: "On" or "Off".
	(Default: "Off")

	@model_check string: (optional)"on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The name of the template to run if model_check is "on".

	@cancel_output_if_model_check_error string: (optional)"on" or "off".
	(Default: "on")

	@binary_io_single_precision string: (optional)"On" or "Off".
	(Default: "Off")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs. 
	unit_system and scale arguments cannot be declared at the 
	same time.

	@binary_io_64bit_integers string: (optional)"On" or "Off".
	(Default: "Off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputOpenFoamPoints(dirname, filename, mode, scale, unit_system, binary_io_64bit_integers):

	"""

	OutputOpenFoamPoints is a wrapper of OUTPUT_OPENFOAM_POINTS. It supports variable
	number of arguments.


	@dirname string: The directory name to output the file. It consists of path/Case_dir_name, 
	where Case_dir_name CAN NOT be a path. If Case_dir_name does not exist, 
	it is created.

	@filename string: The filename. By default, "points" filename is assumed and it is written 
	in the constant/polyMesh/ directory.

	@mode string: "all" or "visible" or "model". By default, "all" for NODES is assumed.

	@scale float: A float number for scaling the mesh (scale factor).
	If left blank 1.0 is assumed (no scaling takes place).

	@binary_io_single_precision string: (optional)"On" or "Off".
	(Default: "Off")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs. 
	unit_system and scale arguments cannot be declared at the same time.

	@binary_io_64bit_integers string: (optional)"On" or "Off".
	(Default: "Off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputPamCrash(filename, mode, write_comments, enddata, expand_ges, disregard_includes, output_element_thickness, thickness, apply_subcontainer_rules, output_metric_files, substructure, output_rmat, format, lf_mode, output_numbering_rules, analysis, include_output_mode, output_only_main_file, output_parts_in_xml, output_comments_as_cdata, update_include_fname, output_parameter_keywords,  output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_lock_views, advanced_options, include, configuration, comment_output_annotations, comment_output_attributes, mbcontainer, target_unit_system, create_include_output_directory, substructures, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, comment_output_fe_perimeters, comment_output_connections_user_defined_geometry, comment_output_features):

	"""

	This function outputs a Pam-Crash format file like the FILE>OUTPUT>PAM-CRASH functionality.


	@filename string: (optional)The name of the output file. must reference the full path.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "as_v_11_2_4", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@enddata string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@expand_ges string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_element_thickness string: (optional)"off", "at_element_card" or "at_property_card".
	(Default: what set at the last execution)

	@thickness float: (optional)The value of element thickness.
	(Default: "0.0")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_metric_files string: (optional)"on" or "off".

	@substructure integer: (optional)Deprecated. Use the "substructures" argument instead.
	
	-1 for all substructures or substructure id.

	@output_rmat string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@format string: (optional)The pamcrash version.
	(Default: what set at the last execution)

	@lf_mode string: (optional)"system native", "unix" or "dos".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@analysis string: (optional)"explicit", "implicit_pcg" or "implicit".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_comments_as_cdata string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters 
	of the GUI function.
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" of "off".
	(Default: "off")

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of dw, wo, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElements, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, UContacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to an include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer" argument.
	Outputs either an inactive configuration when no other.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	Should not be used along with "include" or 
	"configuration" argument.
	If used, mode argument must be 
	set to "custom_mbcontainer".

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from
	ANSA's unit system to the argument's unit system before
	output. If no unit system is defined in ANSA, no conversion
	will take place.

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@substructures anything: (optional)It can be either a list with the Substructure entities we want to output or 'all' in order to output all available Substructures. This option must be used along with mode='model'.

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputPatran(filename, mode):

	"""

	This function outputs a Patran format file like the FILE>OUTPUT>PATRAN functionality.


	@filename string: The name of the output file. It must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputPermas(filename, mode, write_comments, version, assign_surfaces_by, assign_contacts_by, assign_pretensions_by, preserve_ids_in_names, element_sets_as_surfaces, echo_header, disregard_includes, apply_subcontainer_rules, create_plota_at_solid_skin, lf_mode, output_numbering_rules, include_output_mode, advanced_options, output_only_main_file, output_parts_in_xml, update_include_fname,  output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_lock_views, output_fin_keyword, include, configuration, comment_output_annotations, comment_output_attributes, mbcontainer, create_include_output_directory, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, comment_output_fe_perimeters, comment_output_connections_user_defined_geometry, comment_output_features):

	"""

	It outputs a PERMAS file. It supports variable number of arguments.


	@filename string: (optional)The name of the output file. It must reference 
	the full path.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used 
	along with the mbcontainer argument
	(Default: what set at the last execution)

	@write_comments string: (optional)"none" or "at_eof".
	(Default: "at_eof")

	@version string: (optional)The Permas version.
	(Default: what set at the last execution)

	@assign_surfaces_by string: (optional)"Ids" or "Names".
	(Default: what set at the last execution)

	@assign_contacts_by string: (optional)"Ids" or "Names".
	(Default: what set at the last execution)

	@assign_pretensions_by string: (optional)"Ids" or "Names".
	(Default: what set at the last execution)

	@preserve_ids_in_names string: (optional)"on" or "off"..
	(Default: what set at the last execution)

	@element_sets_as_surfaces string: (optional)"on" or "off"..
	(Default: what set at the last execution)

	@echo_header string: (optional)"on" or "off"..
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@create_plota_at_solid_skin string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@lf_mode string: (optional)"system native", "unix" or "dos".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@advanced_options string: (optional)One of dw, wo, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElement, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, Ucontacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters 
	of the GUI function.
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@output_fin_keyword string: (optional)"on" or "off".

	@include object: (optional)The reference to an include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer" argument.
	Outputs either an inactive configuration when no other.

	@comment_output_annotations callback: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	Should not be used along with "include" or 
	"configuration" argument.
	If used, mode argument must be 
	set to "custom_mbcontainer".

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputRadTherm(filename, mode):

	"""

	This function outputs a RADTHERM format file, like the FILE>OUTPUT>RADTHERM functionality.


	@filename string: (optional)The name of the output file. It must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 1 on success and 0 otherwise.

	"""

def OutputRadioss(filename, mode, write_comments, subsets, disregard_includes, apply_subcontainer_rules, version, lf_mode, output_numbering_rules, include_output_mode, output_only_main_file, output_parts_in_xml, update_include_fname, output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_misc, comment_output_lock_views, output_parameter_keywords, output_engine, merge_engine_with_starter, advanced_options, include, configuration, comment_output_annotations, mbcontainer, material_user_as_law, target_unit_system, create_include_output_directory, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, comment_output_connections_user_defined_geometry, output_hypercrash_kinematic_entities, comment_output_fe_perimeters, write_starter_end, comment_output_features, comment_output_as_hypermesh):

	"""

	This function outputs a Radioss format file like the FILE>OUTPUT>RADIOSS functionality.


	@filename string: (optional)The name of the output file. It must reference 
	the full path.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"none", "above_key" or "at_eof".
	(Default: what set at the last execution)

	@subsets string: (optional)"on" or "off".
	(Default: "off")

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@version string: (optional)The RADIOSS version.
	(Default: what set at the last execution)

	@lf_mode string: (optional)"dos", "unix" or "system native".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters 
	of the GUI function.
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_misc string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_engine string: (optional)"on" or "off".
	(Default: "on")

	@merge_engine_with_starter string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of dw, wo, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElements, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, Ucontacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to an include entity.
	Should not be used along with "configuration" or 
	"mbcontainer" argument.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" or 
	"mbcontainer" argument.
	Outputs either an inactive configuration when no other.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@mbcontainer object: (optional)The reference to an ANSA_SUBSYSTEM, 
	ANSA_SIMULATION_MODEL, ANSA_LOADCASE 
	or ANSA_SIMULATION_RUN entity
	"configuration" argument.
	If used, mode argument must be 
	 set to "custom_mbcontainer".

	@material_user_as_law string: (optional)"on" or "off". Output material types USER1,
	USER2 and USER3 as LAW29, LAW30 
	and LAW31 respectively (or not).
	(Default: what set at the last execution)

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system of the file.
	Setting this option will perform a unit conversion from
	ANSA's unit system to the argument's unit system before
	output. If no unit system is defined in ANSA, no conversion
	will take place.

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@output_hypercrash_kinematic_entities string: (optional)This argument controls the output of the HyperCrash Kinematic Entities. Accepted values: "on" or "off". (Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". (Default: "off")

	@write_starter_end string: Accepted values: "on" or "off". (Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". (Default: "off")

	@comment_output_as_hypermesh string: (optional)Accepted values: "on" or "off". (Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputSCTetra(filename, mode, format, model_check, model_check_template, cancel_output_if_model_check_error, unit_system, scale):

	"""

	Outputs an SCTETRA file.


	@filename string: The name of the output file. It must include the full path.

	@mode string: "all" or "model" or "visible".
	(Default: "all")

	@format string: (optional)"pre" or "mdl".
	(Default: what set at the last execution)

	@model_check string: (optional)"on" or "off". If left blank, "off" is assumed.

	@model_check_template string: (optional)The name of template to run if model_check is "on".

	@cancel_output_if_model_check_error string: (optional)"on" or "off".
	(Default: "on")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputStarCCM(filename, mode, compress_file, state_name, model_check, model_check_template, cancel_output_if_model_check_error, unit_system, scale):

	"""

	OutputStarCCM is a wrapper of OUTPUT_STAR_CCM. It supports variable number of arguments.


	@filename string: The name of the output file. It must include 
	the full path to the file.

	@mode string: "all" or "model" or "visible".
	(Default: what set at the last execution)

	@compress_file string: (optional)"yes" or "no".
	(Default: "yes")

	@state_name string: (optional)The name of the state to be written.
	(Default: "default")

	@model_check string: (optional)"on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The name of template to run if model_check is "on".

	@cancel_output_if_model_check_error string: (optional)"on" or "off".
	(Default: "on")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs. 
	unit_system and scale arguments cannot be declared at the 
	same time.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputStarCD(filename, mode, renumber_cell_vertex, keep_material_ids, version, write_comments, write_bnd_file, model_check, model_check_template, cancel_output_if_model_check_error, unit_system, scale):

	"""

	Outputs STAR CD file. It supports variable number of arguments.


	@filename string: The name of the output file. It must include the full path 
	to the file.

	@mode string: "all" or "model" or "visible".
	(Default: what set at the last execution)

	@renumber_cell_vertex string: (optional)"on", "off".
	(Default: "off")

	@keep_material_ids string: (optional)"on", "off".
	(Default: "off")

	@version string: (optional)"v3", "v4".
	(Default: "v3")

	@write_comments string: (optional)"none", "off", "at_eof".
	(Default: "none")

	@write_bnd_file string: (optional)"on" or "off".
	(Default: "on")

	@model_check string: (optional)"on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The name of template to run if model_check is "on".

	@cancel_output_if_model_check_error string: (optional)"on" or "off".
	(Default: "on")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputStereoLithography(filename, mode, format, output_colors, output_exponent, unit_system, scale):

	"""

	Outputs a stereolithography file.


	@filename string: The name of the output file. It must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@format string: (optional)"ascii" or "binary".
	(Default: "ascii")

	@output_colors string: (optional)"on" or "off". Specifies whether to output property colors.
	(Default: "on")

	@output_exponent string: (optional)"on" or "off". Specifies whether to output in exponent format.
	(Default: "off")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputTheseus(filename, mode, write_comments, output_numbering_rules, output_parts_in_xml, disregard_includes, output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_misc, comment_output_lock_views, model_check, model_check_template, cancel_output_if_model_check_error, comment_output_annotations, comment_output_attributes, create_include_output_directory, comment_output_ids, comment_output_connections_user_defined_geometry, comment_output_fe_perimeters, comment_output_features):

	"""

	This function outputs a Theseus format file like the FILE>OUTPUT>THESEUS functionality.


	@filename string: The name of the output file. It must reference the full 
	path to the file.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@write_comments string: (optional)"above_key" or "at_eof".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_misc string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@model_check string: (optional)Run a check template before output.
	Accepted values: "on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The check template to execute during output.
	This argument is valid only if 'model_check' is "on".

	@cancel_output_if_model_check_error string: (optional)Cancel output if model checking fails. Model checking 
	will fail if at least one error or warning was encountered. 
	Accepted values: "on", "off".
	This argument is valid only if 'model_check' is "on".
	(Default: "on")

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success and 0 otherwise.

	"""

def OutputTosca(filename):

	"""

	Outputs a Tosca parameter format file.


	@filename string: The name of the output file.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputUh3d(filename, mode, renumber_nodes_facets_comps, auto_renumber_comps, model_check, model_check_template, cancel_output_if_model_check_error, unit_system, scale):

	"""

	Outputs a UH3D format file.


	@filename string: The name of the output file. It must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@renumber_nodes_facets_comps string: (optional)"on" or "off".
	(Default: "off")

	@auto_renumber_comps string: (optional)"on" or "off".
	(Default: "on")

	@model_check string: (optional)Run a check template before output.
	Accepted values: "on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The check template to execute during output.
	This argument is valid only if `model_check` is "on".

	@cancel_output_if_model_check_error string: (optional)Cancel output if model checking fails. Model checking 
	will fail if at least one error or warning was encountered.
	Accepted values: "on", "off".
	This argument is valid only if `model_check` is "on".
	(Default: "on")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 0 on success and 1 otherwise.

	"""

def OutputUniversal(filename, mode):

	"""

	This function outputs a .unv format file, like the FILE>OUTPUT>UNIVERSAL functionality.


	@filename string: The name of the output file. It must include the full path.

	@mode string: "all" or "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputVrml(filename, mode, length):

	"""

	This function outputs a VRML format file.


	@filename string: The name of the output file. It must include the full path.

	@mode string: (optional)"all" or "model" or "visible".

	@length string: (optional)"m" or "as-is".
	-"m" option outputs the file in meters.
	-"as-is" option states that no conversion will occur.
	(Default: "m")

	@returns integer: Returns 0 on success and 1 otherwise.

	"""

def OutputWaveFront(filename, mode, out_parts, out_normals, unit_system):

	"""

	This function outputs a Wave-Front format file.


	@filename string: The name of the output file. It must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@out_parts string: (optional)"yes" or "no". (Default: "no").
	Groups faces by parts (wavefront 'objects').

	@out_normals string: (optional)"yes" or "no". (Default: "no").
	Outputs the vertex normals.

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def RemoveEmptyPartsGroup():

	"""

	This function removes all empty Groups and Parts of the file.


	@returns integer: Returns 0 in all cases.

	"""

def PasteNodes(source_nodes, target_nodes, allow_collapse, move_target, delete_remaining_nodes):

	"""

	Paste pairs of nodes to each other. The source nodes will be pasted to the 
	destination nodes. The source and destination matrices may contain either
	references to nodes or node ids.


	@source_nodes object: A list of the nodes to paste from.

	@target_nodes object: A list of the nodes to paste to.

	@allow_collapse boolean: (optional)Allow collapsing emements upon pasting.

	@move_target string: (optional)"average_position", "fe_position", "geom_position".

	@delete_remaining_nodes boolean: (optional)Delete excessive nodes.

	@returns integer: Returns the number of node pairs sent for paste.

	"""

def PbmsectFromCrossSection(cross_ref, property, point_id, set_id):

	"""

	This function translates a cross section in NASTRAN's PBRSECT form with property.
	POINT and SET3 keywords needed for the description of the cross section are created with
	succesive ids starting with point_id, set_id respectively.


	@cross_ref object: A cross section object.

	@property object: A reference to the property object.

	@point_id integer: The starting point id.

	@set_id integer: The starting set id.

	@returns object: Returns a dictionary of results. The contents of the dictionary are:
	"error"    : (integer)  1 if error occurred, 0 otherwise.
	"npoints"  : (integer)  number of POINTs created.
	"nsets"    : (integer)  number of SET3s created.
	"bulkdata" : (string)   NASTRAN bulk data.

	"""

def PbrsectFromCrossSection(cross_ref, property, point_id, set_id):

	"""

	This function translates a cross section in NASTRAN's PBRSECT form with property.
	POINT and SET3 keywords needed for the description of the cross section are created with
	succesive ids starting with point_id, set_id respectively.


	@cross_ref object: A reference to the cross section object.

	@property object: A reference to the property object.

	@point_id integer: The starting point id.

	@set_id integer: The starting set id.

	@returns object: Returns a dictionary of results. The contents of the dictionary are:
	"error"    : (integer)  1 if error occurred, 0 otherwise.
	"npoints"  : (integer)  number of POINTs created.
	"nsets"    : (integer)  number of SET3s created.
	"bulkdata" : (string)   NASTRAN bulk data.

	"""

def PedestrianActivateHardPartsDistanceContour(hard_parts, external_parts, impact_angle):

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	Creates a contour graph of the distance between the hood and the hard parts on the given direction defined by the impact angle.


	@hard_parts integer: The hard_parts set id.

	@external_parts integer: The external_parts set id.

	@impact_angle float: The impact angle.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianConv2LineElements():

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	Pedestrian function for converting all created curves from pedestrian tool to line elements.
	The function cannot be called if the PedestrianMarkingParameters function has not been called
	before.


	@returns integer: Returns 0 in all cases.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianCreateBLEPoints():

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function creates Bonnet Leading Edge target points and calculates the appropriate data according to the values 
	set by the PedestrianTargetsParameters function. The Upper Bumper Refence Line and the Bonnet Leading Edge 
	must exist in base.


	@returns integer: Returns 0 on success, non-zero on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianCreateLoadCases(external_parts, device_set, device_include, device_cid, targets_set, master_filename, files_prefix_name, output_path, transf_filename, meta_filename, z_level, velocity, dyna_trsfm_mode, device_type, point_type, write_out_set, use_point_names, files_extension):

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	Sets the various parameters of the Pedestrian function for multi-positioning of 
	the test device and creation of the load cases.


	@external_parts integer: The set id of the external parts.

	@device_set integer: The set id of the test device.

	@device_include integer: The include id of the test device. Only if DYNA_TRSFM_MODE is "INCLUDE_TRANSFORM".

	@device_cid integer: The id of the headforms coordinate system.

	@targets_set integer: The set id that contains the target points for the creation of the load cases. 
	If this is not defined the function works on all database's target points.

	@master_filename string: (optional)The full path name of master file that contains the include hierarchy.

	@files_prefix_name string: (optional)Prefix of include files that will be created.
	(Default: "PedShot")

	@output_path string: (optional)The output directory.

	@transf_filename string: (optional)Name of transformations list file that will be created.
	(Default: "TransfList.csv")

	@meta_filename string: (optional)Name of the Meta file that will be created.
	(Default: "MetaList.csv")

	@z_level float: (optional)The height from the ground.

	@velocity float: (optional)Velocity of the test device. If a value is defined previously in target 
	point's card, then the function disregards this one.

	@dyna_trsfm_mode string: (optional)Values supported "NODE_TRANSFORM", "INCLUDE_TRANSFORM".
	It works only for LSDYNA. (Default: "NODE_TRANSFORM")

	@device_type string: (optional)Values supported are "HEADFORM" and "LEGFORM".

	@point_type string: (optional)Values supported are "TARGET", "CONTACT" or "TEST".
	(Default: "TARGET")

	@write_out_set boolean: (optional)Values supported "ON", "OFF". If this flag is on the definition of the test
	device set will be written out in the include file.

	@use_point_names boolean: (optional)Values supported "ON", "OFF" If this flag is on the created master files 
	and directories will get target point's name.

	@files_extension string: (optional)The preferred extension of all the include files that
	will be created (e.g .inc). Default value is the default
	extension of the current deck.

	@returns integer: Returns 0 in all cases.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianCreateRaster():

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function creates a raster of target points for pedestrian headform according to the values
	set by the PedestrianTargetsParameters function. The WAD and Side Reference Lines must exist in 
	the base.


	@returns integer: Returns 0 on success, non-zero on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianDetectCriticalPoints():

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function calculates the critical target points for pedestrian headform or legform according to the values
	set by the PedestrianTargetsParameters function. The critical criterion is the distance from hard parts
	at the shot direction.


	@returns integer: Returns 0 on success, non-zero on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianMarkVehicle():

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function marks the vehicle for pedestrian headform or legform testing according to the values
	set by the PedestrianMarkingParameters function.


	@returns integer: Returns 0 on success, non-zero on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianMarkingParameters(external_parts, apply, test_type, windscreen, bumper_beam, ground_z, lbrl_angle, ubrl_angle, bc_angle, blerl_angle, blerl_height, bsrl_angle, adult_radius, child_radius, exclusion_sphere, disregard_sides, disregard_dist, gridsize, stepsize, wiper_blades, bonnet, offset_wad_lines, bumper, wad_project_limit, smooth_curves, different_pids, boundaries_only,inclined_ground,ground_point_1, ground_point_2, upper_legform_2015, bc_matching_dist, geom_points_curves, wad_tapes_to_ble, wad_tapes_y_limits, forward_angle_limit, rotate_back_inclined, ec_proposal, bc_gauge_limits, custom_legform_targets,custom_upper_leg_points,custom_lower_leg_points, rename_inclined_targets):

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function sets the parameters to apply a selected regulation or protocol of Pedestrian Testing.


	@external_parts integer: The set id of the external parts.

	@apply string: Apply the needed regulation or protocol ("EURONCAP_GRID", "EUPHASE_1", 
	"EUPHASE_2", "JNCAP", "TRIAS_63", "EURONCAP_OLD", "EURONCAP_GRID_V7").

	@test_type string: Supported values are "HEADFORM", "LEGFORM" or "BOTH".

	@windscreen integer: Set id of windscreen.

	@bumper_beam integer: (optional)Set id of bumper beam (integer). For Legform marking of EURONCAP protocol.

	@ground_z float: (optional)Z coordinate of ground.

	@lbrl_angle float: (optional)Lower bumper reference line angle.

	@ubrl_angle float: (optional)Upper bumper reference line angle.

	@bc_angle float: (optional)Bumper corner angle.

	@blerl_angle float: (optional)Bonnet leading edge angle.

	@blerl_height float: (optional)Bonnet leading edge height.

	@bsrl_angle float: (optional)Bonnet side reference line angle.

	@adult_radius float: (optional)Adult headform radius.Add post-fix _Inclined_Angle at Target Points\names 
	when Ground Type is Inclined.

	@child_radius float: (optional)Child headform radius.

	@exclusion_sphere string: (optional)Values supported are "ON", "OFF" (deprecated).

	@disregard_sides boolean: (optional)The excluded points according the sides lines will be deleted. If is False
	the excluded points will not be deleted and will be marked as 'EXCLUDED'.
	For EURONCAP_GRID only.

	@disregard_dist float: (optional)Disregard distance from side lines. For EURONCAP_GRID only.

	@gridsize float: (optional)Grid size of EURONCAP_GRID.

	@stepsize float: (optional)Resolution of lines.

	@wiper_blades integer: (optional)Set id of wiper blades. For EURONCAP_GRID only.

	@bonnet integer: (optional)Bonnet set id. For EURONCAP_GRID only.

	@offset_wad_lines boolean: (optional)To offset or not the wad_line.

	@bumper integer: (optional)Set id of bumper beam (integer). For Legform marking of EURONCAP protocol.
	ptional): integer Bumper set id. For Legform testing.

	@wad_project_limit float: (optional)The projection of the flexible tape's edge on the car's 
	surface, will not be performed for WADs less than this 
	value.

	@smooth_curves boolean: (optional)Smooth created curves for stepsize values less than 20.

	@different_pids boolean: (optional)Create a different PID for each curve in PedestrianConv2LineElements.

	@boundaries_only boolean: (optional)Create only the lines of EuroNCAP Grid.

	@inclined_ground boolean: (optional)Use inclined ground according ground_point_1 and ground_point_2.

	@ground_point_1 object: (optional)First Ground Point. A tupple containing the (x,y,z) coordinates is 
	required.

	@ground_point_2 object: (optional)Second Ground Point. A tupple containing the (x,y,z) coordinates is 
	required.

	@upper_legform_2015 boolean: (optional)Apply the EuroNCAP 2015 proposal for Upper Legform.
	(Default: False)

	@bc_matching_dist float: (optional)BLE and BSRL matching distance for Bonnet Corner Points calculation. 
	(Default: 1mm)

	@geom_points_curves boolean: (optional)Create 3D points on Targets of EuroNCAP Grid and Curves between them.
	(Default: False)

	@wad_tapes_to_ble boolean: (optional)Create WAD tapes from Ground to BLE for covering possible gaps (e.g grills).
	For EURONCAP_GRID only. (Default: False)

	@wad_tapes_y_limits object: (optional)An array that contains the Y-coordinate limits of WAD tapes on the right 
	and on the left side of the car. Default values are (blank, blank).

	@forward_angle_limit float: (optional)If the vehicle's Forward Angle is greater than this value then horizontal 
	projection will be performed. For EURONCAP_GRID (version >= 8.1.0).
	(Default: 60)

	@rotate_back_inclined boolean: (optional)Rotate back the created entities when Ground type is 'Inclined'. 
	(Default: False)

	@ec_proposal boolean: (optional)Enable proposal of the EC to GRSP - December 2014. For EU_PHASE2.
	(Default: False)

	@bc_gauge_limits object: (optional)An array that contains the EC proposal Gauge lower and upper limit. 
	For EU_PHASE2 and ec_proposal = True. Default values are (75, 1001).

	@custom_legform_targets boolean: (optional)The mark() function will create additional legform target points
	at user defined Y coordinates of WAD 775(or BLE) and UBRL.
	The Y coordinates must be set by variables custom_upper_leg_points
	and custom_lower_leg_points. (Default: False)

	@custom_upper_leg_points string: (optional)The Y-coordinates of Upper legform additional points that will be created.
	They should be given in comma separated format.
	(e.g 80, 160, -80, -160 e.t.c)
	Default value is blank. It applies only if the custom_legform_points=True.

	@custom_lower_leg_points string: (optional)The Y-coordinates of Lower legform additional points that will be created.
	They should be given in comma separated format.
	(e.g 80, 160, -80, -160 e.t.c)
	Default value is blank. It applies only if the custom_legform_points=True.

	@rename_inclined_targets boolean: (optional)Add post-fix '_Inclined_Angle' at Target Points names when
	Ground Type is 'Inclined'. (Default: True)

	@returns integer: Returns 0 in all cases.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def PedestrianTargetsParameters(external_parts, windscreen, raster_zone, raster_length, paste_tol, follow_all_lines, critical_mode, hard_parts_head, hard_parts_leg, impact_angle_head, impact_angle_leg, critical_zone, points_per_area, points_distance, ble_points):

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function sets the parameters for target points creation functions (PedestrianCreateRaster, PedestrianCreateBLEPoint, PedestrianDetectCriticalPoints).


	@external_parts integer: (optional)The set id of the external parts.

	@windscreen integer: (optional)The set id of the windscreen.

	@raster_zone string: (optional)Accepted values: "ADULT", "CHILD" or "BOTH".

	@raster_length float: (optional)Length of raster's box. Default value is 80 mm.

	@paste_tol float: (optional)Paste tolerance between raster points and boundary lines. 
	(Default: 20 mm)

	@follow_all_lines boolean: (optional)(Default: False)

	@critical_mode string: (optional)Values "HEADFORM" or "LEGFORM" are supported.
	(Default: "HEADFORM")

	@hard_parts_head integer: (optional)Sef id of hard parts for headform mode.

	@hard_parts_leg integer: (optional)Set id of hard parts for lower legform mode.

	@impact_angle_head float: (optional)Impact angle for headform mode.

	@impact_angle_leg float: (optional)Impact angle for legform mode.

	@critical_zone string: (optional)Accepted values: "ADULT", "CHILD" or "BOTH". For headform mode.

	@points_per_area integer: (optional)The number of points that will be detected in each area.
	(Default: 1)

	@points_distance integer: (optional)The minimum desired distance between two consecutive critical points in each
	area. (Default: 50mm)

	@ble_points integer: (optional)The number of target points that will be calculated in each BLE segment.
	(Default: 4)

	@returns integer: Returns 0 in all cases.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def Peel():

	"""

	When applied the function works in same way as the TOPO>PEEL function.
	It will exclude all shells with free edges or solids with freefacets, from actions to continue.


	@returns integer: Always returns 1.

	"""

def PickEntities(deck, types, initial_type, initial_entities, containers, recursive, filter_visible, prop_from_entities, mat_from_entities, model_browser_filter, ret_init):

	"""

	This function puts ANSA in select mode. It supports the selection of all entities 
	that are visible in the Database Browser.


	@deck integer: The deck that corresponds to the types argument.

	@types object: A string or list of strings with "ansa keywords"
	of the types that will be available for pick.
	Such types can be SHELL, SOLID, GRID etc.
	Additionally, the following keywords can be used:
	"__PROPERTIES__"
	"__MATERIALS__"
	"__ELEMENTS__"
	"__ALL_ENTITIES__"
	"__CONNECTIONS__"
	"__KINETIC__"

	@initial_type string: (optional)Defines the initial picking type.
	If this option is missing then the function will try to define the 
	appropriate initial picking type.

	@initial_entities object: (optional)A reference to an entity or a list with references to entities.
	The entities will appear preselected. If this option is missing
	then no entities will appear preselected.

	@containers object: (optional)A reference to an entity or a list with references to entities.
	Only the entities that belong to the given containers (e.g Parts, Properties, Includes etc) will be available for pick.
	If this option is missing then all entities defined by types argumentwill be available for pick.

	@recursive boolean: (optional)Recursively search any containers contained in a higher level 
	container for any or the types.
	Used only when containers argument is given. 
	(Default: False)

	@filter_visible boolean: (optional)Only the entities that satisfy all collection criteria, have visibility 
	status, and the status is active will be available for pick. In all 
	other cases the parameter is ignored. 
	Used only when containers argument is given.
	(Default: False)

	@prop_from_entities boolean: (optional)In case types argument is a property, this argument controls if the property 
	must be acquired from the entities referenced by the entities in containers 
	or not. For example, if types is "PSHELL", containers is "PART", and 
	prop_from_entities is True, if the part contains shells, the corresponding 
	PSHELL will be available for pick. Otherwise, if prop_from_entities is False, 
	the corresponding PSHELL will not be available for pick.
	Used only when containers argument is given.
	(Default: False)

	@mat_from_entities boolean: (optional)In case types is a material, this argument controls if the material must be 
	acquired from the entities referenced by the entities in container or not.
	For example, if types is "MAT1", container is "PART", and mat_from_entities 
	is True, if the part contains elements with MAT1 material, the corresponding 
	material will be available for pick. Otherwise, if mat_from_entities is False,
	the corresponding material will not be available for pick.
	Used only when containers argument is given.
	(Default: False)

	@model_browser_filter object: (optional)This argument is a Python dictionary which determines which entities will be available for pick  when containers argument is a Part, a Group, a Subsystem, a Simulation Model or a Simulation Run. In order to apply this, use types=None. It is a Python dictionary with 2 keywords and 2 values.
	{
	"container": container_value,
	"collect_mode": collect_mode_value
	}
	The possible values of container_value and collect_mode_value vary 
	according to the entity they will be applied on. More specifically:
	
	- When collecting entities from a Part/Group:
	container_value: "all"
	collect_mode_value: "contents" : Will return entities that strictly belong to 
	                                                    the Part/Group.
	                                 "contents_related": Will return the entities that strictly belong to 
	                                                                this Part/Group + their properties and materials.
	                                 "contents_affected": Will return the entities that strictly belong to
	                                                                  this Part/Group
	                                                                 + their properties and materials
	                                                                 + all entities that are geometrically related
	                                                                 to it(use same nodes or are otherwise connected) 
	- When collecting entities from a Subsystem/Simulation Model / Simulation Run:
	container_value: "all": Will collect entities of any type, belonging to the 
	                                   Subsystem/Simulation Model/Simulation Run.
	                           "geometry": Will collect geometry entities belonging to the 
	                                              Subsystem/Simulation Model /  Simulation Run.
	                           "connections": Will collect connections(like SPOTWELD) belonging to the    
	                                                   Subsystem/Simulation Model /  Simulation Run.
	                           "model_setup_entities": Will collect Model Setup Entities (like RBE3 directly 
	                                                                  connected to geometry) belonging to the 
	                                                                  Subsystem/Simulation Model/Simulation Run.
	                           "interfaces ": Will collect Interfaces (like A_POINTs) belonging to the 
	                                                 Subsystem/Simulation Model/Simulation Run.
	collect_mode_value: "contents": Will collect entities that directly belong to the
	                                                   containers (see above mentioned argument) of the
	                                                   Subsystem/Simulation Model/Simulation Run
	                                 "missing": Will collect entities that should-but-don't belong to
	                                                 the containers (see above mentioned argument) of
	                                                 the Subsystem/Simulation Model/Simulation Run.
	                                 "misplaced": Will collect entities that do-but-shouldn't belong to
	                                                     the containers (see abovem entioned argument) of
	                                                     the Subsystem/Simulation Model/Simulation Run.
	
	Please note that Missing and Misplaced are not defined for the GEOMETRY_OUT_OF_SUBSYSTEMS subsystem.

	@ret_init boolean: (optional)If set to True, a list with the selected entities will be returned, or an empty list if no entities are selected.
	(Default: False)

	@returns object: Returns a list containing the selected entities in the order they were picked on success, or None when no entites are selected, Cancel or Esc are pressed or on failure.
	If ret_init=True, it will return a list containing the selected entities in the order they were picked on success, an empty list when no entities are selected, or None when Cancel or Esc are pressed or on failure.

	"""

def PickNodes(DECK, ENTITIES):

	"""

	This function puts ANSA in select mode for node selection.


	@DECK integer: The deck constants.

	@ENTITIES object: An object or a list of object were the selection will be activated.

	@returns object: Returns a list containing the selected nodes.

	"""

def PickPointOnSurface(ENTITIES):

	"""
	Deprecated since version 22.0.0.

	The function allows you to pick any point on the surface of a shell, solid and face entity.


	@ENTITIES object: A list of surface entities or a single entity.

	@returns object: Returns a list containing the selected coordinates.
	It is a list which contains lists with xyz coordinates.
	Returns None when selection is canceled.

	"""

	import warnings; warnings.warn("Deprecated since version 22.0.0.", DeprecationWarning)

def PidToPart():

	"""

	This function creates a new part for every pid and assigns all the items of a certain
	pid to their respective part. The part name and module id are taken from the name and 
	id of the property from which the parts are created. The original parts remain empty.
	For more information refer to the user's guide as this function has the same effect as 
	the PID-PART button on the part manager.


	@returns integer: Always returns 1.

	"""

def PlaneCut(x1, y1, z1, x2, y2, z2, x3, y3, z3, entities, produce_plane_faces, perform_topology):

	"""

	Cuts a number of faces, shells, cons or curves by a plane, defined by three points.


	@x1 float: The x coordinate of the first point.

	@y1 float: The y coordinate of the first point.

	@z1 float: The z coordinate of the first point.

	@x2 float: The x coordinate of the second point.

	@y2 float: The y coordinate of the second point.

	@z2 float: The z coordinate of the second point.

	@x3 float: The x coordinate of the third point.

	@y3 float: The y coordinate of the third point.

	@z3 float: The z coordinate of the third point.

	@entities object: A list of entities where the cut will be applied, a string with value 'visible' 
	or a string with value 'all' . If it is called with 'visible', it works with all the 
	visible entities. If it is called with 'all', it works with all the entities.

	@produce_plane_faces boolean: If True, new planar face will be created lying on the plane that will 
	intersect with the face(s)/shell(s).

	@perform_topology boolean: If False, the performed plane-cut will get released into red bounds.
	If True, all cuts will be pasted.

	@returns integer: Always returns 1

	"""

def PositionPedestrian(head_set_id, bonnet_set_id, angle, move_back, target_x, target_y, target_z, coord_id, node_1, node_2, node_3, undo_trans, target_or_contact, get_all_contact_points, z_level, use_cid_for_lowest_point, consider_inclination):

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function performs positioning of the test device for Pedestrian testing.


	@head_set_id integer: The set id of the FMH.

	@bonnet_set_id integer: The set id of the bonnet.

	@angle float: The approach angle.

	@move_back float: The move back distance,

	@target_x float: The x coordinate of the target point.

	@target_y float: The y coordinate of the target point.

	@target_z float: The z coordinate of the target point.

	@coord_id integer: (optional)The coordinate system id.

	@node_1 integer: (optional)The first node for CS definition.

	@node_2 integer: (optional)The second node for CS definition.

	@node_3 integer: (optional)Thethird node for CS definition.

	@undo_trans boolean: (optional)If set to True, the head will return to the original 
	position after the return of function.

	@target_or_contact integer: (optional)If set to 0, the positioning mode will be Target Point.
	If set to 1 will be Contact Point.
	If set to 2 will be Test Point.

	@get_all_contact_points boolean: (optional)If set to True,  the function will also calculate  the contact 
	point coordinates for all the other positioning modes, 
	besides the one that is selected.

	@z_level float: (optional)The height of the ground in z axis.

	@use_cid_for_lowest_point boolean: (optional)If the 'z_level' is not blank, then the legform lowest point will be
	defined from the 'coord_id'. Otherwise the function will compute 
	the lowest point from the impactor's nodes.
	(Default: False)

	@consider_inclination boolean: (optional)The inclination angle calculated in 'Car Marking' tab will be added to
	the impact angle during the positioning of the impactor. Considering 
	the fact that the car will not be rotated during simulation, then for 
	achieving the equivalent load case we need to rotate the ground plane 
	in the opposite direction. This is the reason why the inclination angle 
	is always positive, regardless how the Ground P-1 and P-2 are defined.
	(Default: False)

	@returns object: PositionPedestrian returns an array a[] of 26 entries that define the
	transformation in an LS_DYNA way and also contains other information of the positioning. 
	Specifically rotate through an angle a[6], about a line with direction cosines a[0], a[1] and a[2],
	passing through the point a[3], a[4] and a[5]. Translation vector is a[7], a[8] and a[9].
	The function also returns the coordinates of the true target point at a[10], a[11] and a[12],
	the coordinates of the contact point for the current positioning mode at a[13], a[14] and a[15],
	the coordinates of the contact point if the positioning mode was Target Point at a[16], a[17] and a[18],
	the coordinates of the contact point if the positioning mode was Contact Point at a[19], a[20] and a[21],
	the coordinates of the contact point if the positioning mode was Test Point at a[22], a[23] and a[24],
	and the result of the positioning at a[25]. If a[25] is equal to 1 then the positioning was successfull otherwise 
	will be equal to zero.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def Prepare2GetOldAndNewEntitiesMap():

	"""

	The function is used in the case of transformations, where new entities are created from
	selected ones. If a dictionary of old and new entities needs to be aquired, this function must be
	called, prior to the transformation. After the transform has been completed, the map can
	be aquired calling the GetOldAndNewEntitiesMap().


	@returns integer: Always returns 1.

	"""

def PrincipalInertias(inertias_list, deck):

	"""

	Function takes as input a list of 6 inertia values m_in in the form
	[ixx, iyy, izz, ixy, iyz, ixz] (order does matter!) and returns a python dictionary with keys
	"principal_inertias" associated with a list of the 3 principal inertia values 
	and "principal_axes" associated with a list of 9 values of the three principal axes vectors (x,y,z).


	@inertias_list object: A list of 6 inertia values.

	@deck constant: (optional)Defines deck specific calculations. If not provided the current deck is used.

	@returns object: Returns a dictionary with keys:
	-"principal_inertias": Associated with a list of the 3 principal inertia values.
	-"principal_axes" Associated with a list of 9 values of the three principal axes vectors (x,y,z).

	"""

def PrintFastenerWeights(fast, file_name):

	"""

	This function prints the weights for the DCOUP3Ds formed internally by ABAQUS for 
	every attachment point of an ABAQUS FASTENER. Weigths are printed in a specified 
	text file or in Ansa Text if no file is specified.


	@fast object: A fastener object.

	@file_name string: The path of the file to be exported.

	@returns integer: Returns 1 on failure, otherwise 0.

	"""

def ProjectAndMarkPoints(points_coordinates, projection_tolerance, parts, move_to_perimeter_tolerance):

	"""

	Projects every point to every part, if part is within tolerance.
	Creates mark in closest projection.


	@points_coordinates object: A list containing tuples of (x, y, z) coordinates.

	@projection_tolerance float: Maximum distance between the projected points and the parts.

	@parts object: (optional)A list of the parts where the points will be projected.

	@move_to_perimeter_tolerance float: (optional)Maximum distance between the projected points and the perimeters.

	@returns object: Returns a list containing references to the closest projection of each point.

	"""

def ProjectConnection(connection, use_weld_spot_as_mesh_grid, if_close_move_on_perimeter, use_nearest_mesh_grid_as_weld, project_weld_spot_on_perimeter, mark_projected_hot_as_weld_spot, use_weld_spot_as_mesh_grid_max_dist, if_close_move_on_perimeter_max_dist, use_nearest_mesh_grid_as_weld_max_dist, project_weld_spot_on_perimeter_max_dist):

	"""

	Projects a connection point (spotweld or gumdrop).
	Specify the ID of the connection you wish to project. Optionally, specify the parameters
	of the projection, in pairs of [variable - value] from the list below:


	@connection object: The connection entity to be projected.

	@use_weld_spot_as_mesh_grid boolean: (optional)Use weld spot as mesh grid.

	@if_close_move_on_perimeter boolean: (optional)If close, move on perimeter.

	@use_nearest_mesh_grid_as_weld boolean: (optional)Use nearest mesh grid as weld.

	@project_weld_spot_on_perimeter boolean: (optional)Project weld spot on perimeter.

	@mark_projected_hot_as_weld_spot boolean: (optional)Mark projected hot as weld spot.

	@use_weld_spot_as_mesh_grid_max_dist float: (optional)The max distance of the argument 'use_weld_spot_as_mesh_grid'.
	(Value > 0.0)

	@if_close_move_on_perimeter_max_dist float: (optional)The max distance of the argument 'if_close_move_on_perimeter'.
	(Value > 0.0)

	@use_nearest_mesh_grid_as_weld_max_dist float: (optional)The max distance of the argument 'use_nearest_mesh_grid_as_weld'.
	(Value > 0.0)

	@project_weld_spot_on_perimeter_max_dist float: (optional)The max distance of the argument 'project_weld_spot_on_perimeter'.
	(Value > 0.0)

	@returns integer: Returns 0 on input error, 1 otherwise.

	"""

def ProjectCurves(CURVES, PARTS_PROPERTIES_FACES, PROJECTION_TOLERANCE):

	"""

	Projects every curve to every part/property/face, if part/property/face is within PROJECTION_TOLERANCE.


	@CURVES object: A list of curves to be projected.

	@PARTS_PROPERTIES_FACES object: A list of entities were the projection is going to take place.

	@PROJECTION_TOLERANCE float: A float that specifies the projection tolerance.

	@returns integer: Returns 0 if CURVES or PARTS_PROPERTIES_FACES length is zero.
	Returns 1 in other cases.

	"""

def ProjectPoint(x, y, z, geo_element):

	"""

	This function computes the projection point of one point on Cons or Curve. 
	The input data are the coordinates of the point to be projected and on Cons
	or Curve.


	@x float: The x coordinate of the point.

	@y float: The y coordinate of the point.

	@z float: The z coordinate of the point.

	@geo_element object: A CONS or Curve object.

	@returns object: Returns a list with the result of the projection.
	The output list can be : 
	a) (0) - On error. 
	b) (1, ProjectedPoint_x, ProjectedPoint_y, ProjectedPoint_z) - When the point to be
	    projected is projected on Cons or Curve, between end points. 
	c) (2, ProjectedPoint_x, ProjectedPoint_y, ProjectedPoint_z, SnapPoint_x,SnapPoint_y,
	    SnapPoint_z) - When the point to be projected is projected on extension of Cons or
	    Curve, out from end points. The Snap Point is the nearest of the two end points of
	    Cons or Curve. 
	
	The first value of the list is a flag with values 0, 1 or 2, to represent the three above
	situations.

	"""

def ProjectPointDirectional(target, point_x, point_y, point_z, vec_x, vec_y, vec_z, tolerance, project_on):

	"""

	This function computes the projection point of one point on faces and macros.
	The input data is the point to be projected and the id of 'Cons'.


	@target object: A list of entities, where the projection is going to take place.

	@point_x float: The x coordinate of the point.

	@point_y float: The y coordinate of the point.

	@point_z float: The z coordinate of the point.

	@vec_x float: The x component of the vector along which the projection is going to take place.

	@vec_y float: The y component of the vector along which the projection is going to take place.

	@vec_z float: The z component of the vector along which the projection is going to take place.

	@tolerance float: The projection tolerance.

	@project_on string: "faces", "macros" or "elements".

	@returns object: Returns a list with the coordinates of the projection. or None if no projection is found.

	"""

def ProjectPointOnFacesDirectional(target_faces, point_x, point_y, point_z, vec_x, vec_y, vec_z, tolerance):

	"""

	This function Projects a point on an array of faces according to a user specified direction and fills 
	the coordinates of the nearest projection.


	@target_faces object: A list containing the faces that we want to project to.

	@point_x float: The x coordinate of the point to be projected.

	@point_y float: The y coordinate of the point to be projected.

	@point_z float: The z coordinate of the point to be projected.

	@vec_x float: The x component of the directional vector.

	@vec_y float: The y component of the directional vector.

	@vec_z float: The z component of the directional vector.

	@tolerance float: The distance within which projections are accepted.
	If negative value is given the distance is considered infinite.

	@returns object: Returns a list with the coordinates of the projection. If no projection is found None is returned.

	"""

def ProjectPointOnMacrosDirectional(target_macros, point_x, point_y, point_z, vec_x, vec_y, vec_z, tolerance):

	"""

	Projects a point on an array of macros according to a user specified
	direction and fills the coordinates of the nearest projection.


	@target_macros object: A list containing the macros that we want to project to.

	@point_x float: The x coordinate of the point to be projected.

	@point_y float: The y coordinate of the point to be projected.

	@point_z float: The z coordinate of the point to be projected.

	@vec_x float: The x component of the directional vector.

	@vec_y float: The y component of the directional vector.

	@vec_z float: The z component of the directional vector.

	@tolerance float: The distance within which projections are accepted.
	If negative value is given the distance is considered infinite.

	@returns object: Returns a list with the coordinates of the projection. If no projection is found None is returned.

	"""

def ProjectPointToPlane(POINT, PLANE_ORIGIN, PLANE_VECTOR):

	"""

	This function calculates the projection of a point ( x,y,z ) to the given plane.


	@POINT object: A list with the coordinates of the point for the projection.

	@PLANE_ORIGIN object: A list with the coordinate of a point on the plane.

	@PLANE_VECTOR object: A list with the components of the normal vector to the plane.

	@returns object: Returns a list with 3 elements (x,y,z) on success and 0 if an error occurs.

	"""

def ReadCheckTemplatesFromDefaultStorage():

	"""

	This function reads the default xml file containing check templates. The file is read from
	the default storage path. Use Checks Manager to create, remove and update check templates.
	This function should becalled before any other function regarding check templates is used.


	@returns object: The return value is a list of size 2. If the default storage doesn't exist (e.g no templates 
	were created from Checks Manager), the first element of the list will be 1. Otherwise, the first 
	element will be 0. The second element will contain the number of templates read, and can be 0.

	"""

def ReadCheckTemplatesFromFile(file):

	"""

	Reads check templates from a given file.


	@file string: The path of the file to read.

	@returns object: The function will return a list of two integers. The first item is an error code. 
	If the error code is 0, then the file was read successfully. In this case, the 
	second integer is the number of templates read from file. If some error was 
	encountered, the first integer will be a non-zero integer indicating the error
	type:
	
	Error Code - Explanation
	     0     - No error
	     2     - The file argument was invalid (e.g it was not a string)
	     3     - The file could not be read

	"""

def ReadMaterialDatabase(deck, path):

	"""

	Load Material Database from file FILE, for the deck DECK.


	@deck constant: The deck constant.

	@path string: The full path to the file name.

	@returns integer: Always returns 0.

	"""

def ReadNumberingRules(filename, ref_ent, existing_rules):

	"""

	This function reads numbering rules from a file and assigns them to the whole model, or to an INCLUDE or ANSA PART.


	@filename string: The path to the filename containing the rules.

	@ref_ent anything: (optional)(name or reference) A reference to INCLUDE or PART.

	@existing_rules string: (optional)'merge_existing_rules' or 'delete_existing_rules'.

	@returns integer: Returns 0 if file does not exist, or 1 if it exists.

	"""

def RedrawAll():

	"""

	This function redraws the model on the screen.


	@returns integer: Always returns 1.

	"""

def ReduceSurfData():

	"""

	Reduce the data of surfaces. Works on visible faces.


	@returns integer: Always returns 1.

	"""

def ReferenceEntities(entities, group_results):

	"""

	Creates a list of the entities that are using the entity.


	@entities object: A reference to an entity or is a list with references to entities.
	Entities can be of type group, part, set, property, material, or elements.

	@group_results boolean: (optional)Affects the way the referenced entities are returned by the function.
	If this option is set to True, then the return is a dictionary whose
	items have the input entity as key and a list with its referenced
	entities as data.
	If this option is missing then all referenced entities will be 
	returned in a one -dimensional list.

	@returns object: Returns a list with the entities that are using the specified entities, or a dictionary (if group_results=True)

	"""

def RegisterMappingData(entity, data_label, data_index, mapping_type, mapping_label, mapping_value):

	"""

	This function can be used to assign mapping data to any entity 
	that the user wishes to use as a 'source' entity in a Results Mapping 
	procedure. By 'source' entity, we mean any entity that carries information 
	that can be mapped to a 'target' entity. 
	
	An entity can have many different sets of mapping data, for example data 
	pertaining to pressure results or, data containing stress results. So data_label 
	is a string such as "presure", "initial stress", "temperature", or any other name 
	with which the mapping data will be called later.
	
	Furthermore, an element may carry different sets of data on its various 
	integration points, for example a fully integrated shell element with four 
	quadrature points may have four different sets of stress data, one for each 
	quadrature point. For this reason, data_index is used. For usual elements 
	with only one quadrature point, data_index may be set to 1. In case of more 
	than one quadrature points, data_index takes the values 1,2,3, etc.
	
	The mapping_type argument identifies the kind of data that follows, and can
	be set to either "scalar", "vector", "tensor", or "tag". Use "scalar" to pass
	a single number a data, "vector" to pass a matrix of 3 numbers as data and
	"tensor" to pass a matrix of 6 (Txx, Tyy, Tzz, Txy, Txz, Tyz) or 9 (asymmetric 
	tensor,Txx, Tyy, Tzz, Txy, Txz, Tyz, Tyx, Tzx, Tzy ) numbers. Finally, 
	use "tag" to create values that can be used in order to group data together.
	Tag type mappings are not interpolated during the Results mapping procedure.
	This type of data is retrieved with the RetrieveTagValue function.
	
	The mapping_label argument is a name for the value that is being registered.
	
	The mapping_value argument is the actual value, according to the type 
	of data defined by mapping_type.
	
	Repeat repeat mapping_type, mapping_label and mapping_value arguments as many
	times as nessesary to register mapping data to the source entity.


	@entity object: An ANSA entity (element, node, etc.) to be used as a
	source in a Results Mapping procedure.

	@data_label string: A text label for the name of the specific mapping. Can
	be used later to retrieve data for the specific label.

	@data_index integer: Index number of source entity for which to register
	data values.

	@mapping_type string: Can be set to 'scalar', 'vector', 'tensor' or 'tag' to
	specify the type of mapping data.

	@mapping_label string: A text label for the mapping data. Can be used later
	to retrieve data of the specific mapping.

	@mapping_value anything: Depending on the mapping_type can receive different
	data. For the mapping_type:
	'scalar' a float value must be used
	'vector' a list of three float values must be used
	'tensor' a list of 6 of 9 float values can be used for
	a symmetric and asymmetric tensor respectively
	'tag' a string value can be used.

	@returns integer: Returns 0 on success, or non-zero otherwise.

	"""

def Release(nodes, mode, elements, faces, ret_ents):

	"""

	Release nodes or edges from elements that belong to.


	@nodes object: (optional)A list of nodes/edges to be released 
	(required if mode="nodes" or mode="edges").

	@mode string: "nodes", "edges" or "faces".

	@elements object: (optional)A list of elements to be released.

	@faces object: (optional)A list of solid faces to be released
	(required if mode="faces").

	@ret_ents boolean: (optional)If True, a dictionary is returned with the 
	released nodes as keys and the created nodes as data.

	@returns object: Returns 1 if one or more nodes has been released, zero otherwise.
	If ret_ents=True, a dictionary is returned with the released nodes as keys and 
	the created nodes as data.

	"""

def ReloadRepresentation(parts, property_conflicts, material_conflicts, set_conflicts, ret_results, coord_conflicts, node_conflicts):

	"""

	This function reloads a part or group representation from the DM.


	@parts object: Can be either a single ANSA part/group or a list
	that contains several ANSA parts/groups.

	@property_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@material_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@set_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@ret_results boolean: (optional)If True, the function returns a dictionary.
	If False, the function returns 1 or 0.

	@coord_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@node_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@returns object: Returns 0 in the case where the given part is not a valid ANSA part, or 1 otherwise.
	If the ret_results argument is True, ANSA returns a dictionary. The keys of the dictionary 
	are the names of the parts that were reloaded. The data of the of the dictionary consists 
	of dictionaries as well. The keys of these dictionaries are the names of the representations 
	and the data are the results of the reload (Success or Failure)

	"""

def RemoveFromHighlight(container, entities):

	"""

	Remove one or more entities that are contained into HighlightContainer.


	@container object: A reference to a highlight container.

	@entities object: A list of entities to be removed from the container.

	@returns integer: Returns 1 on success.

	"""

def RemoveFromInclude(include, entities):

	"""

	Removes an entity or a list containing entities, from an Include file.


	@include object: The include object.

	@entities object: A reference or a list of references of ansa entities.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def RemoveFromLview(lock_view, entities):

	"""

	Remove an entity or a list containing entities, from a lock view.


	@lock_view object: A reference to lock view object.

	@entities object: An entity or a list of entities to be removed.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def RemoveFromSet(set, entities, as_excluded):

	"""

	Remove an entity or a list containing entities, from a set.


	@set object: The reference of the set entity.

	@entities object: A reference or a list of references of the entities to be removed.

	@as_excluded boolean: (optional)Denote if the entities will be defined as excluded.
	(Default: False)

	@returns integer: Returns 1 on success.

	"""

def Renumber(rules):

	"""

	This function applies numbering rules.
	If the argument 'rules' is not defined, all the existing rules will be applied.
	Otherwise the selected rules will be applied.


	@rules object: (optional)A reference to general/per type numbering rule to be renumbered or 
	a list of references to general/per_type numbering rules to be renumbered.

	@returns integer: Always returns 1.

	"""

def RenumberOpenFoamMesh(mode):

	"""

	Renumber Mesh in order to reduce the bandwidth of the matrix for the solution.


	@mode string: Accepted values: "all", "model" or "visible".

	@returns integer: Returns 0 on error, or 1 on success.

	"""

def ReplaceInclude(include, filename, deck):

	"""

	ReplaceInclude function initialy empties an "include" of its contents, then inputs a new include from a file by replacing the current include.


	@include object: A reference to the include object that will be replaced.

	@filename string: The path of the new include that will replace the current one.

	@deck integer: The deck constant.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def ReplaceIncludeWithText(include, text, deck):

	"""

	This function replaces an "include" with text.


	@include object: A reference to the include object that will be replaced

	@text string: The text.

	@deck constant: (optional)The deck constant.

	@returns integer: Returns 1 on success or 0 otherwise.

	"""

def ReplaceMaterial(old_material, new_material, entities, deck):

	"""

	The ReplaceMaterial function replaces all instances of material `old_material' in the model 
	with `new_material'. Upon successfull completion, the old material remains unused and can be 
	deleted. If entities is given, only those entities will have their property's material replaced 
	by 'new_material'. If deck is not given, current deck is always chosen for materials compatibility.


	@old_material object: The current material to be replaced.

	@new_material object: The new material that will replace the current one.

	@entities object: (optional)A list with entities (or an entity), whose Property's Material will be 
	replaced by the 'new_material'. In this case the first argument 
	doesn't have any effect and can be None.

	@deck integer: (optional)The deck from which the old material of each entity in 'entities' will 
	be derived from. Current deck will be assigned if no deck is specified.

	@returns integer: Returns 0 on success. On error, the return value is 1 if any of the arguments is invalid, 
	and 2 if the materials are incompatible to substitute each other.

	"""

def ReplacePart(part_name, file_path, connections_int, connections_ext, connectors_int, connectors_ext, bconditions_int, bconditions_ext, titems_int, titems_ext, orequests_int, orequests_ext, sbuilders_int, sbuilders_ext, gnbuilders_int, gnbuilders_ext, dpatches, mass_elements, resmaps, prefer_compatible_mesh, nodes_by_name_tolerance, add_in_sets_tolerance, old_with_new_tolerance, keep_name_of_nodes_tolerance, shell_expansion_factor, property_conflicts, material_conflicts, set_conflicts, coord_conflicts, node_conflicts):

	"""

	This function replaces a single part with the contents of an ANSA database, based on a series
	of user defined arguments.
	
	Varlen is a list of (argument name, value) pairs. Any pair of argument-value can be omited and the default value will be used instead.


	@part_name string: The name of the part to be replaced.

	@file_path string: The full path to the database to replace the selected part.

	@connections_int string: (optional)Determines whether the internal Connections will be kept and 
	re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@connections_ext string: (optional)Determines whether the external Connections will be kept and 
	re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@connectors_int string: (optional)Determines whether the internal Connectors will be kept and 
	re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	By default, the same value used for internal connections is assumed.

	@connectors_ext string: (optional)Determines whether the external Connectors will be kept and 
	re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	By default, the same value used for internal connections is assumed.

	@bconditions_int string: (optional)Determines whether the internal Boundary Condition items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@bconditions_ext string: (optional)Determines whether the external Boundary Condition items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@titems_int string: (optional)Determines whether the internal Trim items will be kept and 
	re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@titems_ext string: (optional)Determines whether the external Trim items will be kept and 
	re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@orequests_int string: (optional)Determines whether the internal Output Request items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@orequests_ext string: (optional)Determines whether the external Output Request items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@sbuilders_int string: (optional)Determines whether the internal Set Builder items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@sbuilders_ext string: (optional)Determines whether the external Set Builder items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@gnbuilders_int string: (optional)Determines whether the internal General Builder items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@gnbuilders_ext string: (optional)Determines whether the external General Builder items will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@dpatches string: (optional)Determines whether the Damping Patches will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@mass_elements string: (optional)Determines whether the Mass Elements will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@resmaps string: (optional)Determines whether the Result Mappers will be kept 
	and re-applied during replace.
	Accepted values: 'KEEP' and 'DELETE'.
	(Default: 'KEEP')

	@prefer_compatible_mesh string: (optional)It defines whether elements in SETS will be replaced with 
	their compatible ones. If the value is "YES" and no compatible 
	elementis found, then all the elements in the specified 
	'Add_in_Sets_Tolerance' are added in the SET.
	Accepted values: "YES" or "NO".
	(Default: "NO")

	@nodes_by_name_tolerance float: (optional)Determines if nodes will be pasted by name and if so the value 
	of tolerance to be used. By default no action will be taken.

	@add_in_sets_tolerance float: (optional)Determines whether nodes will be put to sets and if so the value 
	of tolerance to be used. By default no action will be taken

	@old_with_new_tolerance float: (optional)Determines whether old and new nodes will be pasted and if so the 
	value of  tolerance to be used. By default no action will be taken.

	@keep_name_of_nodes_tolerance float: (optional)Determines whether the name of nodes will be kept and if so the value 
	of tolerance to be used. By default no action will be taken.

	@shell_expansion_factor float: (optional)A number to determine the expansion number of shells for sets
	during re-application.
	(Default: 1.)

	@property_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@material_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@set_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@coord_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@node_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@returns integer: Returns 0 if the part has been replaced successfully and 1 otherwise.

	"""

def ReplaceProperty(old_property, new_property, entities):

	"""

	The ReplaceProperty function replaces all instances of property 'old_property' in the model with 'new_property'. Upon successfull completion, the old property remains unused and can be deleted. If entities is given only those entities will have their property replaced by 'new_property'.


	@old_property object: The current property to be replaced.

	@new_property object: The new property to replace the current one.

	@entities object: (optional)A list with entities whose Property will be replaced by the 'new_property'.
	In this case the first argument doesn't have any effect and can be None.

	@returns integer: Returns 0 on success. On error, the return value is 1 if any of the two arguments is invalid, 
	and 2 if the properties are incompatible to substitute each other.

	"""

def ReportPenetratedPairsOfPIDs(check_type, fix, user_thickness, factor, min_distance, max_distance):

	"""

	Checks the existence of intersections and thickness penetrations between elements.
	User can request auto fixing of penetrations (where possible).
	Final penetrated / intersected PID pairs are returned to the user.


	@check_type integer: Defines the type of penetration check:
	1 = intersections, 
	2 = property thickness,
	3 = user thickness,
	4 = distance range.

	@fix boolean: (optional)A flag for fixing existing penetrations (True or False).

	@user_thickness float: (optional)The user defined thickness for the check.

	@factor float: (optional)The scale factor for the element thicknesses.

	@min_distance float: (optional)The minimum distance for distance range penetration check.

	@max_distance float: (optional)The maximum distance for distance range penetration check.

	@returns object: Returns -1 if there is an error in input data and 0 if no penetrations/intersections are found.
	
	On success, returns a list containing all the penetrated/intersected pid pairs.
	The returning list has lists as members, each containing 2 members, the IDs of the 
	penetrated/intersected properties.
	Intersected pairs are reported first and then a submatrix with 1 member only
	(with value 0) to separate intersections and penetrations.
	If no intersections are found , then the 0 list will be the first member of the
	returning list.

	"""

def ResetSpiderCog(entity, reset_on):

	"""

	This function resets the coordinates of the master node of a spider element to the
	center of the nodes of its connectivity.


	@entity object: A reference to a spider entity.

	@reset_on string: (optional)One of "average_position" or "cog". Decide whether the 
	master will be reset at the average coordinates of the slaves, 
	or at the centroid of the convex hull that contains them.

	@returns object: Returns a reference to the node that was relocated on success, or None on error.

	"""

def ResultantForce(deck, force_pressure_matrix, replace, application_to, node, ret_ents):

	"""

	Create the resultant force from the forces and/or pressures contained in FORCE_PRESSURE_MATRIX,
	replace or not these forces and/or pressures, and apply it on the CALCULATED POINT or
	on the model's COG, or on USER SPECIFIED POINT.


	@deck integer: One of NASTRAN, ABAQUS, ANSYS, SESTRA.

	@force_pressure_matrix object: A list with references to entities that are forces or pressures.

	@replace boolean: False: The resultant force that will be created will not replace the elements
	contained in FORCE_PRESSURE_MATRIX.
	True: The resultant force that will be created will replace the elements
	contained in FORCE_PRESSURE_MATRIX and the elements in the matrix will be
	deleted.

	@application_to string: "CALCULATED POINT" - The resultant force will be applied to the point
	that is calculated and a new grid at that point will be created. If this option
	is selected the last variable NODE is useless.
	"USER SELECTED GRID" - The resultant force will be applied to GRID.
	If this option is selected the last variable NODE is necessary.
	"MODEL COG" - The resultant force will be applied to the Model COG
	and a new grid at that point will be created. If this option is selected the 
	last variable NODE is useless.

	@node object: (optional)An element of type GRID or POINT.

	@ret_ents boolean: (optional)False: The function will return only the resultant force that will be created.
	True: The function will return a named tuple with both the resultant force and 
	the resultant moment.

	@returns object: Returns an element that is the resultant force on success, or 0 on error if the ret_ents is False or omitted.
	If ret_ents is True, returns a named tuple with the following members:
	-ret.force: the resultant force
	-ret.moment: the moment

	"""

def ResultsMapperImportResults(RESMAP, RESULTS):

	"""

	Imports results into a RESULTS_MAPPER.


	@RESMAP: The RESULTS_MAPPER entity that will receive the results.

	@RESULTS: A matrix containing result entities (e.g. INITIAL CONDITIONS).

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def ResultsMapperSetStatus(RESMAP, STATUS):

	"""

	@RESMAP object: The RESULTS_MAPPER object.

	@STATUS string: Pass STATUS = "ok" to set the status of the RESULTS_MAPPER to "ok".
	Any other value will invalidate the status.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def RetrieveMappedData(entity, data_label, data_index, tag, mapping_label):

	"""

	After completion of a mapping procedure, target elements will be 
	automatically assigned with mapped counterparts of data that where originally 
	assigned to source elements (see RegisterMappingData). Use this function to 
	retrieve these values.
	 
	An element can have many different sets of mapping data, for example data 
	pertaining to pressure results or, data containing stress results. So data_label 
	is a string such as "presure", "initial stress", "temperature", or any other name 
	with which the mapping data will be called later.
	 
	Furthermore, an element may carry different sets of data on its various 
	integration points, for example a fully integrated shell element with four 
	quadrature points may have four different sets of stress data, one for each 
	quadrature point. For this reason, data_index is used. For usual elements 
	with only one quadrature point, data_index may be set to 1. In case of more 
	than one quadrature points, data_index takes the values 1,2,3, etc.
	
	


	@entity object: Target entity on which to interpolate data from
	registered source entities that are found to be
	affecting the target.

	@data_label string: The label name at which mapping data was registered.

	@data_index integer: Index number of target entity for which to retrieve
	data values.

	@tag object: The object that holds all the group information (tag group).

	@mapping_label string: A text label for which to retrieve mapping data.
	Use one of the labels registered to source entities.

	@returns object: Returns the value of the mapped data requested.

	"""

def RetrieveTagValue(p_tag, tag_label):

	"""

	The function retrieves a specific tag value that holds the name "tag_label",
	from a specific tag group. Date retrieved this way must be registered with the
	 'tag' mapping_type in a RegisterMappingData function call.


	@p_tag object: The object that holds all the group information (tag group).

	@tag_label string: The second argument is a name for the value that is being registered 
	and has been defined in the function RegisterMappingData() and belongs 
	to this tag group. The p_tag can contain several "tag_name" according 
	to the way the user wants to group the mapped data.

	@returns object: Returns a reference to the tag data requested.

	"""

def Rigidize(ElementsToBeReplaced, PartForRigid, PartForReplacedElements):

	"""

	This function will replace all the elements in the given list with a Rigid Element 
	having the correct mass and inertia properties of the replaced elements. The created 
	element is connected to the rest of the structure at the nodes where the replaced 
	elements where connected.


	@ElementsToBeReplaced object: A list of elements that will be replaced.

	@PartForRigid object: The ANSA part where the created element 
	will be placed. If zero a new part named 
	"Rigidized Part" will be created.

	@PartForReplacedElements object: The ANSA part where the replaced elements 
	will be moved. If zero they will be deleted.

	@returns object: Returns a reference to the newly created rigid element, or 0 on error.

	"""

def RmLogos(faces, height):

	"""

	Removes depression logos bellow a user specified height.


	@faces object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces . If it is called with 'all', 
	it works with all the faces.

	@height float: The height, below which the search will be applied.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def RmdblFemFem(TOLERANCE, NUM_SETS):

	"""

	This function identifies which regions fall outside a user specified distance.
	The failed elements are added to either one or two sets, according to the arguments.


	@TOLERANCE float: The tolerance for searching.

	@NUM_SETS integer: 1 or 2. Denotes the number of sets.

	@returns integer: Returns 1 if comparison was possible, or 0 if the two groups of shells were not found.

	"""

def RmdblFemFemSymmetric(ORIGIN_X, ORIGIN_Y, ORIGIN_Z, NORMAL_X, NORMAL_Y, NORMAL_Z, TOLERANCE, NUM_SETS):

	"""

	This function identifies which regions fall outside a user specified distance,
	when they are symmetrical according to the specified plane.


	@ORIGIN_X float: The x coordinate of the plane point.

	@ORIGIN_Y float: The y coordinate of the plane point.

	@ORIGIN_Z float: The z coordinate of the plane point.

	@NORMAL_X float: The x coordinate of the normal point.

	@NORMAL_Y float: The y coordinate of the normal point.

	@NORMAL_Z float: The z coordinate of the normal point.

	@TOLERANCE float: The search tolerance.

	@NUM_SETS integer: 1 or 2 to denote the number of sets.

	@returns integer: Returns 1 if the comparison was possible, or 0 if the two groups of shells were not found.

	"""

def RmdblGeomFem(TOLERANCE):

	"""

	This function checks the distance between the middle point of each shell
	element and the Faces. All visible shell elements that fall outside the
	specified search distance are identified and added to a set.


	@TOLERANCE float: The search tolerance.

	@returns integer: Returns 1 if no failed elements are found, or 0 if failed elements are added to a set.

	"""

def RmdblGeomFemSymmetric(ORIGIN_X, ORIGIN_Y, ORIGIN_Z, NORMAL_X, NORMAL_Y, NORMAL_Z, TOLERANCE):

	"""

	This function checks the distance between the symmetrical middle point of
	each shell element and the Faces. All visible shell elements that fall
	outside the specified search distance are identified and added to a set.


	@ORIGIN_X float: The x coordinate of the plane point.

	@ORIGIN_Y float: The y coordinate of the plane point.

	@ORIGIN_Z float: The z coordinate of the plane point.

	@NORMAL_X float: The x coordinate of the normal point.

	@NORMAL_Y float: The y coordinate of the normal point.

	@NORMAL_Z float: The z coordinate of the normal point.

	@TOLERANCE float: The search tolerance.

	@returns integer: Returns 1 if no failed elements are found, or 0 if failed elements are added to a set.

	"""

def RmdblRotate(INPUT, LINK_DELETE_SET, ORIGIN_X, ORIGIN_Y, ORIGIN_Z, NORMAL_X, NORMAL_Y, NORMAL_Z, ANGLE, STEPS, TOLERANCE, SIMILARITY):

	"""

	This function identifies rotated faces and deletes them or replaces
	them with linked faces or adds them to sets.


	@INPUT object: Alist of entities, parts, properties, materials,
	sets or faces or a single face object.

	@LINK_DELETE_SET string: 'link',  'delete', 'delete_compress' or 'set'.

	@ORIGIN_X float: The x coordinate of the plane point.

	@ORIGIN_Y float: The y coordinate of the plane point.

	@ORIGIN_Z float: The z coordinate of the plane point.

	@NORMAL_X float: The x coordinate of the normal point.

	@NORMAL_Y float: The y coordinate of the normal point.

	@NORMAL_Z float: The z coordinate of the normal point.

	@ANGLE float: The totational symmetry angle.

	@STEPS integer: The rotational steps.

	@TOLERANCE float: The node search tolerance.

	@SIMILARITY float: The similarity factor.

	@returns integer: Returns 1 on success, or 0 on failure.

	"""

def RmdblSameSide(tolerance, similarity, positive_negative_both, link_delete_set):

	"""

	This function identifies and removes identical Faces.


	@tolerance float: The search tolerance.

	@similarity float: The similarity factor (from 0-100).

	@positive_negative_both string: (optional)One of 'positive', 'negative' or 'both' to specify 
	with group of faces to keep.

	@link_delete_set string: (optional)One of 'link', 'delete', 'delete_compress' or 'set.

	@returns integer: Returns 1 on success, or 0 on failure.

	"""

def RmdblSymmetric(POSITIVE_NEGATIVE_BOTH, LINK_DELETE_SET, ORIGIN_X, ORIGIN_Y, ORIGIN_Z, NORMAL_X, NORMAL_Y, NORMAL_Z, TOLERANCE, SIMILARITY):

	"""

	This function identifies symmetrical faces and deletes them or replaces
	them them with linked faces or adds them to sets.


	@POSITIVE_NEGATIVE_BOTH string: One of 'positive', 'negative' or 'both', to specify 
	which group of faces to keep.

	@LINK_DELETE_SET string: One of 'link',  'delete', 'delete_compress' or 'set'.

	@ORIGIN_X float: The x coordinate of the plane point.

	@ORIGIN_Y float: The y coordinate of the plane point.

	@ORIGIN_Z float: The z coordinate of the plane point.

	@NORMAL_X float: The x coordinate of the normal point.

	@NORMAL_Y float: The y coordinate of the normal point.

	@NORMAL_Z float: The z coordinate of the normal point.

	@TOLERANCE float: The node search tolerance.

	@SIMILARITY float: The similarity factor.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def RmdblTranslate(INPUT, LINK_DELETE_SET, NORMAL_X, NORMAL_Y, NORMAL_Z, DISTANCE, STEPS, TOLERANCE, SIMILARITY):

	"""

	This function identifies translated faces and deletes them or replaces
	them them with linked faces or adds them to sets.


	@INPUT object: A list of entities, parts, properties, materials, sets or faces, 
	or a single face object.

	@LINK_DELETE_SET string: One of 'link',  'delete', 'delete_compress' or 'set'.

	@NORMAL_X float: The x coordinate of the normal point.

	@NORMAL_Y float: The y coordinate of the normal point.

	@NORMAL_Z float: The z coordinate of the normal point.

	@DISTANCE float: The translational distance.

	@STEPS integer: The rotational steps.

	@TOLERANCE float: The node search tolerance.

	@SIMILARITY float: The similarity factor.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def RotateDummyAroundHPoint(KIN_JOINT, INCR_ANGLE, AXIS, ANGLE_MODE):

	"""

	This function applies the increment angle to Dummy's H-Point Kinematic Joint. 
	A rotation of the whole Dummy model around its H-Point is performed.


	@KIN_JOINT: Name or ID of H-Point Kinematic Joint

	@INCR_ANGLE: The increment angle in degrees.

	@AXIS: 1 or 2 or 3, is the Bryant rotation

	@ANGLE_MODE: 0 or 1.
	If 0, the 'INCR_ANGLE' argument is the increment angle. 
	If 1, it is the total angle.

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def RotateDummyPart(RIGID_BODY, INCR_ANGLE, AXIS, ANGLE_MODE):

	"""

	This function applies the increment angle to the corresponding Kinematic Joint of
	the selected Dummy's Rigid Body.


	@RIGID_BODY: Name or ID of Rigid Body or the Rigid Body.

	@INCR_ANGLE: The increment angle in degrees.

	@AXIS: 1 or 2 or 3, is the Bryant rotation.

	@ANGLE_MODE: 0 or 1.
	If 0, the 'ANGLE' argument is the increment angle.
	If 1, it is the total angle.

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def RotatePart(parts, transformation_mode, x1, y1, z1, x2, y2, z2, angle, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function rotates parts based on the arguments provided. The list PARTS contains the part/s to be rotated.


	@parts object: A part or a list of part entities to be rotated.

	@transformation_mode string: Accepted values: "COPY", "MOVE" or "LINK".

	@x1 float: First point to specify the rotation axis.

	@y1 float: First point to specify the rotation axis.

	@z1 float: First point to specify the rotation axis.

	@x2 float: Second point to specify the rotation axis.

	@y2 float: Second point to specify the rotation axis.

	@z2 float: Second point to specify the rotation axis.

	@angle float: Specifies the rotation angle.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. Used only in COPY and
	LINK cases. Supported values are 0, to denote that offset will not take
	place and any other integer to denote the actual property offset value.
	Alternatively, you can set the value to "auto_offset", so that pids will be
	automatically offset by ANSA or "current_property" to assign the current
	PID to all the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module Id. It is
	taken into account only when used with the 'NEW PART' option. It is ignored in
	any other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE".
	Used only in COPY and LINK cases.
	(Default: "NONE")

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved entities should
	be released or not in a MOVE transformation. Supported values are True or False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def RunCrossSection(CSECTION_ref):

	"""

	Calculates the already created ANSA Cross Section CSECTION.


	@CSECTION_ref object: A cross section or a list of cross section entities.

	@returns string: If a single cross section is provided, then the return value is an empty string or a string that contains an error message, depending on whether the calculation was successfull or not.
	If a list of cross section entities is provided, then the return value is a dictionary whose keys are the cross section objects and the values are an empty string or a string that contains an error message, depending on whether the calculation of each cross section was successfull or not.

	"""

def SaveNumberingRules(FILENAME):

	"""

	This function saves all the numbering rules to a file.


	@FILENAME string: The path to the filename where the rules will be saved.

	@returns integer: Returns 1 in case of successfully saving the rules and 0 if the numbering rules are not saved.

	"""

def SavePart(parts, save_parts, filename, entities, hierarchy, connections, connectors, titems, bconditions, orequests, setbuilders, generalbuilders, dpatches, resmap):

	"""

	This function saves a sequence of parts into a single or separate databases,
	according to a series of arguments provided by the user.


	@parts object: The part entity or list / tuple of part entities to be saved.

	@save_parts string: Enter "SeparateDBs" to save each part in a seperate database.
	Enter "SingleDB" to save all parts in one database.

	@filename string: A string that contains the path to a folder or database depending on the 
	value of save_parts.

	@entities boolean: (optional)Determines whether the parts' entities should be saved or not.
	(Default: True)

	@hierarchy boolean: (optional)Determines whether the full hierarchy should be saved or not.
	(Default: False)

	@connections string: (optional)Determines whether internal and external connections should be saved or
	not. Supported values are "INTERNAL", to include internal connections,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exlude all connections.
	(Default: "EXCLUDE")

	@connectors string: (optional)Determines whether internal and external connectors should be saved or
	not. Supported values are "INTERNAL", to include internal connectors,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exlude all connectors.
	(Default: "EXCLUDE")

	@titems string: (optional)Determines whether internal and external Trim Items should be saved
	or not. Supported values are "INTERNAL", to include internal Trim Items,
	"ALL AFFECTED", to include internal and external ones, and "EXCLUDE" to
	exlude all Trim Items.
	(Default: "EXCLUDE")

	@bconditions string: (optional)Determines whether internal and external Boundary Conditions should
	be saved or not. Supported values are "INTERNAL", to include internal
	Boundary Conditions, "ALL AFFECTED", to include internal and external ones,
	and "EXCLUDE" to exlude all Boundary Conditions.
	(Default: "EXCLUDE")

	@orequests string: (optional)Determines whether internal and external Output Requests should be
	saved or not. Supported values are "INTERNAL", to include internal
	Output Requests, "ALL AFFECTED", to include internal and external ones,
	and "EXCLUDE" to exlude all Output Requests.
	(Default: "EXCLUDE")

	@setbuilders string: (optional)Determines whether internal and external Set Builders should be
	saved or not. Supported values are "INTERNAL", to include internal
	Set Builders, "ALL AFFECTED", to include internal and external ones,
	and "EXCLUDE" to exlude all Set Builders.
	(Default: "EXCLUDE")

	@generalbuilders string: (optional)Determines whether included General Entity Builders should be
	saved or not. Supported values are "INTERNAL", to include and
	"EXCLUDE" to exlude General Entity Builders.
	(Default: "EXCLUDE")

	@dpatches string: (optional)Determines whether included Damping Patches should be
	saved or not. Supported values are "INTERNAL", to include and
	"EXCLUDE" to exlude Damping Patches.
	(Default: "EXCLUDE")

	@resmap: (optional)Determines whether included Result Mappers should be
	saved or not. Supported values are "INTERNAL", to include and
	"EXCLUDE" to exlude Result Mappers.
	(Default: "EXCLUDE")

	@returns integer: Returns 0 if all files been saved successfully and 1 otherwise.

	"""

def SaveUnusedIdsOfNumberingRules(FILENAME):

	"""

	This function saves all the unused ids, of each numbering rule, to a file.


	@FILENAME string: The path to the filename where the ids will be saved.

	@returns integer: Always returns 1.

	"""

def SaveVisibleAs(filename, empty_hierarchy):

	"""

	This function saves all currently visible entities in a new file, under a new file name.


	@filename string: The full path to the filename of the newly created ANSA DB.

	@empty_hierarchy boolean: (optional)Determines whether all visible entities will be saved or just an empty
	hierarchy of parts which currently include all visible entities. True 
	or False is supported.
	(Default:0)

	@returns integer: Returns 0 if the file has been saved successfully and 1 otherwise.

	"""

def ScalePart(parts, transformation_mode, x, y, z, factor, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function scales parts based on the arguments provided.


	@parts object: A list of part entities to be scaled.

	@transformation_mode string: Accepted values: "COPY" or "MOVE".

	@x float: Specifies the coordinate needed to define the reference point.

	@y float: Specifies the coordinate needed to define the reference point.

	@z float: Specifies the coordinate needed to define the reference point.

	@factor float: Specifies the scale factor to be used.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. Used only in COPY and
	LINK cases. Supported values are 0, to denote that offset will not take
	place and any other integer to denote the actual property offset value.
	Alternatively, you can set the value to "auto_offset", so that pids will be
	automatically offset by ANSA or "current_property" to assign the current
	PID to all the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module Id. It is
	taken into account only when used with the 'NEW PART' option. It is ignored in
	and other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE". Default value is NONE
	Used only in COPY and LINK cases.

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved entities should
	be released or not in a MOVE transformation. Supported values are True and False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on succes and 1 on failure.

	"""

def SeatBeltComponentCalculateTotalLength(SEATBELT, COMPONENT):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function calculates the total length of a created seatbelt component.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@returns integer: Returns the total_length of the seatbelt entity.

	"""

def SeatBeltCreateAllComponents(SEATBELT):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function creates or recreates all components of a predefined seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltCreateSingleComponent(SEATBELT, COMPONENT):

	"""

	This function creates or recreates a single component of a predefined seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltDeleteComponent(SEATBELT, COMPONENT, DELETE_CONTENTS):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	
	This function deletes a component of a predefined seatbelt entity,
	with an option to delete its contents.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@DELETE_CONTENTS: Flag to delete the contained created elements.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltDeleteComponentPoints(SEATBELT, COMPONENT):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	
	This function deletes the points of a component of a predefined seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltEmptyComponent(SEATBELT, COMPONENT):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	
	This function deletes the created elements of a component of a predefined seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltFillParts2Wrap(SEATBELT, PARTS):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function adds an entity or a matrix of entities in parts2wrap item of a seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@PARTS: Entity or a matrix of entities to be added.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltResetAllComponentPaths(SEATBELT):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function resets all saved paths of a seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltResetComponentPath(SEATBELT, COMPONENT):

	"""

	This function resets the saved path of a created component of a predefined seatbelt entity.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltSetComponentParameters(seatbelt, component, points_prefix, generic_type, starting_elements, starting_length, starting_anchor, elem_property_1d, rds_nstrand_property, start_elem_property_2d, main_elements, el_length, offset, num_of_shells, entry_dx, entry_dy, entry_dz, exit_dx, exit_dy, exit_dz, shells_property, ending_elements, ending_length, ending_anchor, end_elem_property_2d, num_to_extend, create_trias_at_end, create_trias_at_start, is_frozen, dyna_cross_sect_dist):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function performs the setup of the creation parameters for a specific seatbelt 
	component of a predefined seatbelt entity.


	@seatbelt object: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@component object: Name or Index of the Component.

	@points_prefix string: (optional)The prefix of name that will be set at the selected path
	points of the seatbelt component.

	@generic_type string: (optional)"1D", "2D". The generic type of the seatbelt component. 
	The 1D type can create only 1D elements and the 2D type 
	can create both 1D and 2D elements.

	@starting_elements string: (optional)The type of starting elements that will be created.
	LS-DYNA: "1D_BELT", "2D_BELT", "NONE".
	PAM-CRASH: "BARS", "BELTS", "NONE".
	ABAQUS: "CONNECTOR", "TRUSS", "NONE".
	RADIOSS: "TRUSS", "NSTRAND", "NONE".

	@starting_length float: (optional)The total length of component's starting part.

	@starting_anchor string: (optional)The type of starting anchor entity that will be created.
	"SLIPRING", "RETRACTOR", "PRETENSIONER"(LS-DYNA), "NONE".

	@elem_property_1d integer: (optional)The id of the 1D elements property. If not set, a default
	property will be created.

	@rds_nstrand_property integer: (optional)The id of the Radioss Nstrand elements property. 
	If not set,a default property will be created.

	@start_elem_property_2d integer: (optional)The id of the Ls-Dyna 2D seatbelt elements property.
	If not set, a default property will be created.

	@main_elements string: (optional)"SHELLS", "2D_BELT"
	The type of elements that will be created at the main part.
	If not set regular shells will be created. 
	The option "2D_BELT" stands only for Ls-Dyna deck.

	@el_length float: (optional)The length of all elements that will be created.

	@offset float: (optional)Offset of seatbelt elements from the parts that will be
	wrapped.

	@num_of_shells integer: (optional)The number of 2D elements that will be created at the width 
	of the seat belt.

	@entry_dx float: (optional)Entry vector dx. The starting part's width direction will be
	alligned with this vector.

	@entry_dy float: (optional)Entry vector dy. The starting part's width direction will be
	alligned with this vector.

	@entry_dz float: (optional)Entry vector dz. The starting part's width direction will be
	alligned with this vector.

	@exit_dx float: (optional)Exit vector dx. The ending part's width direction will be
	alligned with this vector.

	@exit_dy float: (optional)Exit vector dy. The ending part's width direction will be
	alligned with this vector.

	@exit_dz float: (optional)Exit vector dz. The ending part's width direction will be
	alligned with this vector.

	@shells_property integer: (optional)The id of the 2D elements property.If not set, a default
	property will be created.

	@ending_elements string: (optional)The type of ending elements that will be created.
	LS-DYNA: "1D_BELT", "2D_BELT", "NONE".
	PAM-CRASH: "BARS", "BELTS", "NONE".
	ABAQUS: "CONNECTOR", "TRUSS", "NONE".
	RADIOSS: "TRUSS", "NSTRAND", "NONE".

	@ending_length float: (optional)The total length of component's ending part.

	@ending_anchor string: (optional)The type of ending anchor entity that will be created.
	"SLIPRING", "RETRACTOR", "PRETENSIONER"(LS-DYNA), "NONE".

	@end_elem_property_2d integer: (optional)The id of the Ls-Dyna 2D seatbelt elements property.
	If not set, a default property will be created.

	@num_to_extend integer: (optional)The number of Ls-Dyna 1D seatbelt elements that will extend
	1D starting and ending part.

	@create_trias_at_end boolean: (optional)Create trias at end of the starting part of the component
	(instead of rigid body line elements).

	@create_trias_at_start boolean: (optional)Create trias at start of the ending part of the component
	(instead of rigid body line elements).

	@is_frozen boolean: (optional)Freeze/unfreeze component.

	@dyna_cross_sect_dist float: (optional)The Cross Section Distance of the component. It is measured approximately 
	from the Starting point of the component and across its centerline.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltSetComponentPoints(SEATBELT, COMPONENT, NODES):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function sets the path points of a specific seatbelt component.
	The nodes that will be added are named according the PREFIX_NAME parameter and their index.


	@SEATBELT: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@COMPONENT: Name or Index of the Component.

	@NODES: Matrix of nodes that will be used as path points.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatBeltSetParameters(seatbelt, create_contact, contact_id, disable_parts2wrap, auto_recreate):

	"""

	This function is deprecated. Use the ASeatbelt object instead.
	
	This function performs the setup of the general creation parameters for a predefined seatbelt entity.


	@seatbelt object: Name or ID of SeatBelt Entity or the SeatBelt Entity.

	@create_contact boolean: (optional)Flag for creating a contact entity

	@contact_id object: (optional)The predefined contact that will be updated after the creation
	of seatbelt. If it is not set and the CREATE_CONTACT
	flag is not zero, a default contact will be created.

	@disable_parts2wrap boolean: (optional)Flag for disabling parts2wrap item of a seatbelt entity.
	If it is equal to True then the function will run on visible parts.

	@auto_recreate boolean: (optional)Flag for auto-recreating the seatbelt after dummy articulation.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SectionForcePlaneEnts(section_force):

	"""

	This function gathers all entities that are intersected from the plane of a section 
	force output entity (DATABASE_CROSS_SECTION_PLANE for Ls-Dyna, SECF for Pam-Crash).


	@section_force object: A section force entity.

	@returns object: Returns a list that contains the intersected entities.

	"""

def SelectEntitiesList(deck, types, available_entities, multi, initial_entities):

	"""

	Shows the ansa help list that coresponds to ENTITY_TYPES in order to select one entity.
	If ENTITY_TYPES matrix has only one type and this is one of the following: TABLED, TABLEM, TABLES1, TABLEST, TABDMP1
	then the ansa tables window is shown instead.


	@deck constant: The deck constant.

	@types object: A list of types that will be listed.

	@available_entities object: (optional)A reference to an entity or a list with references to entities.
	Only these entities will be available for selection, provided that
	they belong to the defined types. If this option is missing
	then all entities of the defined types will be available for selection.
	Not supported for the types that are available through the ansa tables window.

	@multi boolean: (optional)Set to True for multiple selection list.

	@initial_entities object: (optional)A reference to an entity or a list with references to entities. The entities will appear preselected. If this option is missing then no entities will appear preselected.

	@returns object: Returns the selected entity in case of a single selection list or a list with the selected entities in case of a multiple selection list.

	"""

def SetANSAdefaultsValues(fields, mbcontainer_type):

	"""
	Deprecated since version 22.0.0. Use function BCSettingsSetValues instead.

	Function is obsolete. Use BCSettingsSetValues() instead.


	@fields object: A dictionary with keys the ANSA defaults keywords and values the
	new default values.

	@mbcontainer_type string: (optional)If this argument is provided:
	- fields that can be customized per
	container will be modified for this container
	type only (i.e. Output Parameters).
	- for fields that cannot be customized per
	container, their global default value will be 
	modified . 
	
	Accepted values are:
	"ANSA_SUBSYSTEM",
	"ANSA_SIMULATION_MODEL",
	"ANSA_LOADCASE",
	"ANSA_SIMULATION_RUN"

	@returns integer: Returns 0 on success and 1 on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 22.0.0. Use function BCSettingsSetValues instead.", DeprecationWarning)

def SetConfigurationIncludes(include_config, includes, load_option, incomplete_unload):

	"""

	Sets includes to includes configuration.


	@include_config object: A refernce to an include configuration object.

	@includes object: A list of includes to add to the cofiguration.

	@load_option integer: 1, to update the include configuration.
	2, to reload the include configuration.
	Please note that this option renders all objects to entities invalid, 
	including those to configurations and includes.

	@incomplete_unload boolean: (optional)If set to True, information is returned in case of an Include 
	that failed to unload.

	@returns object: If incomplete_unload argument is not specified, or "incomplete_unload = False" is given as argument,
	the function returns 1 on sucess and 0 on error.
	If the argument "incomplete_unload = True", the function returns an object with two variables:
	a) success (integer: 0 on failure, 1 on success)
	b) incomplete_entities (list of includes that failed to unload).

	"""

def SetCrossSectionsSettings(fields):

	"""

	Set or change values of Cross Sections' global parameters.


	@fields object: A dictionary with pairs of labels - values: (parameter name, set value).
	Recognizable parameter names and set values are:
	"Transparent Plane" --> [0 | 1]
	"Transparency" --> integer value between 0 and 100
	"Cross curves resolution" --> float value
	"Automatically Update After Every Run" --> [0 | 1]
	"Calculate offsets and orientation of beams" --> [0 | 1]
	"Boundary elements accumulation factor" --> integer value between -20 and 20
	
	"<result> visibility" --> [0 | 1], (<result>: any Cross Section result)
	"<result> format" --> ["Default" | "Float" | "Scientific"], (<result>: any Cross Section result)
	"<result> decimal digits" --> integer value between 0 and 6, (<result>: any Cross Section result)
	
	"Extracted type" --> ["PBAR", "BEAM_SECTION", "Nastran PBAR" | "PBEAM", "BEAM_TAPER_SECTION", "Nastran PBEAM"]
	"Assign values based on" --> ["X-Y" | "1-2"]
	"Segments' distortion angle limit" --> float value
	"Segments' thickness mode" --> ["Initial" | "Adapted to beam property stiffness"]
	"Restrictions" --> ["Version < 2013.1" | "Version >= 2013.1"]
	"POINT start id" --> integer value
	"SET3 start id" --> integer value
	
	"Enable similarity" --> [0 | 1]
	"Similarity mode" --> ["Geometry" | "Results"]
	"factor(%)" --> float value between 0. and 100.
	"tol geom" --> float value
	"tol thick" --> float value
	"tol E" --> float value
	"tol n" --> float value
	"<result> tolerance" --> float value, (<result>: any Cross Section result)
	
	"Assume nonhomogeneous if E differs more than" --> float value
	"Definition of reference E, v" --> ["user_selection" | "specify"]
	"Eref" --> float value
	"vref" --> float value

	@returns integer: Returns zero on success, non zero on error.

	"""

def SetCurrentAnsaModel(model):

	"""

	This function sets the current ansa model. Different databases can be opened and handled
	in Ansa in separate model instances, but only one instance can be current at any single moment.
	All ansa functionality will run on the current model. The function should only be used in combination 
	with the following functions:SetCurrentAnsaModel(), GetCurrentAnsaModel(), DestroyAnsaModel().


	@model object: The model object to be set as current.

	@returns integer: Returns 0 if the model has been successfully set as current.
	Otherwise, 1 is returned.

	"""

def SetCurrentDeck(deck):

	"""

	The SetCurrentDeck function will change the current ANSA deck.


	@deck integer: The current deck constant.

	@returns integer: Returns the integer of the previous ANSA 'current deck'.

	"""

def SetCurrentEntity(entity, current, deck):

	"""

	Sets the current entity.


	@entity object: In order to set an object as current, entity is a 
	reference to that object.
	In order to remove an object of a particular type
	from current, entity is a string  with "ansa keyword" 
	of the type to be removed from current.

	@current object: (optional)This argument controls if the object
	will be set as current or will be removed from 
	current, if possible. 
	In order to set an object as current, do not pass 
	current as argument.
	In order to remove an object of a particular type 
	from current, pass current = None as argument.

	@deck integer: (optional)The deck which the entity argument belongs to.
	Can be used only to remove an object of a particular 
	type from current.
	Should be used to specify "ansa keyword" that exists 
	in more than one decks (e.g. CONTROL, see Example).

	@returns integer: Returns 1 on failure, 0 on success.

	"""

def SetCurrentMenu(menuName):

	"""

	Switches from the current menu to the specified one.


	@menuName string: The menu name. Accepted values are 'TOPO', 'MESH', 'VOLUME MESH', 
	'MORPH', 'HEXA BLOCK', 'CROSS' or 'KINETICS'.

	@returns integer: Returns 1 on successful menu switch, or 0 otherwise.

	"""

def SetCurvesResolution(resolution, curves):

	"""

	Sets the given resolution to the curves.


	@resolution float: The resolution that will be applied to the curves.

	@curves object: A list of curves.
	If None, the resolution will be applied to the whole database.

	@returns integer: Returns 0 if None is given as the curves argument, otherwise 1.

	"""

def SetEdgesRightOrder(m):

	"""

	Sorts input morphing edges in order to form a sequence of consecutive edges.


	@m object: A list that contains the input morphing edges that we want to sort in order to form 
	a sequence of consecutive morphing edges. Input morphing edges are regarded to 
	be able to form a sequence of consecutive morphing edges.

	@returns object: Returns a list with the sorted morphing edges.
	In case of failure, returns 0.

	"""

def SetEntityAttributeToSet(set, entities, attribute):

	"""

	Changes the value that an entity's attribute has in a set.


	@set object: A reference to a set that already contains the ENTITY.

	@entities object: A reference to an entity or a list with references to entities.
	If ENTITY is 0, the attribute's value is changed in every entity that 
	belongs to the defined SET.

	@attribute object: A dictionary with the following possible pair:
	"Oriented": "SPOS", "SNEG" or " ".
	"Output as": "PART_IO" or "PART" for properties and
	"BOX_SHELL", "BOX_SOLID", "BOX_SLDIO" or "BOX" for boxes.
	"Output Face as": "Solidfacets" or "Shells"

	@returns integer: Returns 1 on success. Throws an exception on error.

	"""

def SetEntityCardValues(deck, entity, fields, items, debug):

	"""

	Sets or changes values of an entity, by using its Edit Card.


	@deck integer: The deck constant.

	@entity object: The ANSA entity to set the values to.

	@fields object: A dictionary with keys the name of the ANSA card 
	labels and values the desired card field values.
	The fields dictionary you can also use as a pair:
	__table_curves: Curves willing to insert into a table.
	__table_values: The Rate values that will be used for the above curves.

	@items object: (optional)A pair of lists, one that contains curves and another that contains x values.
	Only for use with TABLE entities
	(e.g. [ [curve1, curve2, ...], [x1, x2, ...] ])

	@debug constant: (optional)If debug is set to ansa.constants.REPORT_ALL returns a tuple that has two items:
	        an integer that values 0 on success, non zero on error
	and     a dictionary that holds any errors / warnings found. This dictionary has as keys the fields that were used upon calling the function and lead to errors / warnings. The data for each field is a dictionary with two keys:
	                'type' that holds the words 'error' or 'warning' as data.
	                'message' that holds the error message generated by this field.
	                
	If debug is ansa.constants.REPORT_SILENCE returns a tuple that has two items:
	        an integer that values 0 on success, non zero on error and an empty dictionary
	
	If not given ony an integer will be returned.

	@returns object: When debug argument is not given: Returns 0 on success, non zero on error.
	
	If debug argument is given: Returns a tuple with an integer as before and a dictionary with errors.

	"""

def SetEntityId(entity, id, force, respect_frozen):

	"""

	Assign a new ID to the entity.


	@entity object: A reference to an entity.

	@id integer: The new id to be assigned.

	@force boolean: (optional)False: if the new_id is already reserved by an entity of the
	same type the function will not be executed.
	True: if the new_id is already reserved by an entity of the
	same type then the entity with the requested new id will take a new id
	and the function will be executed.

	@respect_frozen boolean: (optional)False: Ignore if the entity has a frozen id, or if new_id is frozen.
	The function will be executed.
	True: if entity has a frozen id, or if new_id is frozen
	the execution of the function will be stopped.

	@returns integer: Returns 1 if the new id has been assigned to the entity successfully, 0 otherwise.

	"""

def SetEntityPart(ent, part):

	"""

	This function assigns one or more entities to a specific part. It can also be used to assign a part to a group.


	@ent object: An entity or a list of entities to be assigned.

	@part object: The part entity to transfer ent into.
	None argument is also accepted for the following kinds of entities: 
	GEBs, RESULTs_MAPPERs, INVERSE FORMINGs, SPCs, AIRBAGs, MOTIONs,
	DEFINE_HEX_SPOTWELD_ASSEMBLY, DISPLAY MODELs, Nastran PEM entities
	(TRMCPLs, ACPEMCPLs), Nastran Thermal BCs (QVECT etc), CONNECTIONs.

	@returns integer: Returns 1 on success, or 0 on failure.

	"""

def SetEntityVisibilityValues(deck, fields):

	"""

	This function enables/disables the corresponding the visibility flags of the database browser
	When status equals "enable" or "on" the visibility flag is turned on,
	othewise the visibility flag is turned off.
	The name is the exact match of the string located inside the brackets () on the
	title bar of the entity's EDIT card.


	@deck integer: The deck.

	@fields object: (optional)A dictionary with key-value pairs the visibilty flags and the "on"/"off" switches.

	@returns integer: Returns 1 on success or 0 on error.

	"""

def SetGeneralComment(text):

	"""

	This function sets a string text as a General Comment.
	If a comment already exists, it will be replaced.


	@text string: The general comment text.

	@returns integer: Always returns 1.

	"""

def SetIncludeFileInDM(filename, module_id, deck_name, st_version_conflict, entity_representation, entity_name, entity_version):

	"""
	Deprecated since version 17.0.0. Use function AddIncludeFile instead.

	This function adds a new file in DM, under the includes directory, based on the arguments provided. The file
	specified by the string variable 'file_path' will be copied in DM, under a directory structure which will be created
	based on the string variables 'module_id', 'deck' and a number of optional ones, which can be set to define
	more accurately the save path. Varlen is the list of optional (argument name,value) pairs.


	@filename string: The include's filename.

	@module_id string: The module id of the include file.

	@deck_name string: A string specifying the deck, i.e. constants.

	@st_version_conflict string: (optional)Defines the action to be taken in case another entry with the 
	characteristis defined above, has already been added in DM. 
	In such a case you can decide either to create a new study version
	by setting the variable to 'NEW_ST_VERSION' or overwite the 
	existing file in DM by setting the variable to 'OVERWRITE'.

	@entity_representation string: (optional)Defines the representation name to be used during the building of the 
	DM directory structure where the new file will be added. If it is not set, 
	the default representation 'common' will be used.

	@entity_name string: (optional)Defines the name to be assigned to new file to be created in DM. If this 
	is not set, the name will be extracted from the string variable 'file_path'. 
	The file_path's last section will be assigned as name. If this also fails,
	then the file will be assigned the default name 'Default_DM_Name'.

	@entity_version string: (optional)Defines the version name to be used during the building of the DM directory
	structure where the new file will be added. If it is not set, the default
	version 'A1' will be used.

	@returns integer: Returns 0 if the file has been successfully added in the DM and 1 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function AddIncludeFile instead.", DeprecationWarning)

def SetIncludesInDM(includes, st_version_option):

	"""
	Deprecated since version 17.0.0. Use function AddIncludes instead.

	This function adds new files in DM, under the includes directory, based on the DM field values of the 
	specified include entities, provided in matrix includes. For each of the include entities, the file specified
	in the field 'FullPathName' will be copied in DM, under a directory structure which will be created based
	on the include's corresponding DM values. Varlen is the list of optional (argument name,value) pairs.


	@includes object: An include entity or a list of include entities.

	@st_version_option string: (optional)Defines the action to be taken in case another entry with the
	attributes defined above, has already been added in DM.
	In such a case you can decide either to create a new study version
	by setting the variable to 'NEW_ST_VERSION',
	overwite the existing file in DM by setting the variable
	to 'OVERWRITE', or skip the specific include by setting the variable
	to "SKIP". The default value is 'NEW_ST_VERSION'.

	@returns integer: Returns 0 if the files have been successfully added in DM and 1 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function AddIncludes instead.", DeprecationWarning)

def SetLoadCurveData(CURVE, VALUES):

	"""

	Sets the data values of an existing load curve.


	@CURVE object: The load curve entity whose data will be set.

	@VALUES object: Values can be a list with lists of x,y pairs of data.
	It can also be a text file path.

	@returns integer: Returns 1 on success or 0 otherwise.

	"""

def SetOrderedAttributeOfSet(SET, ordered_option):

	"""

	This function changes the status of the set's ordered attribute.


	@SET: A reference to a set.

	@ordered_option: Can be "YES" or "NO".

	@returns integer: Returns 0 if SET is not a valid reference, or 1 otherwise.

	"""

def SetStarFormat(star_format):

	"""

	This function sets the active STAR format.


	@star_format: "STAR-CD" or "STAR-CCM+".

	@returns integer: Returns 1 in all cases.

	"""

def SetStatusOfNumberingRules(activate, do_subrules, rules):

	"""

	This function activates or deactivates numbering rules.
	If no argument is defined, all the existing rules are activated, otherwise only the selected ones.


	@activate boolean: Set to True to activate rules or False to deactivate them.

	@do_subrules boolean: If set to True, then if a general rule is selected, all subrules 
	will follow the status of the general rule.

	@rules object: (optional)A list of references to numbering rules to be activated/deactivated.
	If no arguments are defined, the function sets as active or inactive, 
	all the existing numbering rules.

	@returns integer: Always returns 1.

	"""

def SetTypesToCompareSettingsValues(key, fields):

	"""

	Sets or changes values of parameters concerning the 'Compare Settings' window 
	in Compare process (not 'Advanced' options).


	@key string: A string describing the parameters' full name in tree view, 
	e.g., "GEOMETRY (PARTS)::PROPERTY::PSHELL".

	@fields object: (optional)A list or a dictionary that holds a pair of the "compare" command 
	with its value (On/Off, True/False)

	@returns integer: Returns 0 on success, non-zero otherwise.

	"""

def SetViewAngles(f_key, rot_x, rot_y, rot_z, coord_id):

	"""

	The SetViewAngles function sets the Graphics view screen to the defined angles's values.


	@f_key string: (optional)The function key.

	@rot_x float: (optional)The around X-axis(roll) rotation angle.

	@rot_y float: (optional)The around Y-axis(pitch) rotation angle.

	@rot_z float: (optional)The around Z-axis(yaw) rotation angle.

	@coord_id object: (optional)The coordinate system in order to align the view 
	based on a local coordinate system.

	@returns integer: Returns 0 on error, or 1 on success.

	"""

def SetViewButton(fields):

	"""

	This function enables/disables/sets the corresponding visibility flag to the value inputted.
	When the value equals "on"/"off", the view flag is turned on/off. The name of the visibility flag
	to set is the name of the buttton as seen inside the pulldown menu or the tooltip of it.


	@fields object: A dictionary with a pair of visibility flags and 'on'/'off'

	@returns integer: Always returns 1.

	"""

def SetZoom(trans):

	"""

	This function sets the Graphic window minimum and maximum limits and the rotation center point of it.


	@trans object: A list of 9 values in the form [xmin, ymin, zmin, xmax, ymax, zmax, rtcn_x, rtcn_y, rtcn_z].

	@returns integer: Returns 1 on success and 0 on error.

	"""

def ShrinkSurfs(faces, per_face):

	"""

	Shrinks the surfaces of the input faces.


	@faces object: (optional)A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	If no faces are given, the function shrinks the surfaces of the "visible" faces.

	@per_face boolean: (optional)If True surface will shrink per face, else surface will shrink until the limits 
	of the lying faces.
	(Default: False)

	@returns integer: Returns 1 on success and 0 on error.

	"""

def SizeBoxCylindrical(curve, rad1, rad2, max_length_surface, max_length_volume, auto_sort):

	"""

	Script function for creating cylindrical sizeboxes.


	@curve object: A list of CURVEs or POINTs.

	@rad1 float: The inner cylindrical radius.

	@rad2 float: The outer cylindical radius.

	@max_length_surface float: The maximum surface length.

	@max_length_volume float: The maximum volume length

	@auto_sort boolean: (optional)True (default): The order of objects in curve list will be reorder 
	in order to have an improved result.
	False: The order of objects in curve list will be preserved.

	@returns object: It returns the object of the created cylindrical sizebox for success, or 0 for failure.

	"""

def SizeBoxDelete(sizebox):

	"""

	Script function for deleting a sizebox.


	@sizebox object: A list with the sizeboxe elements that will be deleted.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def SizeBoxInsert(pnt1, pnt2, edg, par):

	"""

	Script function for the insertion of control points.


	@pnt1 object: .The first control point to get direction

	@pnt2 object: The second control point to get direction.

	@edg object: The sizebox edge element to insert the point.

	@par string: A value between 0-1 or ~distance should be given (ie: "0.5" or "~111").

	@returns integer: Returns the new id on success, 0 on failure.

	"""

def SizeBoxJoin(hatch, flag):

	"""

	Script function for joining a sizebox hatch.


	@hatch object: The sizebox hatch element that will be joined.

	@flag integer: 0 or 1, whether to leave or delete the points that are left from joined hatches.

	@returns integer: 1 on success, 0 on failure.

	"""

def SizeBoxMinMax(coordinate,min_xyz,max_xyz,max_length_surface,max_length_volume):

	"""

	Script function for creating a sizebox from two points (min, max).


	@coordinate object: The coordinate element (None for global).

	@min_xyz object: A list containing the minimum coordinates [xmin, ymin, zmin].

	@max_xyz object: A list containing the maximum coordinates [xmax, ymax, zmax].

	@max_length_surface float: The maximum surface length.

	@max_length_volume float: The maximum volume length.

	@returns object: Returns a reference to the newly created size box entity on success.

	"""

def SizeBoxOrtho(loaded_elements, db_or_visible, coordinate, min_flag, max_length_surface, max_length_volume):

	"""

	Script function for the creation of a sizebox


	@loaded_elements object: (optional)A list with elements from which the Sizebox will be created.

	@db_or_visible string: (optional)Can have values 'DB' or 'Visible' in order to take the elements 
	from which the Sizebox will be created.

	@coordinate object: (optional)A local coordinate object instead of the global.

	@min_flag boolean: (optional)True or False for minimum volume morph.

	@max_length_surface float: (optional)The value for the maximum surface length.

	@max_length_volume float: (optional)The value for the maximum volume length.

	@returns object: Returns a reference to the newly created size box entity on success.

	"""

def SizeBoxSplit(pnt):

	"""

	Script function for splitting sizebox(es).


	@pnt object: The sizebox point element, where the box(es) will be cut.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def Skin(apply_thickness, new_pid, offset_type, ok_to_offset, max_thickness, delete, entities, similarity, treat_chamfers, new_part, part, property, deviation, larger_side, fail_on_all_errors):

	"""

	This function turns the solid description of a thin part into shell description by isolating 
	the smaller or larger area side of the solid description.


	@apply_thickness boolean: If True, applies new thickness.

	@new_pid boolean: If True, creates new property.

	@offset_type integer: 1, produces geometry offset.
	2, produces link offset using distance.
	3, produces link offset using thickness.

	@ok_to_offset boolean: If False, keeps the smaller or larger area side (NO offset).
	If True, offset skin.

	@max_thickness float: The maximum thickness of solids.

	@delete boolean: If True, deletes original Faces.

	@entities object: (optional)If nothing passed, it works on visible faces, 
	else it works on the faces entities contained in a list.

	@similarity integer: (optional)Similarity percentage is a minimum similarity factor between the two 
	opposite skin side areas.
	Range [50, 90]

	@treat_chamfers boolean: (optional)If True, tries to trim or extend middle surface in order to take into account chamfers.

	@new_part boolean: (optional)If True, creates new ANSAPART.

	@part object: (optional)A reference to an ANSAPART. When given, all the resulting faces will 
	be placed in this part (and the option "new_part" is then disregarded).

	@property object: (optional)A reference to a Property. When given, all the resulting faces will be 
	placed in this property (and the option "new_pid" is then disregarded).

	@deviation float: (optional)This is the thickness difference threshold for stable thickness parts.

	@larger_side boolean: (optional)When TRUE it selects the solid side that is larger in area.
	Default value is FALSE.

	@fail_on_all_errors boolean: (optional)When TRUE, this function works as before (default behavior is fail on all errors found).
	When FALSE, this function returns a dictionary with keys "skinned", "check", "failed".
	Each key contains as value a list of dictionaries about every part in this category.
	Those dictionaries have keys "skin" and "orig" and value a list of faces.
	User should always check skin result under "check" category and manually
	delete "orig" faces if middle surface is acceptable.

	@returns integer: Returns the number of solid descriptions that have been turned into shell descriptions
	and 0 if an error occurs.

	"""

def StoreLockView(name, overwrite):

	"""

	This function accepts as an argument a string with the name of the model view to store.
	The current visible model is stored. It also supports a variable number of arguments
	in order to ovewrite an existing model view.
	
	The stored view affects the dislayed entities along with the view angle and their
	zoom position.


	@name string: The name of the lock view to store.

	@overwrite boolean: (optional)Set to True in order to overwrite an existing model view.
	(Default: False)

	@returns object: Returns a reference to the created view on success and None if the view already exists.

	"""

def SurfsCoons(faces_array, join_perimeters, respect_user_selection, ret_ents):

	"""

	This script function creates a new multi-patch Surface, using the Coons interpolation principal. 
	It takes a list of cons or curves, puts in line the elements of table (automatically) and then creates faces.


	@faces_array object: A list with entities ( CONS, CURVES, ELEMENTS, CONNECTION CURVES etc ). 
	Based on these entities, the function will create the new faces.

	@join_perimeters boolean: (optional)A boolean value to join the perimeters of the created faces or not.

	@respect_user_selection boolean: (optional)If set to True, then the order of entries in faces_array will be respected 
	and thus Cons will be created in that order.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns the number of the created faces on success, otherwise 0.
	If ret_ents=True it will return a list with the created entities, 
	or None if no entities are created.

	"""

def SurfsUntrim(elem, del_old_faces, convert_links):

	"""

	This script function defines a new face that is bounded at the parametric limits of the surface.


	@elem object: A list of face objects.

	@del_old_faces integer: Denotes if the old faces will be deleted or not.

	@convert_links boolean: (optional)If set to True, the linked faces will be converted, else they will be deleted.
	(Default: False)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def SymmetryPart(parts, transformation_mode, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function performs transform > symmetry on parts based on the arguments provided.
	The list PARTS contains the part/s to be transformed.


	@parts object: An part entity or a list of parts entities.

	@transformation_mode string: Supported values are "COPY", "MOVE" or "LINK".

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. 
	Used only in COPY and LINK cases. Supported values are 
	0, to denote that offset will not take place and any 
	other integer to denote the actual property offset value. Alternatively,
	you can set the value to "auto_offset", so that pids will be automatically
	offset by ANSA or "current_property" to assign the current PID to all
	the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module
	Id for the production of the new Module Id. It is taken into account
	only when GROUP OPTIONS is set to "NEW PART". It is ignored in any
	other case.

	@set_mode string: (optional)Determine the options regarding the set, if any, in which the new entities
	will belong. Supported values are "COPY", "EXPAND" and "NONE". It is taken 
	into account only when TRANSFORMATION MODE is "COPY" or "LINK".
	(Default: "NONE")

	@connectivity integer: (optional)Determines whether the connecting nodes between moved and unmoved entities
	should be released or not. It is valid only when TRANSFORMATION MODE is
	"MOVE". Supported values are 1 and 0.
	(Default: 0)

	@ext_connectors boolean: (optional)Determines whether external connections and/or connectors will be 
	included in case the TRANSFORMATION MODE is "MOVE".
	Supported values are "INCLUDE" and
	"EXCLUDE". 
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def SynchronizeMaterials(properties, source_deck, target_decks, delete_released, update_from_mdb, return_synced_materials, sync_defined_flag):

	"""

	This function synchronizes materials used from PROPERTIES, from SOURCE_DECK to TARGET_DECKS.


	@properties object: A property object or a list of property objects 
	that will be synchronized.

	@source_deck integer: The deck from which the synchronization will be
	performed.

	@target_decks integer: The decks to which the synchronization will be performed.
	Zero value means all decks except source_decks.

	@delete_released boolean: (optional)A flag that indicates if released materials will be
	deleted or not, after synchronization.

	@update_from_mdb boolean: (optional)A flag that indicates if synchronized materials will be
	updated from Material Database.

	@return_synced_materials boolean: (optional)A flag that indicates whether the materials synced
	will be returned in a list.

	@sync_defined_flag boolean: (optional)A flag that indicates whether the flag "DEFINED" of synchronized
	materials will be updated according to the source material or not.

	@returns object: Returns 0 or a list of the synced materials if the returned_synced_materials flag is set to True.

	"""

def FillHoleGeom(diameter,create_point, convert_to_connection_point, create_curve, only_internal_perimeters, always_produce_new_faces, set_id, pid_id):

	"""

	This function fills holes on Faces. The holes can be of any shape. Such internal openings 
	can be inputs individually, or automatically among the visible ones if they fall below a 
	user specified diameter value. There is the option to create automatically 3D Curves, 
	Points or Connection Points of the removed holes, in order to mark their shape and position 
	for reference, fill only internal perimeters, always produce new faces, add new faces to a 
	SET and/or PID.


	@diameter anything: (object/float) A CONS or a list of CONS that belong to internal 
	openings, which are automatically identified, or a float diameter 
	of the holes to be filled, that fall below that value.
	The function automatically identifies whether the input is an object 
	or a float.

	@create_point boolean: Defines whether to create a 3d point at the center of the
	hole or not.

	@convert_to_connection_point boolean: Defines whether to convert the 3d point to connection point
	or not.

	@create_curve boolean: Defines whether to create a 3d curve at the hole edges or
	not.

	@only_internal_perimeters boolean: (optional)Defines whether to fill only internal perimeters  or not.
	(Default: False)

	@always_produce_new_faces boolean: (optional)Defines whether to always create new faces 
	or to allow expanding the existing ones.
	(Default: False)

	@set_id integer: (optional)Defines the SET where the result faces will be added to.

	@pid_id integer: (optional)Defines the PID where the result faces will be added to.

	@returns integer: Returns 0 in all cases.

	"""

def Topo(cons, paste_with_frozen_faces, paste_different_pids):

	"""

	This script function automatically creates topological conditions between input adjacent CONS. 
	This function uses as criteria the tolerance values that are set by the TOLERANCES(SETTINGS) function. 
	In case that no input cons is given, topology performs on visible cons.


	@cons object: (optional)A cons, a list of cons, a string with value 'visible' or a string with value 
	'all' . If it is called with 'visible', it works with all the visible cons. 
	If it is called with 'all', it works with all the cons.
	In case that no input cons is given, topology performs on visible cons.

	@paste_with_frozen_faces boolean: (optional)If True, topology performs on CONS that belong to frozen faces.

	@paste_different_pids boolean: (optional)If True, topology performs on CONS that belong to different PIDs.
	(Default: True)

	@returns integer: Returns 0 if no CONS is input for topology, otherwise 1.

	"""

def TopoHotPoints(entities):

	"""

	The function creates topological conditions among the input hot points. The operation is 
	performed according to the hotpoints tolerance defined in Settings > Tolerances.
	It must be noted that in case of linked faces, all the hot points belonging to the geometric 
	and the linked faces must be input to the function.


	@entities object: A list of faces, cons, parts, properties or sets (array or a single entry).
	All hot points will be collected and topological conditions will be created.

	@returns integer: Returns the number of topological conditions created.
	If no topological conditions are created, 0 is returned.

	"""

def TransformCreate(name, entity):

	"""

	The TransformCreate function creates an empty transformation. The parameters 
	of the function are pairs of arguments. The first argument of the pair 
	is a string, holding the parameter name, while the second is the value of 
	the parameter.


	@name string: (optional)The name of the new transformation.

	@entity object: (optional)A set or include or submodel, where the transformation will be applied.

	@returns object: Returns a reference to the newly created transformation, on success.

	"""

def TransformDeleteLine(transform, position):

	"""

	The TransformDeleteLine function deletes the line in position "position" in transformation "transform".


	@transform object: The existing transformation entity from which the line will be deleted.

	@position integer: The index in the transformation list, that specifies which line will be deleted.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def TransformInfo(entity, labels, deck):

	"""

	TransformInfo function gets values from an already existing transformation.


	@entity object: The transformation entity to extract info from.

	@labels object: A list of labels to retrieve info from.
	Available labels given  are:
	"id"
	"name"
	"entity"
	"entities"
	"matrix"

	@deck integer: (optional)The deck for which, when using the "matrix" parameter inside the "labels" argument,
	the returned strings will match.
	Notice: If left blank the strings correspond to the labels of the fields of 
	the transformation edit card of the Nastran deck in ANSA.

	@returns object: On success, the function returns a dictionary with keys the labels given and values:
	Key             Type                    
	"id":           integer         The id of the transformation.
	"name":         string          The name of the transformation.
	"entity":       object          The set/include on which the transformation is applied.
	"entities":     object          A list of the sets/includes on which the transformation is applied
	"matrix":       object          A list with the lines of the transformation. Each item of the list is
	                                a dictionary. For each dictionary, there is an entry with key "type" and
	                                data the name of the sub-transformation entry. It also contains all
	                                key/value pairs, where the keys correspond to the edit card and are in
	                                synch with TransformInsertLine function.
	                                
	On failure, it returns None.

	"""

def TransformInsertLine(entity, fields, position):

	"""

	The TransformInsertLine function inserts new transformation lines in a "transform" entity, after the position "position".


	@entity object: The "transform" entity, where the new lines will be added.

	@fields object: Can be a list, tuple or dictionary.
	In case of dictionary, it must contain pairs of 'field name' - 'value'.
	In case of list or tuple, it must contain consecutive entry pairs of 'field name' - 'value'.
	If a deck is specified as one of the entries as in the examples below then the labels
	of that deck are considered. In any other case the labels of the field of the
	transformation edit card of the Nastran deck are expected.
	(All cases are covered in the example.)

	@position integer: (optional)Index in transformation matrix, that specifies after which existing line, 
	the new line will be inserted. If the index given is out of the range of the
	existing lines the new line is appended.
	(In case of zero, the new line is inserted first.)

	@returns integer: Returns 0 on success, 1 on failure.

	"""

def TransformMatrix4x3(input_function_type, pid_offset, group_offset, input_sets_type, matrix, entities, draw_results, keep_connectivity):

	"""

	This function transforms entities according to the input given by the arguments.


	@input_function_type string: The first argument determines whether the entities will be 
	copied or moved. the values are "COPY", "MOVE" and "LINK" respectively.

	@pid_offset object: Determines if the pids of the entities will be offset or not. 
	Use 0 to denote that offset will not take place and any other integer to denote 
	the exact offset value. Use string value "AUTO_OFFSET" in order to assign
	different PID to every entity, by letting ANSA offset the original PID.

	@group_offset string: It is used only in COPY and LINK mode. 
	The available options are: "SAME PART", "NEW PART" and "NEW INSTANCE".

	@input_sets_type string: Controls the way sets will be treated. It is used only in COPY and LINK mode.
	The available options are: "COPY", "EXPAND" and "NONE".

	@matrix object: The 4x3 transformation matrix.

	@entities object: A list containing references to the entities to be copied/moved. 
	The list can contain different types of entities (ex. sets, properties, 
	materials, parts, groups, FE-Model entities).

	@draw_results boolean: (optional)Defines whether the results should be redrawn at the end of the transformation. 
	Values can be True or False. (Default: False)

	@keep_connectivity boolean: (optional)Determine whether the connecting nodes between moved and unmoved entities 
	should be released or not in a MOVE transformation. Value can be True or False. 
	(Default: False)

	@returns integer: Returns 0 on success and 1 on error.

	"""

def TransformModify(entity, name, transforms, abaqus_type):

	"""

	The TransformModify function modifies the parameters "params" of the already
	existing transformation "transform".


	@entity object: The transformation to be modified.

	@name string: (optional)The name of the transformation.

	@transforms object: (optional)Set or include or submodel, where the transformation is applied.

	@abaqus_type string: (optional)Valid values [rectangular | option], for Abaqus NMAP.

	@returns object: Returns a reference to the transformation that is modified, on success.
	Otherwise, 0 is returned.

	"""

def TransformModifyLine(entity, fields, position):

	"""

	The TransformInsertLine function modifies the specified values of the
	line in position "position", in the transformation entity.


	@entity object: The transformation entity, whose line will be modified.

	@fields object: Can be a list, tuple or dictionary.
	In case of dictionary, it must contain pairs of 'field name' - 'value'.
	In case of list or tuple, it must contain consecutive entry pairs of 'field name' - 'value'.
	If a deck is specified as one of the entries as in the examples below then the labels
	of that deck are considered. In any other case the labels of the field of the
	transformation edit card of the Nastran deck are expected.
	(All field name cases are covered in the example of TransformInsertLine)

	@position integer: The line's position index in the transformation entity,  to modify its values.
	The defined index must not be negative, less than zero and out of range.

	@returns integer: Returns 0 on success, 1 on failure.

	"""

def TransformPart(parts, transformation_mode, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function transforms parts in a way that immitates the GUI function Model Browser>Parts>Actions>Transform>>Copy/Move/Link>Transform. The transformation takes place between two coordinate systems (defined implicitly via the x1-6, y1-6, z1-6 arguments of the function). It is a simultaneous translation and rotation procedure.


	@parts object: A list of part entities to be transformed.

	@transformation_mode string: Supported values are "COPY", "MOVE" and "LINK"

	@x1 float: The x coordinate of the origin point.

	@y1 float: The y coordinate of the origin point.

	@z1 float: The z coordinate of the origin point.

	@x2 float: The x coordinate of the 1st origin vector (i.e of the unit vector that defines the x direction of the origin coordinate system).

	@y2 float: The y coordinate of the 1st origin vector.

	@z2 float: The z coordinate of the 1st origin vector.

	@x3 float: The x coordinate of the 2nd origin vector (i.e of the unit vector that, together with the 1st origin vector, defines the xy plane of the origin coordinate system).

	@y3 float: The y coordinate of the 2nd origin vector.

	@z3 float: The z coordinate of the 2nd origin vector.

	@x4 float: The x coordinate of the destination point.

	@y4 float: The y coordinate of the destination point.

	@z4 float: The z coordinate of the destination point.

	@x5 float: The x coordinate of the 1st destination vector (i.e of the unit vector that defines the x direction of the destination coordinate system).

	@y5 float: The y coordinate of the 1st destination vector.

	@z5 float: The z coordinate of the 1st destination vector.

	@x6 float: The x coordinate of the 2nd destination vector (i.e of the unit vector that, together with the 1st destination vector, defines the xy plane of the destination coordinate system).

	@y6 float: The y coordinate of the 2nd destination vector.

	@z6 float: The z coordinate of the 2nd destination vector.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. Used only in COPY and
	LINK cases. Supported values are 0, to denote that offset will not take
	place and any other integer to denote the actual property offset value.
	Alternatively, you can set the value to "auto_offset", so that pids will be
	automatically offset by ANSA or "current_property" to assign the current
	PID to all the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source Module Id. It is
	taken into account only when used with the 'NEW PART' option. It is ignored in
	and other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE". Default value is NONE
	Used only in COPY and LINK cases.

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved 
	entities should be released or not in a MOVE transformation.
	Supported values are True and False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: False)

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def TranslateDummy(KIN_JOINT, TRVEC_X, TRVEC_Y, TRVEC_Z, MODE):

	"""

	This function performs a translation of the whole Dummy base. There are
	two tranlation modes. By target point, the dummy will move such that its H-Point
	matches the new target point and by vector, which actually is the Translation Vector.


	@KIN_JOINT object: The name or the ID of the H-Point Kinematic Joint, 
	or the H-Point Kinematic Joint.

	@TRVEC_X float: The x-coordinate of the target point, 
	or V[0] of the translation vector.

	@TRVEC_Y float: The y-coordinate of the target point, 
	or V[1] of the translation vector.

	@TRVEC_Z float: The z-coordinate of the target point, 
	or V[2] of the translation vector.

	@MODE integer: 0 or 1 (by Vector or by Target Point respectively).

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def TranslatePart(parts, transformation_mode, x, y, z, pid_offset, group_options, part_suffix, set_mode, connectivity, ext_connectors, copy_groups_hierarchy, existing_part):

	"""

	This function translates parts based on the arguments provided. The list PARTS 
	contains the part/s to be translated.


	@parts object: A list of part entities to be translated.

	@transformation_mode string: Supported values are "COPY", "MOVE" and "LINK".

	@x float: The x translational distance.

	@y float: The y translational distance.

	@z float: The z translational distance.

	@pid_offset integer: (optional)Determines if the parts' pids will be offset or not. 
	Used only in COPY and LINK cases. Supported values are 
	0, to denote that offset will not take place and any 
	other integer to denote the actual property offset value. Alternatively,
	you can set the value to "auto_offset", so that pids will be automatically
	offset by ANSA or "current_property" to assign the current PID to all
	the new entities. (Default: 0)

	@group_options string: (optional)Supported values are "NEW PART", "CURRENT PART", "EXISTING PART",
	"SAME PART" and "NEW INSTANCE". The option NEW INSTANCE is valid
	only when used with option COPY. The "existing_part" argument should be
	specified if "EXISTING PART" is used. Used only in COPY and LINK cases.
	(Default: "NEW INSTANCE")

	@part_suffix string: (optional)Determines the alphanumeric string to be appended at the source 
	Module Id. It is taken into account only when used with the 
	'NEW PART' option. It is ignored in and other case.

	@set_mode string: (optional)Supported values are "COPY", "EXPAND" and "NONE". 
	Used only in COPY and LINK cases.
	(Default: "NONE")

	@connectivity boolean: (optional)Determines whether the connecting nodes between moved and unmoved 
	entities should be released or not in a MOVE transformation. 
	Supported values are True and False.
	(Default: False)

	@ext_connectors string: (optional)Determines whether external connections and connectors will be included in a
	MOVE transformation. Supported values are "INCLUDE" and "EXCLUDE".
	(Default: "EXCLUDE")

	@copy_groups_hierarchy boolean: (optional)Determines whether the exact groups hierarchy will be created for the new
	entities, in the case of COPY.
	(Default: "False")

	@existing_part object: (optional)A part which already exist in the model. It is mandatory
	when "EXISTING PART" value is set to "group_offset"
	argument.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def TypesInCategory(deck, category):

	"""

	The TypesInCategory function returns a list with all the ANSA types which belong to the given
	category. This list can then be used as an argument for subsequent calls to other
	functions such as CollectEntities (see Example). The returned list's contents vary
	among decks.


	@deck integer: The deck for which to extract the category types.

	@category object: The given category. Can take one of the following:
	"__PROPERTIES__"
	"__MATERIALS__"
	"__ELEMENTS__"
	"__CONNECTIONS__"
	"__VISIBLE__"
	"__ALL_ENTITIES__",
	"__MBCONTAINERS__",
	"__COORD_SYSTEMS__"
	"__CONNECTION_TEMPLATES__"

	@returns object: Returns a list containing all the ANSA types that belong to the specified category of the specified deck.
	In case of an error None is returned.

	"""

def UnFreezeVisibleFaces():

	"""

	Unfreezes the visible faces.


	@returns integer: Always returns 1.

	"""

def UnlinkPart(parts):

	"""

	The function unlinks an array of selected parts/groups.


	@parts object: A list of parts.

	@returns integer: Returns 0 if the parts/groups have been unlinked successfully.
	Otherwise 1 is returned.

	"""

def UnloadInclude(include):

	"""

	Unloads include from current configuration (makes a current configuration of none exists), 
	has the same effect as removing include from current configuration through includes manager 
	and updating the configuration.


	@include object: The include object to be unloaded.

	@returns integer: Returns 0 on success, 1 on error.

	"""

def ZoomAll():

	"""

	This function zooms all the model on the screen. 
	Equivalent to the F9 function key.


	@returns integer: Returns 1 on success or 0 on error.

	"""

def ZoomIn():

	"""

	This function zooms in the model on the screen.
	Zoom in takes place according to the center of the screen.


	@returns integer: Returns 1 on success or 0 on error.

	"""

def ZoomInEnt(entities):

	"""

	Performs the zoom in selected entities


	@entities object: A reference to an entity or a list containing references 
	to perform the zoom command. These references can be 
	references to entities, properties, materials or parts.

	@returns integer: Returns 1 on success or 0 on error.

	"""

def ZoomOut():

	"""

	This function zooms out the model on the screen.
	Zoom out takes place according to the center of the screen.


	@returns integer: Returns 1 on success or 0 on error.

	"""

def F11SolidsOptionsSet(criterion_name, criterion_status, criterion_calculation, criterion_value):

	"""

	This function enables/disables/changes the corresponding visibility flag/pulldown menu and values. 
	The True value turns the visibility flag on, and the False value turns the visibility flag off. Pulldown menus values change setting the exact pulldown menu option instead.


	@criterion_name string: The criterion name of the F11 window to enable, disable or change.

	@criterion_status boolean: True or False, to set the criterion active or inactive.

	@criterion_calculation string: A string to set the respective criterion's calculation field.
	An empty string should be given if you don't care for this argument.
	Using a string that doesn't match any of the criterion calculation names, will return an error.

	@criterion_value float: A float to set the respective criterion's value field.

	@returns integer: Returns 1 on success or 0 on error.

	"""

def HotPointsProject(x, y, z, entities, remesh):

	"""

	This function takes the coordinates of a hot point and projects it to any element of a list.


	@x float: The x coordinate of a hot point.

	@y float: The y coordinate of a hot point.

	@z float: The z coordinate of a hot point.

	@entities object: A list of entities: FACES, CURVES, CONS, LINEAR ELEMENTS,
	where the hot point will be projected.

	@remesh boolean: (optional)In case of CONS, if set to True, the Macro Area will be remeshed, else not.

	@returns integer: Returns the number of succeeded projections, otherwise 0.

	"""

def ReleaseCons(cons):

	"""

	This script function releases CONS, based on the 'cons' arguments.


	@cons object: (optional)Accepted values: a CONS, a list of CONS, a string with value 'visible' or 
	a string with value 'all'.
	If it is called with 'visible', it works with all the visible CONS.
	If it is called with 'all', it works with all the CONS in database.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def SetNodeTolerance(arg):

	"""

	This function changes the hot points matching distance of database.


	@arg float: A variable for resolution.

	@returns integer: Returns 1 on success.

	"""

def SetCurveTolerance(arg):

	"""

	This function changes the CONS matching distance of db.


	@arg float: A variable for resolution.

	@returns integer: Returns 1 on success.

	"""

def ShellResult(matrix_shells):

	"""

	Function for acquiring the result for each shell.
	It takes as input a list of shells and returns a list in the shell - result format.


	@matrix_shells object: A list of shell objects.

	@returns integer: Returns a list with the shell (position 0) and result (position 1).

	"""

def ShortestPath(entities, begin, end, mode):

	"""

	This function finds the shortest path between two entities on a given container of entities.


	@entities object: A list of entities to find the shortest path on.

	@begin object: A list of entities where the paths begin.

	@end object: A list of entities where the paths end, corresponding to the "begin" list.

	@mode string: (optional)One of "distance" or "counter".
	Depicts if the shortest path is based on distance or on the smaller counter 
	of "entities" between "begin" and "end".

	@returns object: Returns None when something has failed, or a list on success.
	The list has minimum length between 'start' and 'end', each entity of the list is a list of entities.
	That entity-list is empty when the pair of 'start' and 'end' entities does not have a common path.
	If the pair has shortest path, then the entity-list always has at least two elements (the first element 
	is the entity from 'start'-list and the last element is the entity of the 'end'-list).

	"""

def ImportCSVFileCreatePoints(filename):

	"""

	This function takes a full path of a csv file and creates points from the file.


	@filename string: The full path of the csv file.

	@returns object: Returns a list with the created points on success, otherwise return 0.

	"""

def GetActiveNastranHeader():

	"""

	Gets the active Nastran header.


	@returns object: Returns a reference to the active Nastran header, or None if it doesn't exist.

	"""

def SetActiveNastranHeader(header):

	"""

	Sets the active nastran header.


	@header object: A nastran header object.

	@returns integer: Always returns 0.

	"""

def SetNastranHeaderText(header, text):

	"""

	Sets the text in nastran header.


	@header object: The header object.

	@text string: The text to set.

	@returns integer: Always returns 0.

	"""

def GetNastranHeaderText(header):

	"""

	Gets the text of nastran header.


	@header object: The nastran header object.

	@returns string: Returns the text of the given nastran header.

	"""

def OutputSimulayt(filename, mode, write_material_attributes, write_material_orientation):

	"""

	This function outputs a SIMULAYT Layup file.


	@filename string: The path of the output file.

	@mode string: (optional)Accepted values: "all", "model" or "visible".
	(Default: what set at the last execution)

	@write_material_attributes string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@write_material_orientation string: (optional)Control the output of 209/220 lines. Accepted values: "on" or "off".
	(Default: "off")

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def FacesNewExistingSurface(entities_list, face, join_perimeters, respect_user_selection, ret_ents):

	"""

	This function creates a new face on a existing surface.


	@entities_list object: A list with entities (CONS, CURVES, ELEMENTS, CONNECTIONS, CURVES etc).
	Based on these entities the new face will be created.

	@face object: The entity (FACE) with the existing surface.

	@join_perimeters boolean: (optional)If set to True, the perimeters will be joined.

	@respect_user_selection boolean: (optional)If set to True, then the order of entries in faces_array will be 
	respected and thus Cons will be created in that order.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 1 on success, otherwise 0.
	If ret_ents=True it will return a list with the created entities or None if no entities are created.

	"""

def SurfaceExtend(face, extend_value, untrim, delete_original_face):

	"""

	This function creates a new surface, and optionally a face, as a tangential extension of an existing surface.


	@face object: The face object to be extended.

	@extend_value object: The value for extension.

	@untrim boolean: (optional)Flag to create or not a new face.

	@delete_original_face boolean: (optional)Flag to delete or not the original face.

	@returns object: Returns the existing face or the created face on success, otherwise None.

	"""

def HotPointsIntersect(entity1, entity2, extend, paste_hot_points):

	"""

	This function defines nodes or Hot Points as the intersection between two 3D-curves, CONS or Working Planes. 
	It also defines a Weld Spot as the intersection of a CONS or 3D-curve with a Face.


	@entity1 object: The first entity for the intersection.

	@entity2 object: The second entity for the intersection.

	@extend boolean: (optional)This flag indicates whether the intersections will be made in extend situation.

	@paste_hot_points boolean: (optional)This flag pastes hot points of two separate cons.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def CalcShellThetaByVector(element, vector):

	"""

	A function that calculates a shell's theta angle according to a given vector.


	@element object: The shell object.

	@vector object: A list defining a 3d vector.

	@returns float: Returns the Theta Angle (degrees) of the projected vector upon the shell.

	"""

def GetEntityCardValues(deck, entity, fields):

	"""

	Gets values from an entity using its Edit Card. The labels are taken from the fields in the edit card.
	The respective values of these fields are then assigned the entity's parameters.
	
	In addition to the Edit Card labels, this function also recognizes the following strings as labels and returns their values:
	-"__id__" for entity's ID.
	-"__type__" for entity's ANSA type.
	-"__prop__" for entity's property. "__prop__" has no meaning for entities that don't take a property.
	-"MBContainer" for entity's Model Browser Container. "MBContainer" has no meaning for entities that can't be in a Model Browser Container.
	-"__part__" for entity's PART. If an entity takes a PART but doesn't have one, None will be returned.


	@deck integer: The selected deck.

	@entity object: The ANSA entity where the values will be extracted from.

	@fields object: A list of card field labels to extract the values from.

	@returns object: Returns a Dictionary with the requested labels as keys and the retrieved values as the dictionary's values. 
	If the function fails to find the requested fields, the dictionary's value will be empty.

	"""

def Remesh1DElements(elements, target_el_length, distortion_angle, mode, target_num_of_els, divide_each_el_into):

	"""

	Remesh line elements "elems" (beams, bars, etc), so as after remeshing to have the element length
	near to "target_el_length". From the given "elems", groups of continued elements are created, based
	on value "distortion_angle".


	@elements object: A line element object or a list of line elements.

	@target_el_length float: (optional)Required for "Target element length" mode. The target element length.

	@distortion_angle float: (optional)Required for "Target element length" and "Target number of elements" mode. The angle limit value of normal vectors of two line elements. If the angle is greater than this value, these two elements will belong to separate branches. Accepted values:
	0 deg < distortion_angle < 90 deg

	@mode string: (optional)The re-mesh method used. Accepted values:
	"Target element length"
	"Target number of elements"
	"Divide each element into"
	 If it is omitted  the "Target element length" mode is applied.

	@target_num_of_els integer: (optional)Required for "Target number of elements" mode. The target number of elements.

	@divide_each_el_into integer: (optional)Required for "Divide each element into" mode. The number of elements that the initial element will be divided into.

	@returns integer: Always returns 0.

	"""

def CreateInvoluteCurve(center, vector1, vector2, radius, start_angle, end_angle, part, cross_curve):

	"""

	This function creates an involute curve.


	@center object: A list with the 3 coordinates of the center point for curve.

	@vector1 object: A list with the 3 coordinates of the first vector.

	@vector2 object: A list with the 3 coordinates of the second vector.

	@radius float: The radius for the curve.

	@start_angle float: The start angle of the curve.

	@end_angle float: The end angle of the curve.

	@part object: (optional)The part of the created curve.

	@cross_curve object: (optional)If True and a CROSS SECTION exists, a cross involute 
	curve will be created.

	@returns object: Returns the created curve on success, otherwise None.

	"""

def CreateEpicycloidCurve(center, vector1, vector2, radius_basic, radius, start_angle, end_angle, part, cross_curve):

	"""

	This function creates a list of epicycloid curves.


	@center object: A list with 3 objects the coordinates of center point for curve.

	@vector1 object: A list with 3 objects the coordinates of first vector.

	@vector2 object: A list with 3 objects the coordinates of second vector.

	@radius_basic float: The basic radius for the curve.

	@radius float: The radius for the curve.

	@start_angle float: The start angle of the curve.

	@end_angle float: The end angle of the curve.

	@part object: (optional)The part of the created curve.

	@cross_curve object: (optional)If True and a CROSS SECTION exists, a cross epicycloid curve will be created.

	@returns object: Returns a list containing the created curves on success, otherwise None.

	"""

def CreateEllipseCurve(center,vector1,vector2,radius_x, radius_y, start_angle, end_angle, part, cross_curve):

	"""

	This function creates an ellipse curve.


	@center object: A list with 3 objects the coordinates of center point for curve.

	@vector1 object: A list with 3 objects the coordinates of first vector.

	@vector2 object: A list with 3 objects the coordinates of second vector.

	@radius_x float: The radius for x direction for the curve.

	@radius_y float: The radius for y direction fro the curve.

	@start_angle float: The start angle of the curve.

	@end_angle float: The end angle of the curve.

	@part object: (optional)The part of the created curve.

	@cross_curve boolean: (optional)If True and a CROSS SECTION exists a cross ellipse curve will be created.

	@returns object: Returns the created ellipse curve on success, otherwise None.

	"""

def SurfaceExtrudeHelical(entity, center, vector, angle_deg, length, ratio, anti_clockwise, part, property):

	"""

	This function creates a helical surface.


	@entity object: The guidline for the surface.

	@center object: A list with 3 objects the coordinates of center point for the surface.

	@vector object: A list with 3 objects the coordinates of a vector.

	@angle_deg float: The angle in degrees.

	@length float: The length of the created face.

	@ratio float: Start/End radius ratio (r1/r2).

	@anti_clockwise integer: The direction: -1 anti-clockwise, 1 clockwise.

	@part object: (optional)The part for the created face.

	@property object: (optional)The property for the created face.

	@returns object: Returns a reference to the newly created face object on success, otherwise None.

	"""

def InputTheseus(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, read_only, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_kinetics, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, advanced_options, comment_input_attributes, perform_material_synchronization, comment_input_ids, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id):

	"""
	Deprecated since version 19.0.1.

	InputTheseus inputs a Theseus model in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@new_include string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window",
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@advanced_options string: (optional)Defines the entity types to be read.
	dr, Header, Nodes, Elements, Properties, Materials, Sets, Contacts.
	When this argument is defined, only the provided types will be read.
	When dr exists in the beginning of the string, the provided types will not be read.
	If left blank everything will be read.

	@comment_input_attributes string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off".
	If left blank, the current ANSA defaults value is assumed.

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns object: Returns 1 on success and 0 on failure.
	If the "new_include" argument is enabled, it returns a reference to a new INCLUDE 
	containing all the newly imported entities or None on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 19.0.1.", DeprecationWarning)

def KineticsKinTableCreate(name, interpolation, items):

	"""
	Deprecated since version 16.0.1. Use function TableCreate instead.

	Creates a KIN_TABLE entity and sets the table values.


	@name string: Name of the KIN_TABLE.

	@interpolation string: Type of interpolation. Can be 'linear', 'cubic' or 'akima'.

	@items object: A list with the table data.

	@returns object: Returns the created KIN_TABLE on success, otherwise 0.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function TableCreate instead.", DeprecationWarning)

def KineticsKinTableGetData(entity):

	"""
	Deprecated since version 16.0.1. Use function TableGetData instead.

	Retrieves tha data from a KIN_TABLE as a list.


	@entity object: Reference to a KIN_TABLE.

	@returns object: Returns the KIN_TABLE data as a list on success, or an empty list otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function TableGetData instead.", DeprecationWarning)

def KineticsKinTableSetData(entity, items):

	"""
	Deprecated since version 16.0.1. Use function TableSetData instead.

	Sets the data of a KIN_TABLE. Will overwrite the data using the new list.


	@entity object: A reference to a KIN_TABLE.

	@items object: A list with the table data.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function TableSetData instead.", DeprecationWarning)

def KineticsResultsWriteToXML(kin_result, file_name):

	"""
	Deprecated since version 16.0.1. Use function ResultsWriteToXML instead.

	Exports (writes) the contents of a KIN_RESULTS entity to an XML file.


	@kin_result object: A kinetics result solver.

	@file_name string: The filepath for the output.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function ResultsWriteToXML instead.", DeprecationWarning)

def KineticsResultsGetData(res_entity, kin_entity):

	"""
	Deprecated since version 16.0.1. Use function ResultsGetData instead.

	Gets the results for a kinetics entity from a KIN_RESULTS entity.


	@res_entity object: The KIN_RESULTS entity.

	@kin_entity object: The entity for which we need the results.

	@returns object: Returns a dictionary with the results of the selected entity.
	If no results are found, the dictionary will be empty.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function ResultsGetData instead.", DeprecationWarning)

def GetCurrentCompareAdvancedFilterConfiguration():

	"""

	This function returns the name of the advanced filter configuration currently used by compare.


	@returns string: Returns the name of the currently used advanced filter configuration of compare.

	"""

def SetCurrentCompareAdvancedFilterConfiguration(name):

	"""

	This function changes the name of the advanced filter configuration currently used by compare.


	@name string: The name of the filter that will be set as current.

	@returns integer: Always returns 1.

	"""

def SaveFileAsJT(filename, outputmode, units, output_spotwelds, diameter):

	"""

	This function saves all or visible entities to a CAD file with extension ".jt".


	@filename string: The whole path to the file.

	@outputmode string: (optional)"VISIBLE": Outputs a single part with the visible entities. 
	"ALL": Outputs hierarchy and all entities.

	@units string: (optional)The units of the resulted ".jt" file (METERS, MILLIMETERS, INCHES, FEET).

	@output_spotwelds integer: (optional)Set to 1, to export Spotwelds.
	Set to 0, to not export spotwelds (default).
	Works only if outputmode is ALL.

	@diameter float: (optional)The diameter of the geometrical sphere that represents the spotweld.
	Works only if outputmode is ALL.
	(Default: 10.0)

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def InputMoldflow(filename, nodes_id, elements_id, properties_id, model_action, length):

	"""

	This function inputs a Moldflow input file.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@length string: (optional)Accepted values: "m" or "as-is". "m" option states that the input file 
	is in meters and converts it to the current ANSA units. "as-is" option 
	states that no conversion will occur.
	(Default: "m")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def SaveAs(filename, version, silent):

	"""

	This function saves the current file in ANSA with a new filename.


	@filename string: The name of the new file with which the current 
	file is going to be saved must contain the full 
	pathname.

	@version string: (optional)Valid values are 'v19' and 'previous'.

	@silent boolean: (optional)If set to True the active database path will not 
	be updated to the pathname given. False by default.
	The version argument takes precedence and overrides the silent argument.

	@returns integer: Returns 0 if the file has been successfully saved and 1 otherwise.

	"""

def NewShellsOnLine(radius, length, line_elements, property, rbody_type, dofs, shells_along_line, part, ret_ents):

	"""

	This function creates shell elements in the form of a cylinder around line elements that can 
	describe their actual radial dimension.
	The shells can be connected with the selected line elements by user-specified constraints.


	@radius float: The radius of cylinder description.

	@length float: The length of shell elements to be created.

	@line_elements object: A list of the instances of the line elements that will be wrapped.

	@property object: An instance of the property that will be assigned to the created shell elements.

	@rbody_type string: (optional)Type of element-constrain that connects the created shell elements to 
	the line elements.
	Default keyword: "" (no connection between shells and line elements). 
	Valid keywords:
	""
	"RBE2","RBODY","RIGID""CERIG","MPC_RIGID"
	"RBE3","INTERP.","COUPLING","RBE3","MPC_WLSCON" 
	"CBAR","BEAM"
	"CBEAM"
	"CROD","TRUSS","LINK","FLA2" 
	"RBAR"
	"CGAP","GAP"
	"TRIAS"

	@dofs string: (optional)Active pin flags of the connecting elements.
	Default value depents of the RbodyType.

	@shells_along_line boolean: (optional)If set to True, the length of the generated shells will be controlled by the 
	line elements along direction of the second.

	@part object: (optional)Part instance where the generated elements will be placed.
	By default the generated elements are placed to the part that contains 
	each sequence of line elements.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 0 on success and 1 on failure.
	If ret_ents=True it will return a list with the created entities, 
	or None if no entities are created.

	"""

def LoadDistribute(deck,type,entities,load_info,force_app_point,weight,pressure_dist,radius):

	"""

	This function generates a load that is distributed over the provided entities. 
	The load can be either force or pressure.


	@deck integer: The loads will be generated according to the provided deck.

	@type integer: Flag controling the distribution type.
	Valid values:[1-3]
	Performance for force distribution:
	type = 1 -> Distribution based on edge length.
	type = 2 -> Distribution based on shell area
	type = 3 -> Distribution based on mass of the elements
	Performance for pressure distribution:
	type = 1 -> Force/Moment equilibrium.
	type = 2 -> Constant pressure
	type = 3 -> Hertz-like contact

	@entities object: Entities to perfom the distribution.
	(1d elements, shells, solids, edges, solidfacets, sets)

	@load_info object: A dictionary that holds the loading data indexed with the deck's keywords.
	Dictionary keywords for force distribution:
	NASTRAN - FORCE:
	{"F","N1","N2","N3","Load_Set"}
	LS-DYNA - LOAD: 
	{"LF","DOF","CID","LCID"}
	PAM-CRASH - CONLO
	{"SCAF","DOF","IFRAM","LCUR","ISENS","CLOAD"}
	ABAQUS - CLOAD:
	{"Magnitude","DOF","CID","Amplitude","Step"}
	RADIOSS - CLOAD:
	{"SCALE","DOF","ISKEQ","IFUNC","ISENS"}
	ANSYS - F:
	{"VALUE","DOF","TABLE"}
	PERMAS - CONLOAD:
	{"F","N1","N2","N3","LPAT"}
	Dictionary keywords for force distribution:
	NASTRAN - PLOAD4:
	{"Magnitude","DOF","CID","SID"} 
	ABAQUS - DLOAD:
	{"Magnitude","DOF","CID","Amplitude","Step"}
	ANSYS - SFE:
	{"Magnitude","DOF","CID"}
	PERMAS - DISLOAD PRESS:
	{"Magnitude","DOF","LPAT"}
	Keywords that stand for the magnitude of the load (F,LF,SCAF etc), N1, N2, N3 and 
	CLOAD accept variable of double type.
	The variable of the "DOF" keyword is int type and the accepted values are:
	1 -> Load on x direction.
	2 -> Load on y direction.
	3 -> Load on z direction.
	All other keyword variables can be assigned with either the id of the 
	desired entity (int) or the instance of the entity (object).

	@force_app_point object: (optional)Grid where the resultant force is applied.
	By default, it is assumed that the force is applied on the CoG of 
	the provided entities.

	@weight string: (optional)Optional additional weight factor F(G).

	@pressure_dist string: (optional)Handles whether a pressure or force distribution will be applied.
	Accepted values:
	"force" -> Force loads will be applied.
	"pressure" -> Pressure loads will be applied.

	@radius float: (optional)Used for pressure distribution for the case of Hertz-like contact.
	Pressure loads will be applied within the area of the provided radius 
	having center the provided coordinate system.
	The area is circular when DOF = 3 (similar to Hertzian circular contact) and 
	rectangular in the other cases (similar to Hertzian line contact)

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def CheckAndFixPenetrationCS(fix_factor):

	"""

	Checks the existence of thickness penetrations cross sections.


	@fix_factor float: The fix factor that will be used for fixing.
	Must be greater than 1.

	@returns integer: Returns 0 if no penetration were found and 1 if they were found and fixed.

	"""

def FacesFlangeWidth(entities, extend_value, delete_old_flange):

	"""

	This function defines new flange Faces of uniform width based on existing Faces.


	@entities object: A list with the selected cons.

	@extend_value float: The extend value for the new flange.

	@delete_old_flange boolean: (optional)Flag to delete or not the old flange.

	@returns object: Returns the created faces in a list, otherwise None.

	"""

def CurvesMiddle(entities1, entities2, respect_user_sel, part, connect_curves):

	"""

	This function defines a chain of 3D-curves along the middle distance of two string of 3D-curves or CONS.


	@entities1 object: A list with entities for the first chain.

	@entities2 object: A list with entities for the second chain.

	@respect_user_sel boolean: (optional)True for respect user selection, false for 
	auto ordering the entities for both chains.

	@part object: (optional)The part for the created curves.

	@connect_curves object: (optional)A list with two float variables defining nodes matching distance 
	in the first place and angle in the second, respectively.
	If list is given then script function will merge the created curves, according 
	to the input values, else curves per segment will be created.

	@returns object: Returns a list with the created curves on successs, otherwise None.

	"""

def SurfacePlane2d(working_plane, point1, point2, part, property):

	"""

	This function defines a bounded plane surface.


	@working_plane object: The working plane where the surface will be build, or it can be a list with 9 floats, 
	that define a temporary working plane.
	The first triple defines the origin point (x1, y1, z1), the second triple defines the 
	vector of the temporary X axis of the working plane (dx1, dy1, dz1) and the third 
	triple defines the temporary Y axis of the working plane (dx2, dy2, dz2).

	@point1 object: The list with the coordinates of the first point (2d).

	@point2 object: The list with the coordinates of the second point (2d).

	@part object: (optional)The part that will be used for the new surface.

	@property object: (optional)The property that will be used for the new suface.

	@returns object: Returns a reference to the newly created face object on success, otherwise None.

	"""

def SurfacePlane3d(working_plane, point1, point2, part, property):

	"""

	This function defines a bounded plane surface.


	@working_plane object: The working plane where the surface will be build, or it can be a list with 9 floats, 
	that define a temporary working plane.
	The first triple defines the origin point (x1, y1, z1), the second triple defines the 
	vector of the temporary X axis of the working plane (dx1, dy1, dz1) and the third 
	triple defines the temporary Y axis of the working plane (dx2, dy2, dz2).

	@point1 object: The list with the coordinates of the first point (3d).

	@point2 object: The list with the coordinates of the second point (3d).

	@part object: (optional)The part that will be used for the new surface.

	@property object: (optional)The property that will be used for the new suface.

	@returns object: Returns a reference to the newly created face object on success, otherwise None.

	"""

def OutputAdamsSolver(filename, mode, adams_name):

	"""

	This function outputs an AdamsSolver file.


	@filename string: The path to the directory to export.

	@mode string: (optional)"all", "model" or "visible".
	The default option is defined in ANSA Defaults.

	@adams_name string: (optional)"on" or "off". Modifies the kinematic entities names 
	according to the adams hierarchy rules.
	The default option is defined in ANSA Defaults.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def SurfaceExtrudeHelicalMulti(entities, center, vector, angle_deg, length, ratio, anti_clockwise, part, property):

	"""

	This function creates helical surfaces.


	@entities object: A list with entities (CONS, CURVES) which are the guidline for the surface.

	@center object: A list with 3 objects the coordinates of center point for the surface.

	@vector object: A list with 3 objects the coordinates of a vector.

	@angle_deg float: The angle in degrees.

	@length float: The length of the created face.

	@ratio float: Start/End radius ratio (r1/r2).

	@anti_clockwise integer: The direction: -1 anti-clockwise, 1 clockwise.

	@part object: (optional)The part for the created face.

	@property object: (optional)The property for the created face.

	@returns object: Returns a list containing references to the newly created faces on success, otherwise None.

	"""

def ExecuteCheckTemplate(template, report_level, make_current):

	"""

	This function executes a check template on the currently loaded base.


	@template string: The name of the template to execute as a string.

	@report_level integer: (optional)One of the following values:
	-0, to show results only if an error or warning occured.
	-1, to always show results.
	-2, o never show results.
	This options is only relevant in GUI mode, and all issues are 
	reported in Checks Manager.

	@make_current boolean: (optional)When True, it is ensured that the Checks Manager displays the results of the given template. To be used in scripts where more than one templates are executed.

	@returns object: Returns an object named "_CheckTemplateExecutionResults" that contains the following
	attributes:
	
	Attributes
	warnings: (integer) The number of checks that finished with warnings.
	errors: (integer) The number of checks that finished with errors.
	ok: (integer) The number of checks that finished with no errors or warnings.
	reports: (list) A list of CheckReport objects (see ansa.base.CheckReport for more information).

	"""

def LaminateReport(deck, filename, laminates, layer_info, create_vrml, create_stl, create_png, png_view, layer_curves, curves_on_geometry_plane, curves_group, stl_format, stl_offset_pos, stl_reduce_trias, create_iges):

	"""

	Generates a report for the given Laminates and save it in filename. PNG, STL, VRML and IGES files are 
	saved in the same directory as the HTML file. It works for both Shell and Solid Laminates.


	@deck constant: The deck constant.

	@filename string: The filename to write the output HTML file along with its images.

	@laminates object: A list with laminate properties.

	@layer_info boolean: (optional)If set to True, enables Layer Info.

	@create_vrml boolean: (optional)If set to True, create VRML files.

	@create_stl boolean: (optional)If set to True, create STL files.

	@create_png boolean: (optional)If set to True, create PNG files.

	@png_view string: (optional)Valid options are 'auto', 'manual' and 'current'.
	(Default: 'auto')

	@layer_curves boolean: (optional)If set to True, create curves on layers.

	@curves_on_geometry_plane boolean: (optional)If set to True, create curves on geometry plane.

	@curves_group object: (optional)A reference to a group.

	@stl_format string: (optional)Valid options are 'ascii' and 'binary'.
	(Default: 'ascii')

	@stl_offset_pos string: (optional)Decide position of layers in generated report.
	Valid options are 'geometry' and 'offset'.
	(Default: 'offset')

	@stl_reduce_trias boolean: (optional)Decide whether trias reduction is performed or not.
	(Default: True)

	@create_iges boolean: (optional)Create IGES files containing the curves on layers.
	(Default: False)

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def OutputMoldflow(filename, mode, mesh_type):

	"""

	OutputMoldflow outputs a Moldflow *.udm format file like the File>Output>MOLDFLOW functionality.
	It supports variable number of arguments.


	@filename string: The name of the output file.
	It must include the full path to the file.

	@mode string: "all", "model" or "visible".
	(Default: what set at the last execution)

	@mesh_type string: "solid 3d", "midplane" or "dual domain.
	(Default: "solid 3d")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def CopySpecificMatsFromMdbToMlist(deck, mode, materials, ovewrite_names, overwrite_comments, overwrite_colors, copy_unmatched, ret_ents):

	"""

	This function copies/updates model materials using the Material Database.


	@deck constant: The deck constant.

	@mode string: One of: "update_by_ids", "update_by_names" or "copy".

	@materials object: A Material Entity or a list including Material Entities.

	@ovewrite_names boolean: (optional)A flag to overwrite names.

	@overwrite_comments boolean: (optional)A flag to overwrite comments.

	@overwrite_colors boolean: (optional)A flag to overwrite colors.

	@copy_unmatched boolean: (optional)A flag to copy unmatched materials.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: It returns the number of the materials successfuly copied.
	If ret_ents=True it will return a list with the copied materials, 
	or None if no materials were copied.

	"""

def SurfaceSweep(entities1, entities2, reverse_first_selection, reverse_second_selection, ref_point, join_perimeters, respect_user_selection, part, property):

	"""

	This function defines a new multi-patch surface.


	@entities1 object: A list with the entities for sweep.

	@entities2 object: A list with entities used for guideline.

	@reverse_first_selection boolean: (optional)A flag for reverse 1st selection.

	@reverse_second_selection boolean: (optional)A flag for reverse 2nd selection.

	@ref_point object: (optional)A list with th x,y,z coordinates of a reference point.

	@join_perimeters boolean: (optional)Aa flag to join perimeters of created face(s).

	@respect_user_selection boolean: (optional)If set to True, then the order of entries in entities1, 2 will be respected 
	and thus Face(s) will be created in that order.

	@part object: (optional)The part for the created face(s).

	@property object: (optional)The property for the created faces(s).

	@returns object: Returns a list containing references to the newly created faces on success, otherwise None.

	"""

def MergeMedinaComponents(components, master_component):

	"""

	Will merge any components inside the components list to the master_component.


	@components object: A list containing the components to be merged.

	@master_component object: The component to which the components will be merged.

	@returns object: Always returns None.

	"""

def GenerateMpcIQuads(surfaces, ret_ents):

	"""

	This function will generate any MpcIQuads as they are described by the Isurfaces data found the surfaces list.


	@surfaces object: (optional)A list of surface objects.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns None.
	If ret_ents=True it will return a list with the created entities, 
	or None if no entities are created.

	"""

def EraseMpcIQuads(surfaces):

	"""

	This function will erase any MpcIQuads as they are described by the Isurfaces data found the surfaces list.


	@surfaces object: (optional)A list of surface objects.

	@returns object: Always returns None.

	"""

def SurfaceGlide(entities1, entities2, reverse_first_selection, reverse_second_selection, ref_point, join_perimeters, respect_user_selection, part, property):

	"""

	This function defines a new multi-patch surface.


	@entities1 object: A list with the entities for sweep.

	@entities2 object: A list with entities used for guideline.

	@reverse_first_selection boolean: (optional)A flag for reverse 1st selection.

	@reverse_second_selection boolean: (optional)A flag for reverse 2nd selection.

	@ref_point object: (optional)A list with the x,y,z coordinates of a reference point.

	@join_perimeters boolean: (optional)A flag to join perimeters of created face(s).

	@respect_user_selection boolean: (optional)If set to True, then the order of entries in entities1, 2 will be respected 
	and thus Face(s) will be created in that order.

	@part object: (optional)The part for the created face(s).

	@property object: (optional)The property for the created faces(s).

	@returns object: Returns a list containing references to the newly created faces, otherwise None.

	"""

def ActivateConfiguration(configuration, reapply_swcnctn, reapply_gebs, deactivate_entities):

	"""

	This function sets a configuration as active. It is the equivalent of "Activate" in the configurations window inside the Part Manager. 
	The arguments of this function correspond to the check boxes of the wizard that pops up, when the configuration to activate 
	affects Spotweld connections(reapply_swcnctn), GEBs(reapply_gebs) or other entities in general(deactivate_entities).


	@configuration object: The configuration to set active.

	@reapply_swcnctn integer: 0 or 1. Set this to 1, if you wish to reapply
	the affected spotweld connections related to this 
	configuration, once it has been activated.

	@reapply_gebs integer: 0 or 1. Set this to 1, if you wish to reapply 
	the affected GEBs related to this configuration, 
	once it has been activated.

	@deactivate_entities integer: 0 or 1. Set this to 1, if you wish to deactivate 
	the affected entities related to this 
	configuration, once it has been activated.

	@returns integer: Returns 1 if the configuration has been set active successfully, 0 on failure.

	"""

def GetActiveConfiguration():

	"""

	This function returns the configuration that is currently active in the model, 
	or 0 if no configuration exists, or no configuration is currently active.


	@returns object: Returns the configuration that is currently active in the model, 
	or 0 if no configuration exists, or no configuration is currently active.

	"""

def ClearActiveConfiguration():

	"""

	This function is the equivalent of "ClearActive" in configuration window of Part Manager.
	After this function is executed, no configuration is active in the model.


	@returns integer: Always returns 1.

	"""

def DeactivateConfiguration(configuration):

	"""

	This function deactivates the given configuration, if it is the active one.
	It is the equivalent of pressing "Deactivate" in the configuration window of the Part Manager.


	@configuration object: The configuration that you wish to deactivate.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def GetAllConfigurations():

	"""

	This function returns all the configurations that exist in the model.


	@returns object: Returns a list with all the configurations that exist in the model, or 0 if there are none of them.

	"""

def SurfaceRevolution(entities, guideline, respect_user_selection, always_break, deg_min, deg_max, part, property):

	"""

	This function defines a multi-patch surface of revolution.


	@entities object: A list of entities for the revolution surface.

	@guideline object: A list with two pointers of G_POINTs.

	@respect_user_selection boolean: (optional)If set to True, then the order of entries in entities will be respected and 
	thus Faces will be created in that order.

	@always_break boolean: (optional)If set to True, then the created faces will separate where there are 
	discontinuities on the surface. Else all the entities will create one face.

	@deg_min float: (optional)The minimum numerical input in degrees, defining the boundaries of the 
	created face.

	@deg_max float: (optional)The maximum numerical input in degrees, defining the boundaries of the 
	created face.

	@part object: (optional)The part for the created face.

	@property object: (optional)The property for the created face.

	@returns object: Returns a list containing references to the newly created faces on success, otherwise None.

	"""

def ExtractCuttingCurvesFromPlane(cplane):

	"""

	Extracts section curves of a cutting plane entity.


	@cplane object: A reference to a CUTTING PLANE entity that can be retrieved
	from a previous call to GetEntity.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def Save():

	"""

	This function saves all the changes made at the current file in ANSA.


	@returns integer: Returns 0 on success, 1 on failure.

	"""

def ConsProjectNormal(entities, faces_array, max_distance, split_original, connect_with_faces, nearest_target, delete_faces):

	"""

	This function projects a number of selected 3D-curves, CONS, element edges or line elements 
	on a number of selected Faces, in a direction that is normal to each Face.


	@entities object: The projected entity, a list with the projected entities, a string with
	 value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible entities.
	If it is called with 'all', it works with all the entities.

	@faces_array object: A face, a list of faces, a string with value 'visible' or a string 
	with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@max_distance float: (optional)The maximum allowed projection distance from every point of 
	the curves, if max_dist < 0.
	There is no limitation.

	@split_original boolean: (optional)If set to True, the projection trace intersects with a face perimeter, 
	this inserts a hotpoint at the respective point on the original curve.

	@connect_with_faces boolean: (optional)If set to True, it results in the creation of Faces between the 
	original CONS and their projections. The newly created Faces, 
	will also be returned in a list.

	@nearest_target boolean: (optional)If set to True, the projection will take place on the nearest faces within 
	the range of maximum projection distance and will avoid double projection 
	on opposite positioned faces.
	(Default: False)

	@delete_faces boolean: (optional)If True, if the trace of the projection forms a closed loop inside the target faces (not touching the outer perimeters), faces inside the loop will be deleted.
	(Default: False)

	@returns object: Returns a list containing two lists. The first list contains the newly created CONS.
	The second list contains the newly created faces, if connect_with_faces flag is True, 
	otherwise it is None.

	"""

def ConsProjectUser(entities, faces_array, user_vector, max_distance, split_original, connect_with_faces, nearest_target, delete_faces):

	"""

	This function projects a number of selected 3D-curves, CONS, element edges or line elements 
	on a number of selected Faces, in a direction that the user defines to each Face.


	@entities object: The projected entity, a list with the projected entities, a string with
	 value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible entities.
	If it is called with 'all', it works with all the entities.

	@faces_array object: A face, a list of faces, a string with value 'visible' or a string 
	with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@user_vector object: A list with coordinates for the user defined vector.

	@max_distance float: (optional)The maximum allowed projection distance from every point of 
	the curves, if max_dist < 0.
	There is no limitation.

	@split_original boolean: (optional)If set to True, the projection trace intersects with a face perimeter, 
	this inserts a hotpoint at the respective point on the original curve.

	@connect_with_faces boolean: (optional)If set to True, it results in the creation of Faces between the 
	original CONS and their projections. The newly created Faces, 
	will also be returned in a list.

	@nearest_target boolean: (optional)If set to True, the projection will take place on the nearest faces within 
	the range of maximum projection distance and will avoid double projection 
	on opposite positioned faces.
	(Default: False)

	@delete_faces boolean: (optional)If True, if the trace of the projection forms a closed loop inside the target faces (not touching the outer perimeters), faces inside the loop will be deleted.
	(Default: False)

	@returns object: Returns a list containing two lists. The first list contains the newly created CONS.
	The second list contains the newly created faces, if connect_with_faces flag is True, 
	otherwise it is None.

	"""

def RemoveEmptyPartsGroups():

	"""

	This function removes all the empty Groups and Parts of the file.


	@returns integer: Returns 0 in all cases.

	"""

def SafetyRaster(front_curve, rear_curve, left_curve, right_curve, external_parts, length_x, length_y, paste_tolerance, projection_axis, symmetry_plane, uniform_distribution, points_on_lateral, points_on_side, points_on_curves_at_gaps, delete_tol_points, create_line_elements, starting_point, create_surface):

	"""

	This function creates a raster of target points on quadrilateral areas defined by ANSA curves.
	These points are projected on a geometric or FE surface that is defined in external_parts set.


	@front_curve object: Curve Id, Name or Entity.

	@rear_curve object: Curve Id, Name or Entity.

	@left_curve object: Curve Id, Name or Entity.

	@right_curve object: Curve Id, Name or Entity.

	@external_parts object: Set Id, Name or Entity.

	@length_x float: (optional)Length of raster in X direction (from Front to Rear Curve).
	(Default: 50.0)

	@length_y float: (optional)Length of raster in Y direction (from Left to Right Curve).
	(Default: 50.0)

	@paste_tolerance float: (optional)Distance from curves for excluding target points.
	(Default: 5.0)

	@projection_axis string: (optional)Global projection axis for projecting the target points on surface.
	Options are: 'X', 'Y', 'Z', '-X', '-Y', '-Z'.
	(Default: '-Z')

	@symmetry_plane string: (optional)Global symmetry plane for creating the symmetric points according this.
	Options are: 'XZ', 'YZ', 'XY', 'No Symmetry'.

	@uniform_distribution boolean: (optional)Option for creating a uniform raster on X and Y directions.
	(Default: True)

	@points_on_lateral boolean: (optional)Option for creating target points on front and rear curves.
	(Default: True)

	@points_on_side boolean: (optional)Option for creating target points on left and right curves. 
	(Default: True)

	@points_on_curves_at_gaps boolean: (optional)Option for creating target points on curves even if no projection 
	on the external parts is found. 
	(Default: True)

	@delete_tol_points boolean: (optional)Option for deleting the target points that are excluded due to paste 
	tolerance. 
	(Default: True)

	@create_line_elements boolean: (optional)Option for creating line elements between the target points.
	(Default: False)

	@starting_point string: (optional)Option for selecting the starting point of the Raster. 
	The available options are: 'Center', 'Left Corner', 'Right Corner'.
	The starting point is taken into account only if the symmetry_plane 
	argument is set to 'No Symmetry'.
	(Default: 'Center')

	@create_surface boolean: (optional)Option for creating shell elements from the target points.
	(Default: False)

	@returns object: Returns a list containing references to the newly created target point objects.

	"""

def KineticsKinMotionDefine(entity, along_x, along_y, along_z, about_x, about_y, about_z, function_dx, function_dy, function_dz, function_rx, function_ry, function_rz, disp_ic_dx, disp_ic_dy, disp_ic_dz, disp_ic_rx, disp_ic_ry, disp_ic_rz, vel_ic_dx, vel_ic_dy, vel_ic_dz, vel_ic_rx, vel_ic_ry, vel_ic_rz):

	"""
	Deprecated since version 16.0.1. Use function MotionDefine instead.

	@entity object: A reference to KIN_MOTION entity.

	@along_x string: (optional)One of: 'DISP', 'VEL' or 'ACC', in order to set the x translational 
	motion to prescribed displacement, velocity or acceleration.

	@along_y string: (optional)One of: 'DISP', 'VEL' or 'ACC', in order to set the y translational 
	motion to prescribed displacement, velocity or acceleration.

	@along_z string: (optional)One of: 'DISP', 'VEL' or 'ACC', in order to set the z translational 
	motion to prescribed displacement, velocity or acceleration.

	@about_x string: (optional)One of: 'DISP', 'VEL' or 'ACC', in order to set the x rotational motion to 
	prescribed (rotational) displacement, velocity or acceleration.

	@about_y string: (optional)One of: 'DISP', 'VEL' or 'ACC', in order to set the y rotational motion to 
	prescribed (rotational) displacement, velocity or acceleration.

	@about_z string: (optional)One of: 'DISP', 'VEL' or 'ACC', in order to set the z rotational motion to 
	prescribed (rotational) displacement, velocity or acceleration.

	@function_dx float: (optional)Function for x translational motion.

	@function_dy float: (optional)Function for y translational motion.

	@function_dz float: (optional)Function for x translational motion.

	@function_rx float: (optional)Function for x rotational motion.

	@function_ry float: (optional)Function for y rotational motion.

	@function_rz float: (optional)Function for z rotational motion.

	@disp_ic_dx float: (optional)The x component of the displacement initial condition.

	@disp_ic_dy float: (optional)The y component of the displacement initial condition.

	@disp_ic_dz float: (optional)The z component of the displacement initial condition.

	@disp_ic_rx float: (optional)The x component of the rotational initial condition.

	@disp_ic_ry float: (optional)The y component of the rotational initial condition.

	@disp_ic_rz float: (optional)The z component of the rotational initial condition.

	@vel_ic_dx float: (optional)The x component of the initial translational velocity.

	@vel_ic_dy float: (optional)The y component of the initial translational velocity.

	@vel_ic_dz float: (optional)The z component of the initial translational velocity.

	@vel_ic_rx float: (optional)The x component of the initial rotational velocity.

	@vel_ic_ry float: (optional)The y component of the initial rotational velocity.

	@vel_ic_rz float: (optional)The z component of the initial rotational velocity.

	@returns integer: Returns 1 on success and 0 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function MotionDefine instead.", DeprecationWarning)

def KineticsSimulationSimulatorSettings(tab_type, settings):

	"""
	Deprecated since version 16.0.1. Use class Simulator instead.

	Modifies or sets the various options in the 'Kinetic Options' window. 
	A description of the various options can be found at the tooltips of the 'Kinetic 
	Options' window. 
	Each group of settings has to be set in a different call to this function by 
	setting the 'tab_type' to 'dynamics', 'kinematics', 'contacts', 'IC' or 
	'static'.
	When the name of an option has a blank character, it should be replaced with an 
	undescore and the name lower-cased (for example, "Integrator Type" should 
	become "integrator_type")
	The 'Animation' tab cannot be set using this function.


	@tab_type string: 'dynamics', 'kinematics', 'contacts', 'ic' or 'static'
	refering to tab of Options respectively
	(default: 'dynamics')
	For tab_type='dynamics':
	integrator_type string Select type of Integrator: 'hht-i3'
	(default - no other type at the moment)
	alpha float Coefficient for HHT Integrator
	hmax float Maximum time step size allowed
	hmin float Minimum time step size allowed (hmin<hmax and hmin<hinit)
	hinit float Initial time step size (hinit<hmax)
	tolx float Error tolerance for accelerations
	tolf float Error tolerance for forces
	tolj float Relative tolerance for redundant constraints
	maxiter int Maximum number of iterations allowed
	alimit float Euler angle singularity tolerance [DEG 0-90]
	extrapolation string Select type of Extrapolation:
	'no', 'linear', 'quadratic', 'cubical' or 'modified'
	For tab_type='kinematics':
	hinit float Initial step size
	hmin float Minimum step size allowed (hmin<hinit)
	tolx float Error tolerance for displacements
	tolf float Error tolerance for forces
	tolj float Relative tolerance for redundant constraints
	maxiter int Maximum number of iterations allowed
	alimit float Euler angle singularity tolerance [DEG 0-90]
	linear_search string Method of Line Search: 'cubical', 'linear', 'linear_modified'
	For tab_type='contacts':
	integrator_type string Type of Integrator: 'constant', 'adjustment'
	(if omited constant integrator type is assumed)
	For tab_type='contacts' and integrator_type='constant':
	hinit float Step size allowed
	tolj float Relative tolerance for redundant constraints
	tolf float Error tolerance for forces
	tol_depth float Depth tolerance for collision detection (mm)
	tol_distance float Distance tolerance for contact points clean up (mm)
	max_contact_points int Maximum number of contact points per manifold
	linearcomplementaritysolver string Select type of Linear Complementarity Solver 'JORprox', 'SORprox'
	maxiter int Maximum number of iterations allowed
	atol float Absolute tolerance
	rtol float Relative tolerance
	gtol float Gradient tolerance for spurious convergence
	For tab_type='contacts' and integrator_type='adjustment':
	hmax float Maximum step size allowed
	hmin float Minimum step size allowed
	tolj float Relative tolerance for redundant constraints
	tolf float Error tolerance for forces 
	tol_depth float Depth tolerance for collision detection (mm)
	tol_distance float Distance tolerance for contact points clean up (mm)
	max_contact_points int Maximum number of contact points per manifold
	linearcomplementaritysolver string Type of Linear Complementarity Solver: 'JORprox', 'SORprox'
	maxiter int Maximum number of iterations allowed
	atol float Absolute tolerance
	rtol float Relative tolerance
	gtol float Gradient tolerance for spurious convergence
	nmax int Value of maximium integration order allowed for 
	smooth extrapolation: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21
	s_atol float Absolute tolerance for stepsize adjustement and extrapolation
	s_rtol float Relative tolerance for stepsize adjustement and extrapolation
	For tab_type='ic':
	wi float Weight factor
	maxiter int Max anchor error
	maxerror float Maximum number of iterations allowed
	tolx float Error tolerance for displacements
	tolf float Error tolerance for forces
	linear_search string Method of Linear Search: 'cubical', 'linear', 'linear_modified'
	For tab_type='static': 
	maxiter int Maximum number of iterations allowed
	tolx float Error tolerance for displacements
	tolf float Error tolerance for forces
	stepmax float Maximum step size allowed
	linear_search string Method of Linear Search: 'cubical', 'linear', 'linear_modified'

	@settings: of settings has to be set in different call to this function by

	@returns integer: Returns 1 on all cases.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class Simulator instead.", DeprecationWarning)

def SetMaterialDatabase(DECK, MDB_PATH):

	"""

	Sets the default Material Database path MDB_PATH, for deck DECK.


	@DECK integer: The deck constant.

	@MDB_PATH string: The path of the material database file.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def GetMaterialDatabase(deck,all_paths):

	"""

	Gets the default Material Database paths that are defined in ANSA.defaults and loaded during ANSA start up, for deck.


	@deck integer: The deck constant.

	@all_paths boolean: (optional)True when as a result you want to get multiple Material Databases used as default. If False ( default value) the function returns the first entry.

	@returns string: Returns a string that contains the Material Database path. (if all_paths=False)
	Returns a list that contains the Material Database paths. (if all_paths=True)

	"""

def UpdateMatsFromMDBBy(deck, list_mats, by, ret_ents):

	"""

	This function copies/updates model materials by using the Material Database.


	@deck integer: The deck constant.

	@list_mats object: A Material Entity or a list including Material Entities.

	@by string: Options are: "by_id" or "by_name".

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns the number of the updated materials.
	If ret_ents=True it will return a list with the created entities, 
	or None if no entities are created.

	"""

def CopySpecificMatFromMdb(deck, list_mats, db_mat, ret_ents):

	"""

	This function updates list materials by a specific material from the Material Database.


	@deck constant: The deck constant.

	@list_mats object: A Material Entity or a list including Material Entities 
	from the material list.

	@db_mat object: A Material Entity from the Material Database.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns: It returns the number of successful material updates.
	If ret_ents=True it will return a list with the updated materials or None if no materials were updated.

	"""

def ExtractCrossSectionsFromPlane(cplane):

	"""

	Extracts Cross Sections of a cutting plane entity.


	@cplane object: A reference to a CUTTING PLANE entity that can be retrieved
	from a previous call to GetEntity.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def SaveFileAsIGES(file_name, file_units, entities):

	"""

	This function saves all visible entities (or all entries in "entities") to a CAD file in IGES format (extension .iges or .igs).


	@file_name string: A filesystem path.

	@file_units string: (optional)One of the following: "KILOMETERS", "METERS", "CENTIMETERS", 
	"MILLIMETERS", "MICROMETERS", "MILES", "FEET", "INCHES",
	"MILLIINCHES", "MICROINCHES"

	@entities object: (optional)A collection of ANSA entities.

	@returns integer: Returns 0 on error, 1 on success.

	"""

def ZoneCut(cons, faces, zone_width, zones_number, extend_zones, create_curves):

	"""

	Function ZoneCut() given a number of input CONS along with their respective 
	faces, creates zones related to the user supplied input CONS.


	@cons object: A list with ANSA CONS entities (suppliance of this
	argument is mandatory).

	@faces object: A list with ANSA face entities. Each face in 
	'faces' list corresponds to the CONS with the same index -
	position at input list 'cons' (i.e., it is mandatory that
	'cons' and 'faces' have the same size and that each CONS in
	'cons' relates with its respective face in 'faces' with the
	same index) (suppliance of this argument is mandatory).

	@zone_width float: (optional)Object is a scalar (i.e., Double) that specifies the width -
	step of the zones that are going to be created (suppliance
	of this argument is optional, default value = 1.0).

	@zones_number integer: (optional)A number (i.e., Integer) that specifies the number
	of zones - steps that are going to be created 
	(suppliance of this argument is optional, default 
	value = 1).

	@extend_zones boolean: (optional)A boolean (i.e., 'True' or 'False') which 
	signifies whether created zones with floating edges should
	be extended tangently to the perimeter of the face at which
	they are located (suppliance of this argument is optional,
	default value = 'False'). Set 'True' for extention of zones,
	'False' otherwise.

	@create_curves boolean: (optional)A boolean (i.e., True or False) which signifies
	whether output zones created should be ANSA 3D curves
	entities or ANSA CONS entities. When set to True, output
	will be a list containing ANSA 3D curve entities. When set
	to False (default), output will be a list containing two
	other lists, where the first will contain the created ANSA
	CONS entities and the second will contain the created ANSA
	face entities. In correspondance to the input argument lists
	'cons' and 'faces' mandatory condition, each face in the 
	output faces list will correspond to the respective CONS in
	the output CONS list that has the same index (suppliance of
	this argument is optional, default value = 'False').

	@returns object: In case where 'create_curves' input argument is set to 'True', ZoneCut() will
	return a list with an other list with the created ANSA 3D curve entities.
	In case 'create_curves' input argument is set to 'False' function ZoneCut()
	will return a list containing two other lists, where the first list will contain
	the created ANSA CONS entities and the second one will contain the created ANSA face entities.
	In correspondace to the mandatory input argument lists 'cons' and 'faces'
	condition, each face entity in the output faces list will correspond to the
	respective CONS in the CONS output list with the same index. Consequently the
	two output lists ought to have the same number of elements.

	"""

def CreateCurveWithBox(coordinates, cloud_width, multi_distance):

	"""

	This script function creates single or multiple curves from an exact point input or through a point cloud.


	@coordinates object: A List with (x, y, z) values, the input set of points.

	@cloud_width float: (optional)Indicates the cloud width in case of point cloud.

	@multi_distance float: (optional)Indicates the splitting tolerance in case of multiple curves.

	@returns object: Returns a list containing the created curve(s) or None if it fails.

	"""

def SwitchGroupOrPart(part):

	"""

	This function switches parts to groups and groups to parts. That means: 
	1) every part will be changed to a group and 
	2) every group will be changed to a part. 
	In the second case ungrouping is done and all containing parts will be set to the top level.


	@part object: A part entity or a list of part entities.

	@returns integer: Returns 1 on success, or 0 on failure.

	"""

def CrossSectionsNew(definition, point1, point2, point3, curves, part, ret_ents):

	"""

	Creates a new cross section for curves.


	@definition boolean: The type of definition of the plane.
	True: Normal definition (2 points).
	False: 3 points definition.
	(Default: False)

	@point1 object: A list with three doubles. The coordinates of the 
	first given point.

	@point2 object: A list with three doubles. The coordinates of the 
	second given point. In normal definition it is the
	point defining the vertical vector on the plane.

	@point3 object: A list with three doubles. The coordinates of the 
	third given point. (not used in normal definition)

	@curves object: A list of curve entities.

	@part object: (optional)The part in which the cross section will be included.
	By default the current part will be used.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns 1 if thr cross section has been created and 0 if thr cross section has not been created.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def CrossSectionsAdd(cross, entities):

	"""

	Adds entities to a Cross Section.


	@cross object: The cross section entity.

	@entities object: A list of entities.

	@returns integer: Returns the number of entities that were added to the cross section.

	"""

def CrossSectionsCut(definition, point1, point2, point3, elements, part, section_type, finite, circular, r, l, m, rec_orientation, ret_ents, corner_angle, cross_solver):

	"""

	Creates a new cross section for curves.


	@definition boolean: The type of definition of the plane.
	True: Normal definition (2 points).
	False: 3 points definition.
	(Default: False)

	@point1 object: A list with three doubles. The coordinates of the first given point.

	@point2 object: A list with three doubles. The coordinates of the second given point.
	In normal definition it is the point defining the vertical vector on the plane.

	@point3 object: A list with three doubles. The coordinates of the third given point.
	(Not used in normal definition)

	@elements object: A list of shell entities.

	@part object: The part in which the cross section will be included.
	By default (if invalid part is given), the current part will be used.

	@section_type integer: Defines the section type of the cross section.
	0: None, 1: General, 2: Equivalent Box, 3: PBMSECT or Arbitrary.
	(Default: 0)

	@finite boolean: (optional)Defines weather cross section is infinite or finite.
	True: Cross section is finite.
	False: Cross Section is infinite.
	(Default: False)

	@circular boolean: (optional)Defines weather the defined finite cross section is circular (True) or 
	rectangular (False).
	(Default: False)

	@r float: (optional)The radius of the defined circular cross section.
	Used only when circular = True.
	(Default: 1.0)

	@l float: (optional)The length of the L side of the rectangular cross section.
	Used only when circular = False.
	(Default: 1.0)

	@m float: (optional)The length of the M side of the rectangular cross section.
	Used only when circular = False.
	(Default: 1.0)

	@rec_orientation object: (optional)A vector defining the direction of the  rectangular cross section.
	It cannot be in the direction of the normal vector of the plane.
	Used only when circular = False.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@corner_angle float: (optional)Defines the maximum angle (in degrees) between two consecutively
	section segments, in order for both segments to be represented in the
	same Cross Section curve. If the angle of segments exceeds the defined 
	value, Cross Section curve will be broken at their matching point.
	Accepted values: 0 ~ 45.
	(Default: 30)
	(Note: This option is applied only when cross_solver = "BETA")

	@cross_solver string: (optional)Determines the solver that will be used to calculate the cross section
	properties.
	Accepted values: "BETA", "FE", "FE 2D".
	(Default: "BETA")

	@returns object: Returns 1 if created succesfully and 0 if cross section was not created.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def DeckMassInfo(apply_on, custom_entities):

	"""

	Calculates the mass of a given model. Calculated values are returned in a python object.


	@apply_on string: Specifies the target elements for which the 
	calculation will be held.
	Accepted values:
	-"whole_db" -> whole database.
	-"visible" -> only visible entities.
	-"custom" -> custom mode. The user must supply
	 the entities (via custom_entities argument) 
	 for which the calculation will be held.

	@custom_entities object: (optional)If the apply_on argument equals to "custom", the user can 
	provide the entities for which the calculation will be held.
	The object can be a python list or an ANSA entity 
	(including SETs, PROPERTIEs, PARTs, INCLUDEs).

	@returns object: Returns a python object on success, None otherwise.
	
	The returned object contains the following members:
	total_mass: (double) The total mass of the given model.
	cog: (double)The center of gravity: Tuple, (Cx, Cy, Cz) ->  Cx, Cy, Cz.
	inertia: (double) The inertia tensors: Tuple of 3 tuples, ((Ixx, Ixy, Ixz), (Iyx, Iyy, Iyz), (Izx, Izy, Izz)) -> Ixx,...,Izz.
	total_nsm: (double) The total NSM mass.
	added_mass: (double) The total added mass.

	"""

def CrossSectionsMulticut(elements, curves, part, section_type, finite, beams_per_section, connect, common_point, delete_replaced, morphing_boxes, design_variables, a_parameters, number_of_elements, length_of_elements, circular, radius, length, ret_ents, beams_amount_mode, distortion_angle, max_element_length, align_neighbor_elements, corner_angle, connect_with, path_shrinkage_factor, apply_to, connect_nodes, warping_dof_torsional, cross_solver):

	"""

	Creates equivalent beam elements of a structure by cutting it along a defined path.


	@elements object: A list of entities that the function will apply to.
	As element even a Morph Box is acceptable. In this case, the loaded 
	elements of all the Morph Box entities of the list are gathered and one
	multi-cut is performed.

	@curves object: A list of curve entities, in order to form a chain path along which 
	multi-cut will take place.
	Note that as curve even a Morph Box is acceptable. In this case,
	curves from all the Morph Box entities of the list are extracted and
	combined, in the background, in order to form the path of the
	multi-cut to be performed.

	@part object: (optional)The part in which the cross section will be included.
	By default (if invalid part is given), the current part will be used.

	@section_type string: (optional)Defines the section type of the created beam properties.
	Accepted values: "General", "Equivalent Box", "PBMSECT" or "Arbitrary".
	(Default: "General")

	@finite boolean: (optional)Defines whether the  cutting plane is infinite or finite.
	True: Cutting plane is finite.
	False: Cutting plane is infinite.
	(Default: False)

	@beams_per_section string: (optional)Defines whether in case of a section with separated areas
	will create a single or multiple beams.
	Accepted values: "single" or "multiple".
	(Default: "single")

	@connect boolean: (optional)Defines if the beam chain will be connected with residual structure 
	with Nastran RBE2 elements.
	True: Connect.
	False: Do not connect.
	(Note: This argument is ignored if is used simultaneously 
	with the argument "connect_with")

	@common_point string: (optional)Defines the location of grids of created beam elements. 
	values: "shear_center", "mass_center", "path_origin".
	default: "shear_center"
	(Tip: If current deck is Abaqus for models with variable sections, 
	use value "path_origin". Otherwise, created beams may not fit
	the initial structure, since beam node offsets are not available.)

	@delete_replaced boolean: (optional)Defines if the replaced elements will be deleted or not.
	True: Delete.
	False: Do not delete.
	(Default: False)

	@morphing_boxes boolean: (optional)Defines if morphing boxes and morphing parameters will be created or not.
	True: Create.
	False: Do not create.
	(Default: False)

	@design_variables boolean: (optional)Defines if Design Variables will be created or not. 
	True: Create.
	False: Do not create.
	(Default: False)

	@a_parameters boolean: (optional)Defines if ANSA parameters will be created or not.
	True: Create.
	False: Do not create.
	(Default: False)

	@number_of_elements integer: (optional)The number of the created beams. This argument has effect
	if beams_amount_mode = "number".
	(Default: 1)

	@length_of_elements float: (optional)The target element length of the created beams. This argument 
	has effect if beams_amount_mode = "length".
	(Default: 0)

	@circular boolean: (optional)Defines whether the cutting plane is circular or rectangular.
	Used only when finite = True.
	True: Circular.
	False: Rectangular.
	(Default: False)

	@radius float: (optional)The radius of the circular cutting plane. Used only when
	finite = True and circular = True. 
	(Default: 1)

	@length float: (optional)The diagonal of the rectangular cutting plane.
	Used only when finite = True and circular = False.
	(Default: 1)

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@beams_amount_mode string: (optional)Defines the mode that controls the amount of created beams.
	Accepted values: "number", "length" or "auto".
	(Default: "number")

	@distortion_angle float: (optional)Defines the maximum acceptable angle (in degrees) between two
	consecutively created beam elements. This argument has effect
	only if has a positive value and beams_amount_mode = "auto".
	(Default: 0)

	@max_element_length float: (optional)Defines the maximum acceptable element length of the created
	beams. This argument has effect only if it has a positive value
	and beams_amount_mode = "auto".
	(Default: 0)

	@align_neighbor_elements boolean: (optional)Defines if nodes of elements of residual structure that are close
	to start and end planes, will be aligned on these planes.
	True: Align elements
	False: Do not align elements
	(Default: True)
	(Note: This option is applied only when connect_with="RBE2" or "RBE3")

	@corner_angle float: (optional)Defines the maximum angle (in degrees) between two consecutively
	section segments, in order both segments to be represented in the
	same Cross Section curve. If the angle of segments exceeds the
	defined value, Cross Section curve will be broken at their matching
	point.
	Accepted values: 0 ~ 45
	(Default:30)
	(Note: This option is applied only when cross_solver = "BETA")

	@connect_with string: (optional)Defines the type of elements with which the beam chain will be 
	connected with residual structure.
	Accepted values: " ", "RBE2" or "RBE3" or "RSECTBT".
	(Default: " " (No connection))
	(Note: This argument overwrites argument "connect" if it is defined 
	simultaneously.)

	@path_shrinkage_factor float: (optional)Used to shrink the path of multi-cut. The total shrinkage length equals
	to this factor times the average length of the loaded elements.
	(Default: 0.)
	(Note: This factor is implemented only when multi-cut is applied to
	Morph box entities.)

	@apply_to string: (optional)Defines whether multi-cut will be applied to elements or a Morph Box
	entity.
	Accepted values: "Elements", "Morph box".
	(Default: "Elements")

	@connect_nodes string: (optional)Defines whether the nodes of the residual structure should be used
	by the R-type element, or not. If not, new nodes will be created
	on the cutting plane, which will use MPC elements to connect with
	the residual structure.
	Accepted values:
	"Use existing mesh nodes" or "Create new on cutting plane"
	(Default: "Use existing mesh nodes")
	(Note: This option is applied only when connect_with="RBE2" or
	"RBE3" and align_neighbor_elements=False)

	@warping_dof_torsional boolean: (optional)Determines whether the warping degree of freedom will be included
	in the RSECTBT element or not.
	True: Include the warping degree of freedom
	False: Do not include the warping degree of freedom
	(Default: False)
	(Note: This option is applied only when connect_with="RSECTBT")

	@cross_solver string: (optional)Determines the solver that will be used to calculate the cross section
	properties.
	Accepted values: "BETA", "FE", "FE 2D".
	(Default: "BETA")

	@returns object: Returns 1 if created succesfully and 0 if cross section was not created.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def InputMIFForm(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function inputs a MIF format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputMIFForm(filename, mode):

	"""

	This function outputs a model in MIF Format.


	@filename string: The file system path.

	@mode string: (optional)"all", "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def AddConstrainedAdaptivity(container, part, ret_ents):

	"""

	The AddConstrainedAdaptivity uses the boundary nodes of the shells in container
	to identify hanging nodes in mesh and creates a *CONSTRAINED ADAPTIVITY element,
	using the hanging node as slave and the other 2 nodes of the edge as masters.


	@container object: Can contain parts, properties, macros or shells.

	@part object: (optional)Defines the part to be used to assign the newly created 
	elements. By default, Current Part is used.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: It returns 0.
	If ret_ents=True it will return a list with the created entities, 
	or None if no entities are created.

	"""

def CreateResult(gw_filename):

	"""

	Function for creating an OpenFoam result based on a Gw file.


	@gw_filename string: The path to the Gw file.

	@returns object: Returns a reference to the newly created OpenFoam result object on success, or None on error.

	"""

def SmoothResult(result,flatten_top,flatten_bottom,zero_abs_range,smooth_zones,iterations):

	"""

	Function for applying smoothing based on neighbours on a created result.


	@result object: An OpenFoam result object.

	@flatten_top float: (optional)Values greater than the one defined will be flattened.

	@flatten_bottom float: (optional)Values smaller than the one defined will be flattened.

	@zero_abs_range float: (optional)Set to 0 to absolute values smaller than the one defined.

	@smooth_zones integer: (optional)The number of neighbours to apply smoothing to.

	@iterations integer: (optional)The number of iterations.

	@returns integer: Returns 0 on success and 1 on error.

	"""

def BuildComponent(ents, property_conflicts, material_conflicts, set_conflicts, reject_non_empty_parts, coord_conflicts, node_conflicts):

	"""

	Changes the representation of all parts according to the field "Representation".
	If this representation is not already saved in DM, a respective batch meshing scenario
	will be created with the part loaded. A DM Root directory must be already specified.


	@ents object: A list that contains parts or groups.

	@property_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@material_conflicts string: (optional)"Offset" creates a new entity.
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value. (Default)

	@set_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@reject_non_empty_parts boolean: (optional)True: Process only the empty parts. (Default)
	False: Work for all parts.

	@coord_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@node_conflicts string: (optional)"Offset" creates a new entity. (Default)
	"KeepOld" keeps the old value.
	"KeepNew" keeps the new value.

	@returns object: The return is a list of same size as the ents list (input argument) disregarding
	any empty or multi-instanciated parts.
	Each entry of the returned list contains a list for each processed part.
	This is of length 4 and its entries are:
	info_list[0] = Module Id of the processed part.
	info_list[1] = Name of the representation in case it exists in DM, else empty string.
	info_list[2] = Informative message.
	info_list[3] = Reference to the batch messing scenario in case the representation does not exist in DM.

	"""

def SaveComponent(ents, conflicts_option, spin_up_attribute, save_repr_file, export_png, export_jt):

	"""
	Deprecated since version 17.0.0. Use function SaveSubsystems instead.

	Saves a given list of groups or includes in the DM, as components.
	A DM Root directory must be already specified.


	@ents object: A list that contains groups or includes.

	@conflicts_option string: (optional)'Overwrite'
	'Skip'
	'Spin_up' (default)

	@spin_up_attribute string: (optional)'Study Version' (default)

	@save_repr_file string: (optional)'YES' (save along with the component, a respective ansa database)
	'NO' (default)

	@export_png string: (optional)'YES' (save along with the component, an image in ".png" format)
	'NO' (default)

	@export_jt string: (optional)'YES' (save along with the component, a respective jt file)
	'NO' (default)

	@returns object: Return a list with the same size as the ents list (input argument).
	Each entry of the returned list is a string with a special id of the saved component.
	In case the component failed to be saved a string with zero value is returned '0'.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function SaveSubsystems instead.", DeprecationWarning)

def SaveComponentGui(ents):

	"""

	Given a list of components for saving, the function launches the
	'Save Component in DM' graphical user interface.
	A DM Root directory must have been already specified.


	@ents object: A list that contains groups or includes

	@returns integer: Returns 0 in all cases.

	"""

def SaveCompareReport(filepath):

	"""

	While being inside the 'Compare' process the user can save the current visible state of the compare report list along
	with the physical models involved in the comparison in a file of type "*.ansa_compare".


	@filepath string: The path to the "*.ansa_compare" file.

	@returns integer: Returns 0 in all cases.

	"""

def PedestrianCreateWADLine(length, name):

	"""
	Deprecated since version 16.0.1. Use class PedSafety instead.

	This function creates a user define WAD line according to the values set by the PedestrianMarkingParameters.


	@length float: The length of the flexible tape that will be used (Wrap Around Distance).

	@name string: The name of the curve that will be created.

	@returns integer: Returns 0  on success, non-zero on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use class PedSafety instead.", DeprecationWarning)

def ReadCompareReportState(filepath):

	"""

	Opens a file of type "*.ansa_compare" that has been saved from within Compare functionality
	either inside the Compare Report window via File>Save As, or by the function SaveCompareReport.


	@filepath string: The path to the "*.ansa_compare" file.

	@returns integer: Returns 1 in all cases.

	"""

def LaminateElementPolarValues(deck, element, start, end):

	"""

	Calculates the E1, E2, v12 and G12 polar values for an element which has a Laminate Property.
	By default the values from 0 degrees to 359 degrees are calulated.


	@deck integer: The deck constant.

	@element object: A reference to an element with laminate Property.

	@start integer: (optional)The starting angle in degrees. (Default: 0)

	@end integer: (optional)The ending angle in degrees. (Default: 359)

	@returns object: Returns a dictionary which has 4 lists with the following keys: "E1", "E2", "v12", "G12".
	Each list contains the polar values for its key.
	
	In case of failure it returns None.

	"""

def ApplyThicknessToLaminateElements(deck, property):

	"""

	This function changes the elements so that their actual thickness is equal to the layers total thickness,
	with a reference plane defined in the property card.


	@deck integer: One of NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS or PERMAS.

	@property object: A property or a list of properties of type TSHELL_LAMINATE or SOLID_LAMINATE.

	@returns integer: Returns 0 on success.

	"""

def SetDifferencesIndexSettingsValues(key, fields):

	"""

	Sets or changes values of parameters concerning the 'Differences index' window in Compare process.
	
	You can also use this function to set up quick color filters (activate/deactivate orange, red, blue, green, yellow filters)
	through script according to the filter name. 
	The function can be used with the appropriate key: <advanced filter name>:::Quick Filter Button::<color of the filter button>, and the keyword "Visible".
	"Quick Filter Button" names can be (as shown in interface):
	- Green // Matched (No diffs)
	- Orange // Matched (Diffs)
	- Red // Unmatched (Model 1)
	- Blue // Unmatched (Model 2)
	- Yellow // New


	@key string: A string describing the parameter's full name in tree view,
	e.g., "GEOMETRY (PARTS)::ANSAPART::Geometry::Differences". 
	In case the setting demands a value, you can set it as: ">", "10.0" after settings_full_name. 
	A percentage value is used to set geometry similarities or differences and an absolute 
	one in any other case.

	@fields object: (optional)A list or a dictionary that holds pairs of 'field - value'. 
	You can set "Is Difference?" and "Visible" to "ON"/"OFF", "TRUE"/"FALSE"or "YES"/"NO".
	You can ommit setting any of them.

	@returns integer: Returns 0 on success, non-zero on error.

	"""

def GetDifferencesIndexSettingsValues(key, fields):

	"""

	Gets the values of parameters concerning the 'Differences index' window in Compare process.
	
	In case the setting has a value you can get it as: "EXPR" or "EXPRESSION", e.g., "EXPR" could return "<10.000".
	For "Is Difference?" and "Visible" parameters, this function returns their current values ("ON" or "OFF"). 
	
	You can also get quick filters status according filter name and color of the button.


	@key string: A string describing the parameter's full name in a tree view.
	e.g., "GEOMETRY (PARTS)::ANSAPART::Geometry::Differences".

	@fields object: (optional)A list that containes the names of the desired parameters.

	@returns object: Returns a dictionary that has as keys the names of the requested parameters and as data their values.

	"""

def EditPartPosition(part, x0, y0, z0, dx1, dy1, dz1, dx2, dy2, dz2, dx3, dy3, dz3, apply_transformation):

	"""

	Assigns a new transformation matrix to a part or group, optionally moving it accordingly.


	@part object: A reference to the ANSAPART or ANSAGROUP.

	@x0 float: The x0 member of the transformation matrix to assign.

	@y0 float: The y0 member of the transformation matrix to assign.

	@z0 float: The z0 member of the transformation matrix to assign.

	@dx1 float: The dx1 member of the transformation matrix to assign.

	@dy1 float: The dy1 member of the transformation matrix to assign.

	@dz1 float: The dz1 member of the transformation matrix to assign.

	@dx2 float: The dx2 member of the transformation matrix to assign.

	@dy2 float: The dy2 member of the transformation matrix to assign.

	@dz2 float: The dz2 member of the transformation matrix to assign.

	@dx3 float: The dx3 member of the transformation matrix to assign.

	@dy3 float: The dy3 member of the transformation matrix to assign.

	@dz3 float: The dz3 member of the transformation matrix to assign.

	@apply_transformation boolean: If True, apart from acquiring the new transformation matrix, 
	the part will also be moved accordingly.

	@returns integer: Returns 0 on success and 1 if an error occurs.

	"""

def IsEntityActive(entity):

	"""

	Examines whether an entity is active or not.
	Works for all entity types, but is intended to be used for entities like connections 
	and GEBs that can become inactive in the database when the parts that use them are 
	turned to a "Don't Use" representation.


	@entity object: A reference to an entity object.

	@returns boolean: Returns True if the entity is visible, False otherwise.

	"""

def GetAllItemsInDM(type):

	"""
	Deprecated since version 17.0.0. Use function QueryForAllResults instead.

	Gets a list with all items in DM for a specific type.


	@type string: Accepted values: 'parts', includes', 'components', 'configurations'.

	@returns object: Returns a list with dictionaries for each DM entry. The dictionary contains all the attributes
	of the DM entry, including its Module Id, Version, Study Version, Representation etc.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function QueryForAllResults instead.", DeprecationWarning)

def SaveUpdatesToDM(dm_items, dm_root):

	"""
	Deprecated since version 17.0.0. Use function SaveUpdates instead.

	This function may only be used along with CheckDMUpdates function.
	It accepts the CheckDMUpdates's function output.


	@dm_items object: A list that contains DM Items which were output from the CheckDMUpdates() 
	function, in the same way they were given in the output array.
	Otherwise, a single result may be given.

	@dm_root string: (optional)The target DM Root, where the update will be copied. 
	When unspecified, the current DM is used.

	@returns integer: Returns the total number of DM items that were successfully uploaded to the target DM.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function SaveUpdates instead.", DeprecationWarning)

def OutputResult(result, filename, append_or_overwrite, format):

	"""

	Function for the output of a Result to a file.


	@result object: A result object.

	@filename string: The filename to output.

	@append_or_overwrite integer: Set to 0 to overwrite, 1 to append to the file.

	@format integer: (optional)Output format
	0: For OpenFoam format.
	1: CSV with x, y, z, value.
	2: CSV with x, y, x, dx, dy, dz.

	@returns integer: Returns 0 on success, 1 on failure.

	"""

def FilletFaces(cons, radius, fillet_type):

	"""

	This function creates continuous fillets from multiple faces, by entering a specified radius value of the fillet surface.
	In case that fillet_type equals to 1, planar faces are being generated.


	@cons object: A list of references or a single reference of the cons that will be used.

	@radius float: The radius value of the fillet surface.

	@fillet_type integer: (optional)Specifies the shape of the fillet:
	0: Round, 1: Planar.

	@returns object: Returns a list with the created faces on success, or None on failure.

	"""

def SizeBoxSweepGlide(max_surf_elem_len, max_vol_elem_len, extrusion_type, guideline_ents, box_face, curves, points, section_type, radius, width, dx, dy, dz, height, lower_base, upper_base):

	"""

	Function for creating a Size Box through extrusion. Both 'sweep' and 'glide' extrusion types are supported. 
	
	The direction of the extrusion is defined through curves, or points, or a combination of them.
	Curves may form a connected or disconnected path (a path will be automatically created).
	Note that single points are ignored (i.e. if any points are to be used, they should be at least two).
	
	The user has four options in defining the cross section, one with a box face, one with curves, 
	one with curves and points and, finally, one with a predefined shape.
	The box_face option expects a single box face entity (which will be pasted to the new one after creation of the box) 
	The curves option expects one or more curves (unconnected ones will be automatically connected to form a closed cross
	section shape).
	The selected curves should contain at least 4 points, so that they can be adopted for the definition of the four box 
	edges. The points option should only follow a previous curves-curve_entities pair, and explicitly defines the points 
	to be used for the four box edges definition. These points should be part of the curve_entities provided. 
	The predefined cross section includes a circular with the required radius, a square with its side length, a rectangular
	with its width and height, and a trapezoidal with its two bases' lenths and height. Except for the circular, these cross
	sections also require a vector defining the 'height' direction of the cross section.
	Note that several kind of edges may be used as a curve, including element edges (provided as edge sets), CONS, 3D curves
	and box edges. Similarly, grids, hot points and box edge corner points may be employed for any point entities.


	@max_surf_elem_len float: The maximum allowed surface element length.

	@max_vol_elem_len float: The maximum allowed volume element length.

	@extrusion_type string: A keyword "sweep" or "glide", denoting the type of extrusion.

	@guideline_ents object: The entities defining the direction of extrusion.
	(Collection of curves and/or points)

	@box_face object: (optional)A box face entity to be used as a cross section.
	(Note that new face will be pasted to old)

	@curves object: (optional)The curve entities defining the cross section.
	(They do not have to form a closed perimeter)

	@points object: (optional)The point entities defining the position of the box edges (used only 
	in conjunction with 'curves').
	Note that points should be among the points of the curve_entities provided above.

	@section_type string: (optional)A string specifying predefined section type ("circular", "square", 
	"rectangular", trapezoidal").
	Additional data needed per case:
	-"circular" requires "radius".
	-"square" requires "width" and  height direction "dx","dy","dz".
	-"rectangular" requires "width", "height", and height direction "dx","dy","dz".
	-"trapezoidal" requires "lower_base", "upper_base", "height", and height 
	  direction "dx","dy","dz".

	@radius float: (optional)In case of "circular" section_type, the radius of the cross section

	@width float: (optional)In case of "square" section_type, the width of the cross section

	@dx float: (optional)In case of "square", "rectangular" or "trapezoidal" section_type, 
	the x-component of the vector defining the section's height direction
	(does not need to be normalized).

	@dy float: (optional)In case of "square", "rectangular" or "trapezoidal" section_type, 
	the y-component of the vector defining the section's height direction
	(does not need to be normalized).

	@dz float: (optional)In case of "square", "rectangular" or "trapezoidal" section_type, 
	the z-component of the vector defining the section's height direction
	(does not need to be normalized).

	@height float: (optional)In case of "rectangular" or "trapezoidal" section_type, the height 
	of the cross section.

	@lower_base float: (optional)In case of "trapezoidal" section_type, the length of the sections' lower base.

	@upper_base float: (optional)In case of "trapezoidal" section_type, the length of the sections' upper base.

	@returns object: Returns the created Size boxes.

	"""

def CreateVolumeCylinder(point1, point2, length, radius, part, property, volumes):

	"""

	This function defines a closed cylinder by creating the appropriate faces, connected accordingly. 
	Apart from the created faces, a Volume entity is also generated.


	@point1 object: A list of x,y,z coordinates defining the start of the axis of the Cylinder.

	@point2 object: A list of x,y,z coordinates defining the end of the axis of the Cylinder.

	@length float: The length of the cylinder.

	@radius float: The radius of the cylinder.

	@part object: (optional)The part for the created face(s).
	If nothing is passed, the current part is taken into consideration.

	@property object: (optional)The property for the created faces(s).
	If nothing is passed, the default property is taken into consideration.

	@volumes boolean: (optional)If set to True, apart from the created faces, a Volume entity is also created.
	(Default: True)

	@returns object: Returns a list with the created faces, otherwise None.

	"""

def CreateVolumeCone(point1, point2, length, radius1, radius2, part, property, volumes):

	"""

	This function defines a right cone frustum by creating the appropriate faces, connected accordingly.
	Apart from the macro-face, a Volume entity is also created.


	@point1 object: A list of x,y,z coordinates defining the start of the axis of the cone, 
	passing through the center of the basis (radius 1).

	@point2 object: A list of x,y,z coordinates defining the end of the axis of the cone, 
	passing through the center of the second face (radius 2).

	@length float: The length of the Cone.

	@radius1 float: The radius of the basis of the cone.

	@radius2 float: The radius of the second face of the cone.

	@part object: (optional)The part for the created face(s).
	If nothing is passed, the current part is taken into consideration.

	@property object: (optional)The property for the created faces(s).
	If nothing is passed, the default property is taken into consideration.

	@volumes boolean: (optional)If set toTrue, apart from the macro-face, a Volume entity is also created.
	(Default: True)

	@returns object: Returns a list with the created faces, otherwise None.

	"""

def CreateVolumeSphere(center_point, radius, part, property, volumes):

	"""

	This function defines a sphere by creating the appropriate faces, connected accordingly. 
	Apart from the macro-faces, a Volume entity is also created.


	@center_point object: A list of x,y,z coordinates defining the center of the Sphere.

	@radius float: The radius of the Sphere.

	@part object: (optional)The part for the created face(s).
	If nothing is passed, the current part is taken into consideration.

	@property object: (optional)The property for the created faces(s).
	If nothing is passed, the default property is taken into consideration.

	@volumes boolean: (optional)If set toTrue, apart from the macro-faces, a Volume entity is also created.
	(Default: True)

	@returns object: Returns a list with the created faces, otherwise None.

	"""

def CreateVolumeTorus(point1, point2, point3, max_radius, min_radius, part, property, volumes):

	"""

	This function defines a torus by creating the appropriate faces, connected accordingly.
	Apart from the macro-faces, a Volume entity is also created.


	@point1 object: A list of x,y,z coordinates defining the center of the Torus.

	@point2 object: A list of x,y,z coordinates defining the X-axis of the created plane.

	@point3 object: A list of x,y,z coordinates defining the Y-axis of the created plane.

	@max_radius float: The major radius is the outer radius of the Torus.

	@min_radius float: The minor radius is the thickness of the Torus.

	@part object: (optional)The part for the created face(s).
	If nothing is passed, the current part is taken into consideration.

	@property object: (optional)The property for the created faces(s).
	If nothing is passed, the default property is taken into consideration.

	@volumes object: (optional)If set to True, apart from the macro-face, a Volume entity is also created.
	(Default: True)

	@returns object: Returns a list with the created faces, otherwise None.

	"""

def SetShellResult(list_shells, list_values):

	"""

	Function for changing the result for each shell.
	It takes as input a list of shells and a list of values.


	@list_shells object: A list of shell objects.

	@list_values object: A list with the new values.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InsertPatch(face,smult,tmult,tolerance):

	"""

	This function splits a surface into more patches without modifying it's shape.


	@face object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@smult integer: The number of patches at s direction would be multiplied by this number.
	This number should be a positive integer.

	@tmult integer: The number of patches at t direction would be multiplied by this number.
	This number should be a positive integer.

	@tolerance float: The minimum distance between two patches.
	A patch would not be created in a distance smaller than tolerance.

	@returns object: Returns 1 on success and None on failure.

	"""

def RemoveLogosAutomatic(height, size, source_faces):

	"""

	Automatically recognizes and removes logos present in the model.


	@height float: The maximum height of the logo.

	@size float: The maximum size of the logo.

	@source_faces object: (optional)A list of the faces where the recognition will be performed.
	If it is omitted the recognition will be performed on the visible faces

	@returns integer: Returns 1 on success.

	"""

def UngroupParts():

	"""

	This function ungroups all the Groups of the database to their component Parts.
	It takes no arguments.


	@returns integer: Returns 0 in all cases.

	"""

def DrapeLaminate(deck, laminate, seq_layer, shear_lock_angle, detail, calc_thick, spacing, treat_offending_geometry, algorithm, template):

	"""

	Performs draping for all specified sequence/layer pairs of a given laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate Property to apply drape.

	@seq_layer object: (optional)A list containing the sequence/layer pairs for which draping will apply. At least one of arguments 'seq_layer' and 'template' must be provided.

	@shear_lock_angle float: (optional)The shear lock angle. (Default: 60.0)

	@detail string: (optional)The level of detail ("MINIMUM", "AVERAGE", "MAXIMUM" or "USER_DEFINED").
	(Default: "MAXIMUM")

	@calc_thick boolean: (optional)Calculate the thickness of the layers.
	(Default: False)

	@spacing float: (optional)Used only with detail="USER_DEFINED".
	(Default: 5.0)

	@treat_offending_geometry boolean: (optional)Treat offending geometry.
	(Default: True)

	@algorithm string: (optional)Algorithm used for draping.
	"Fishnet" for woven layers, or "Sliding" for UD layers.
	(Default: "Fishnet")

	@template object: (optional)A list containing the layer template ids for which draping will apply. At least one of arguments 'seq_layer' and 'template' must be provided.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def SetLaminateRosette(deck, laminate, rosette, seq_layer, template):

	"""

	Sets the rosette for all the specified sequence/layer pairs of the given laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@rosette integer: The id of a valid rosette that will be set.

	@seq_layer object: (optional)A list containing the sequence/layer pairs for which the rosette will be set. At least one of arguments 'seq_layer' and 'template' must be provided.

	@template object: (optional)A list containing the layer template ids for which the rosette will be set. At least one of arguments 'seq_layer' and 'template' must be provided.

	@returns integer: Returns 0 on success, otherwise 1.

	"""

def CrossSectionReinforcements(cross_section, edge_set, orient_type, orient_vec, angle, direction, ret_ents):

	"""

	Create equivalent beam elements of a structure, by cutting it along a defined path.


	@cross_section object: A cross section used for the creation of the reinforcements.

	@edge_set object: An edge set, with the edges where the the reinforcements will be created.

	@orient_type integer: (optional)The type of the orientation vector. 
	Accepted Values: 1 (fixed), 2 (normal), 3 (relative).
	(Default: 1)

	@orient_vec object: (optional)The orientation vector.

	@angle float: (optional)If defined, rotate the vector. (deg.)

	@direction object: (optional)Vector, used to set the direction of the reinforcements path. 
	The path of the edge set has 2 possible directions, and 
	the most close to the direction vector will be chosen as start.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Always returns 1.
	If ret_ents=True, it will return a list with the created entities, 
	or None if no entities are created.

	"""

def AbqStepSetSelected(step, select):

	"""

	Sets a step as selected.


	@step object: A reference to a step that can be retrieved from a previous
	call to GetEntity.

	@select boolean: Choose whether the given step is set to selected or not.

	@returns object: Always returns None.

	"""

def PerimetersOfFace(faces, perimeters_type):

	"""

	The function collects the Cons of each provided face. Joined perimeters will be included.
	The argument perimeters_type controls whether all (default), the active or the joined perimeters will be collected.


	@faces object: A single face or list of faces, parts or properties.

	@perimeters_type string: (optional)Accepted values: "all" (default), "active" or "joined".

	@returns object: Returns a list with the collected Cons, or 0 on failure.

	"""

def Simplify(shrink, perface, tol, faces):

	"""

	Simplifies the geometry of surfaces and/or performs Shrink if asked.


	@shrink boolean: Can be True or False, corresponding to the activation or not of the flag 'Shrink'.

	@perface boolean: Can be True or False, corresponding to the activation or not of the flag 'Per face'.

	@tol float: Can be any positive value, corresponding to the 'Tolerance' line edit.

	@faces object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@returns integer: Returns the number of simplified and/or shrinked surfaces on success, or 0 in failure.

	"""

def LaminateChangeStacking(deck, property, stacking, fill_ply_drop_offs, merge_method, merge_t_tol, merge_theta_tol, disconnect_layers, gap, ret_node_pairs, ret_node_bricks, ret_facet_pairs, drop_off_prop, force_split_woven_layers, avoid_hanging_edges):

	"""
	Deprecated since version 18.1.0. Use function LaminateChangeStackingToPerPly instead.

	This function changes the stacking of a Laminate property.


	@deck integer: One of NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS, PERMAS.

	@property object: One laminate property or a list of laminate properties.

	@stacking string: One of "single element" or "per ply".

	@fill_ply_drop_offs boolean: (optional)Flag for filling ply drop-offs.
	(Default: False)

	@merge_method string: (optional)Method by which the layers of different properties will be merged.
	One of "by_tolerances", "by_gplyid", "by_layer_name".
	Required only for multiple properties and stacking = "per ply".

	@merge_t_tol float: (optional)Thickness tolerance by which the layers of different properties
	will be merged. Required for merge_method = "by_tolerances".

	@merge_theta_tol float: (optional)Theta tolerance by which the layers of different properties
	will be merged. Required for merge_method = "by_tolerances".

	@disconnect_layers boolean: (optional)If set to True and stacking is "per ply" the layers are disconnected.
	(Default: False)

	@gap float: (optional)The gap between the disconnected layers (0 or greater).
	(Default: 0)

	@ret_node_pairs boolean: (optional)If set to True, ret.node_pairs is a list of tuples with 2 nodes.
	If set to False, ret.node_pairs is None. (default)

	@ret_node_bricks boolean: (optional)If set to True, ret.node_bricks is a list of tuples with 6 or 8 nodes.
	If set to False, ret.node_bricks is None. (default)

	@ret_facet_pairs boolean: (optional)If set to True, ret.facet_pairs is a list of tuples with 2 facets or shells.
	If set to False, ret.facet_pairs is None. (default)

	@drop_off_prop object: (optional)Simple solid property of the ply drop-offs. If not given
	and fill_ply_drop_offs is True, then a default solid property is created.

	@force_split_woven_layers boolean: (optional)If True, woven layers are split.
	If False, woven layers are not split, except for SOLID_LAMINATE
	in LSDYNA, PAMCRASH, RADIOSS and PERMAS

	@avoid_hanging_edges boolean: (optional)When stacking is "per ply" and fill_ply_drop_offs is True,
	avoid hanging edges by creating pyramids (drop-off elements)
	and by splitting hexas to pentas (layer elements).

	@returns object: None on failure.
	A list of layer objects on success.
	
	When disconnect_layers is True and stacking is "per ply" then the list returned contains one object for each layer.
	Each layer object has data about the interface between a layer and all adjacent layers above.
	
	This object ret has the following members:
	ret.laminate: the laminate
	ret.sequence_pos: the sequence index
	ret.layer_pos: the layer index
	ret.node_pairs: a list of tuples with 2 nodes (bottom and top). These may be used to create beams.
	ret.node_bricks: a list of tuples with 6 or 8 nodes (penta or hexa). These may be used to create cohesives.
	ret.facet_pairs: a list of tuples with 2 facets or shells (bottom and top). These may be used to create contacts.

	"""

	import warnings; warnings.warn("Deprecated since version 18.1.0. Use function LaminateChangeStackingToPerPly instead.", DeprecationWarning)

def SurfaceInfo(faces):

	"""

	Takes as input a list of ANSA face entities and returns a list with info
	concerning each of the input faces underlying surface.


	@faces object: A list with ANSA face entities.

	@returns object: Returns a list where each one of its element corresponds to the face in the 
	supplied_faces list with the same index. Each position is a five element list
	where the first position corresponds to the surface index, the second position
	corresponds to the number of patches towards s direction, the third position
	corresponds to the number of patches towards t direction, the fourth position
	corresponds to the radius towards s direction and the fifth position corresponds to
	the radius towards t direction.

	"""

def IsolateSimilarGroups(entities, separate_at_blue_bounds, separate_at_pid_bounds, similarity_factor, distance, feature_angle, feature_type, skip_connectivity_separation, action_on_apply, search_in_same_position):

	"""

	The function first separates all input entities into connectivity groups according to the
	parameters separate_at_blue_bounds and separate_at_pid_bounds.
	Then, it detects the connectivity groups that are similar (according to the similarity_factor and distance given).


	@entities object: A list that can contain faces and shells. 
	If 0 is specified, then the function works on visible.
	If skip_connectivity_separation is True, entities must 
	be a list with nested lists of entities. Each of the nested 
	lists is the user input connectivity group to be examined.
	Especially for parts or props, the list does not have to be 
	nested (see the example).

	@separate_at_blue_bounds integer: If 1 is specified, then regions connected
	via triple bounds are placed into separate
	connectivity groups. If 0 is specified, 
	then all connected entities are placed into
	the same group.

	@separate_at_pid_bounds integer: If 1 is specified, then all entities
	contained in a connectivity group will have 
	the same PID. 
	If 0 is specified, then each connectivity
	group can contain connected entities with
	different PIDs.

	@similarity_factor float: Values 0 - 100. 
	The minimum percentage of similar 
	area between 2 matched groups of entities.

	@distance float: The maximum allowed distance between the 
	similar area of 2 matched group of entities

	@feature_angle float: (optional)Values: 0 - 180.
	The feature angle limit in degrees.
	If this value is exceeded, the groups get separated 
	at this feature line.
	(Default: 0)

	@feature_type string: (optional)Values: "convex", "concave", "convex_and_concave". 
	This option  is considered only when separation by feature 
	angle is enabled. Groups get separated at the examined 
	bound only if feature_angle is exceeded and the feature 
	type is of the specified type.
	(Default: "convex_and_concave")

	@skip_connectivity_separation boolean: (optional)If set to True, then the user can provide the connectivity groups.
	The list entities must be a list with inner lists, each of which 
	specifies a connectivity group. Each inner list can contain faces, 
	shells, parts or properties.
	(Default: False)

	@action_on_apply string: (optional)Possible values: create_instances. If this action is provided, 
	instance parts are created for the detected similar groups.
	(Default: None)

	@search_in_same_position boolean: (optional)If set to True, the function searches for similar groups in the same position. Default value is False.

	@returns object: Returns a dictionary with all the similar groups. The key is the similar group 
	name and as data a second dictionary is stored. This second dictionary contains all the
	connectivity groups that were matched as similar. The key is the connectivity group name and 
	as data a list with all the containing faces and shells is stored.
	
	If no similar groups are found, the function returns None.

	"""

def SplitPropertiesToPartsSections(properties, deck, ret_ents):

	"""

	This funtion creates sections/props for LSDYNA/RADIOSS according to the given properties.
	The provided properties will be transformed to parts and will be assigned the newly created section/prop.


	@properties object: Properties that will be edited and will be used as source to create sections/props.

	@deck integer: (optional)The deck for which the action will take place.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns the number of properties that were succesfully edited.
	If ret_ents=True it will return a list with the created entities, or None if no entities are created.

	"""

def GetCurrentEntity(deck, type):

	"""

	Gets a reference to the current entity of the specified type.


	@deck integer: The selected deck.

	@type string: A string that describes the type of entity.
	It can be retrieved from the title of the entity's 
	edit card, where it is displayed within brackets.

	@returns object: Returns a reference to the current entity, or None if such an entity does not exist.

	"""

def SurfaceIntersection( face1, face2, extend1, extend2, project_topo ):

	"""

	This function generates a 3D Curve along the intersection of two selected Surfaces.


	@face1 object: The 1st selected face.

	@face2 object: The 2nd selected face.

	@extend1 float: (optional)A float that specifies the surface extension of the 1st face.

	@extend2 float: (optional)A float that specifies the surface extension of the 2nd face.

	@project_topo boolean: (optional)Enable Project and Topo.
	(Default: False)

	@returns integer: Always returns 1.

	"""

def DeleteFromDM(names_values, type, server_id):

	"""

	This function deletes an entry from DM, e.g. a part or include or Component.


	@names_values object: (optional)A dictionary with properties and their values, 
	that will be used to find the entry in DM.

	@type string: (optional)The object type, e.g. "parts", "includes", "Component".

	@server_id string: (optional)The server id, if known.

	@returns integer: Returns 1 if the entry was deleted successfully or 0 if it failed.

	"""

def CreateNodeCouples(method, entities, second_set, sequential_nodes, number_of_nodes, distance, tolerance, connectivity_1st_set, connectivity_2nd_set):

	"""

	Creates/Sorts node couples from nodes/node sets or curves.


	@method string: Valid values:
	-"nodes"
	-"curve_seq"
	-"curve_box"
	-"node_sets"
	-"edges"

	@entities object: Valid entities are nodes, curves and edges depending on the method.

	@second_set object: (optional)Node entities. Used only in "node_sets" method.

	@sequential_nodes string: (optional)"on" or "off". Used only in "nodes" method.
	(Default: "off")

	@number_of_nodes integer: (optional)Number of nodes to create on the provided curve(s).
	Used in "curve_seq" method. If distance is provided, 
	nodes will be created according to the "distance" argument

	@distance float: (optional)Distance of between the created nodes.
	Used at "curve_box" and "curve_seq" method.

	@tolerance float: (optional)Maximum distance of the nodes to be in a couple.
	Used in the "node_sets" method.

	@connectivity_1st_set string: (optional)Valid values: "single", "double" or "multiple".

	@connectivity_2nd_set string: (optional)Valid values: "single", "double" or "multiple".

	@returns object: Returns a that contains the node couples. On failure None is returned.

	"""

def CurvesTransform (entities, point1, point2, start_direction_point, part, respect_user_selection):

	"""

	This function defines new 3D Curves as transformation of a number of selected 
	consecutive 3D Curves, CONS or Cross Section segments.
	The transformations can be simultaneous translation, rotation and scaling.


	@entities object: A list with entities for the chain that will be used for the transformation.

	@point1 object: A list with x, y, z double coordinates that indicates the start of the 
	transformation vector for the new 3D Curve.

	@point2 object: A list with x, y, z double coordinates that indicates the end of the 
	transformation vector for the new 3D Curve.

	@start_direction_point object: A list with x, y, z double coordinates that indicates a point close to the 
	start of the selected chain, defining its direction. The vector is defined 
	from the "start_direction_point" to the end of the chain.

	@part object: The part for the created curves.

	@respect_user_selection boolean: (optional)True for respect user selection, False for auto 
	ordering the entities of the chain.

	@returns integer: Returns 1 on successs, otherwise 0.

	"""

def CreateLaminateRosette(deck, laminate, position, direction, reference, id, name, coordinate):

	"""

	Creates a rosette for the specified laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@position object: (optional)A list with the coordinates where the rosette will be created.

	@direction object: (optional)A list with the coordinates of the rosette's direction vector.

	@reference object: (optional)A list with the coordinates of the rosette's reference vector.

	@id integer: (optional)The rosette's id. If no id is given the first free id will be assigned.

	@name string: (optional)The rosette's name. If no name is given a default one will be assigned.

	@coordinate object: (optional)A reference to a coordinate system.

	@returns object: Returns the id of the created rosette or None on failure.

	"""

def DeleteLaminateRosette(deck, laminate, rosette):

	"""

	Deletes the specified rosette for the given Laminate property.


	@deck integer: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH..

	@laminate object: A reference to a laminate Property.

	@rosette integer: The id of the rosette to be deleted.

	@returns integer: Always returns 0.

	"""

def ModifyLaminateRosette(deck, laminate, rosette, position, direction, reference, name, coordinate):

	"""

	Modifies the specified rosette for the given Laminate property.


	@deck integer: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@rosette integer: The id of the rosette that will be modified.

	@position object: (optional)A list with the coordinates of the rosette's position.

	@direction object: (optional)A list with the coordinates of the rosette's direction vector.

	@reference object: (optional)A list with the coordinates of the rosette's reference vector.

	@name string: (optional)The rosette's name.

	@coordinate object: (optional)A reference to a coordinate system.

	@returns integer: Always returns 0.

	"""

def CreateLaminateOffset(deck, laminate, elements, position, direction, id, flag, value, name):

	"""

	Creates an offset for the specified laminate property.


	@deck integer: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate property.

	@elements object: A list with Shell elements that belong to the laminate property on which offset 
	will be applied.

	@position object: A list with the coordinates of the offset's position vector.

	@direction object: A list with the coordinates of the offset's direction vector.

	@id integer: (optional)Id of the created offset. If no id or 0 id is given the first free id will be chosen.

	@flag string: (optional)Available options are "below", "middle", "above" or "application_side".
	(Default: "middle")

	@value float: (optional)Offset's value.

	@name string: (optional)Name of the created offset.

	@returns integer: Returns the id of the created offset or None in case of failure.

	"""

def DeleteLaminateOffset(deck, laminate, offset):

	"""

	Deletes the specified offset for the given Laminate property.


	@deck integer: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: A reference to a laminate property.

	@offset integer: The id of the offset to be deleted.

	@returns integer: Returns 0 on success or 1 on failure.

	"""

def ModifyLaminateOffset(deck, laminate, offset, add_elements, remove_elements, position, direction, flag, value):

	"""

	Modifies the specified offset for the given Laminate property.


	@deck integer: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A reference to a laminate property.

	@offset integer: The id of the offset that will be modified.

	@add_elements object: (optional)A list with Shell elements that belong to the laminate property that will be 
	added to the offset.

	@remove_elements object: (optional)A list with Shell elements that belong to the laminate property that will be 
	removed from the offset.

	@position object: (optional)A list with the coordinates of the offset's position vector.

	@direction object: (optional)A list with the coordinates of the offset's direction vector.

	@flag string: (optional)Available options are "below", "middle", "above", "application_side".
	(Default: "middle")

	@value float: (optional)Offset's value.

	@returns integer: Returns 0 on success or 1 on failure.

	"""

def GetMacrosOfCons(cons):

	"""

	Returns the macros that the input CONS belong to.


	@cons object: A CONS entity, a CONS ID, a list of CONS entities, a list of CONS IDs,
	or a list of CONS entities and IDs.

	@returns object: Returns a list with the macros that the input CONS belong to.

	"""

def InputTAU(filename, nodes_id, elements_id, properties_id, model_action, unit_system, cfd_light_mode):

	"""

	Inputs a TAU file in ANSA .


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window",
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off".
	If it is set to "on", ANSA will use the light volume representation.
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def OutputTAU(filename, mode, cmode, unit_system, scale):

	"""

	OutputFluent output a FLUENT file. It supports variable number of arguments.


	@filename string: The name of the output file. It must include the full path to the file.

	@mode string: "all", "model" or "visible".
	(Default: "visible")

	@cmode string: This flag controls the type of the created netCDF file. 
	Select the "Standard" option in case hdf5 library is NOT installed on your 
	system, or the "HDF5" option otherwise.
	(Default: "HDF5")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def FacesExtendTarget(boundary_cons, range, delete_hots_flag, patch_flag, target_face, project_flag):

	"""

	This function extends Faces (source), according to a specified distance 
	or until they reach a target Face or target group of Faces, by adding new 
	Faces as extensions to the source ones.


	@boundary_cons object: A red cons or a list of red cons.

	@range float: The appropriate extension distance.

	@delete_hots_flag boolean: True or False, in cases that a selection of CONS could be replaced 
	by one CONS or not (by removing their intermediate Hot Points).

	@patch_flag boolean: If set to True, the created extension faces lay on new surfaces.
	If set to False, the new face gives the surface to the original faces too.

	@target_face object: (optional)A face or a list of target faces.

	@project_flag boolean: (optional)If set to True, topology is applied between extended and target Faces.
	(Default: False)

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def ResultsMapperReleaseResults(mappers):

	"""

	Releases the entities that are created by the mapper upon 'Apply'.
	After that the mapper can be deleted without deleting the aforementioned entities.


	@mappers object: A list of the mapper entities to be released.

	@returns object: Returns always None.

	"""

def OutputU3DPDF(filename):

	"""

	This function outputs a PDF format containing all the entities of the database that is currently loaded.


	@filename string: The name of the output file. It must include the full path.

	@returns integer: Returns 0 on success, 1 on failure.

	"""

def GetLogFile(log_type,filename):

	"""

	This function returns the full file name of the log file.


	@log_type string: (optional)The type of the log file to return.
	Accepted values: "", "BatchMesh", "SkinResults".
	"" corresponds to ANSA input log file, which is the default value.

	@filename string: (optional)The name of the file which will produce the log file.

	@returns object: Returns the name of the log file of the given process.
	If filename argument exists, the function will return the log file which will be writen
	according to the options selected on ANSA defaults, else it returns the last used log file.

	"""

def SeatPositionForImpactTests(protocol, field, field_points, SRP_body, seat_fore_aft, seat_height, seat_back_angle, head_restraint_height, head_restraint_fore_aft, base_tilt, position_name):

	"""

	This function performs the setup of the seat positioning parameters and the seat adjustments.


	@protocol string: (optional)The name of the impact's protocol.
	-For frontal impact: 'UN_R94', 'C_NCAP_Frontal', 'Euro_NCAP_Full_Width', 
	'Euro_NCAP_ODB'.
	-For side impact: 'Euro_NCAP_MDB', 'Euro_NCAP_Pole', 'UN_R95', 
	 'US_NCAP_FMVSS_214_ES_2RE', 'US_NCAP_FMVSS_214_SID_2s', 'ISO_WorldSID_50', 
	 'C_NCAP_Side', 'UN_R135'.
	Custom.

	@field object: (optional)The name or the PID of the seat adjustments' field.

	@field_points object: (optional)The locations of the seat adjustments' field points.
	A_SRP       float float float
	B_MostFront float float float
	C_SRP       float float float
	Cprime_SRP  float float float
	D_MostRear  float float float

	@SRP_body object: (optional)The name or the ID of the Seat Reference's Point KinBody.

	@seat_fore_aft object: (optional)A dictionary for the Seat Fore/Aft adjustment with the following key - values:
	-skip                  boolean True to skip the adjustment or False to not.
	-configuration         object  The name or the ID of the Kinematic Configuration.
	-bearing_configuration object  The name or the ID of the bearing's Kinematic 
	                               Configuration.
	-characteristic        string  The name of the adjustment's characteristic (by_joint,
	                               most_forward, middle, combine).
	-value                 float   The value of the adjustment.
	-scale_factor          float   The bearing's configuration movement's scale factor.
	-target_point          float float float The location of the target point.

	@seat_height object: (optional)A dictionary for the Seat Height adjustment with the following key - values.
	-skip           boolean True to skip the adjustment or False to not.
	-configuration  object  The name or the ID of the Kinematic Configuration.
	-characteristic string  The name of the adjustment's characteristic (by_joint, height,
	                        middle, lowest).
	-value          float   The value of the adjustment.
	-lock_backrest boolean True to lock the backrest during adjustment of False to not
	-backrest_body object The name or the ID of the Backrest KinBody.

	@seat_back_angle object: (optional)A dictionary for the Seat Back Angle adjustment with the following key - values.
	-skip           boolean True to skip the adjustment or False to not.
	-configuration  object  The name or the ID of the Kinematic Configuration.
	-characteristic string  The name of the adjustment's characteristic (by_joint, 
	                        head_at_0, rotate_to).
	-value          float   The value of the adjustment.
	-torso_angle    float   The value of the torso angle.

	@head_restraint_height object: (optional)A dictionary for the Head Restraint Height with the following key - values.
	-skip            boolean True to skip the adjustment or False to not.
	-configuration   object  The name or the ID of the Kinematic Configuration.
	-characteristic  string  The name of the adjustment's characteristic (by_joint, 
	                         design_position, top_surface_level, middle, uppermost).
	-value           float   The value of the adjustment.
	-upper_height    float   The value of the upper height.
	-lower_height    float   The value of the lower height.
	-cog_dummy_head  float   The location of the dummy's head COG at axis Z.
	-dummy_head_body object  The name or the ID of the dummy's head KinBody.

	@head_restraint_fore_aft object: (optional)A dictionary for the Head Restraint Fore/Aft  with the following key - values.
	-skip            boolean True to skip the adjustment or False to not.
	-configuration   object  The name or the ID of the Kinematic Configuration.
	-characteristic  string  The name of the adjustment's characteristic (by_joint, 
	                         most_forward, most_rearward, middle).
	-value           float   The value of the adjustment.
	-forward_angle   float   The value of the forward angle.
	-rearward_angle  float   The value of the rearward angle.
	-dummy_head_body object  The name or the ID of the dummy's head KinBody.

	@base_tilt object: (optional)A dictionary for the Seat Base Tilt  with the following key - values.
	-skip            boolean True to skip the adjustment or False to not.
	-configuration  object  The name or the ID of the Kinematic Configuration.
	-characteristic string  The name of the adjustment's characteristic (by_joint, 
	                        middle, design_position).
	-value          float   The value of the adjustment.
	-lower_edge     float float float The location of the lower edge.
	-upper_height   float   The value of the upper height.
	-lower_height   float   The value of the lower height.
	-base_body      object  The name or the ID of the seat's base KinBody.

	@position_name string: (optional)The name of the created KinPosition at the end of the seat positioning.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def SeatDepenetrate(dummy_set_id, seat_set_id, frame_set_id, dx, dy, dz, factor, initial_foam):

	"""

	Provides the Decks>Safety>[Seat Depenetrate] button functionality.


	@dummy_set_id integer: A set that contains the Dummy parts that penetrate the Seat's cushion.

	@seat_set_id integer: A set that contains the Seat's cushion.

	@frame_set_id integer: A set that contains the frame elements that are places underneath the Seat's cushion.

	@dx float: The x coordinate of the move vector.

	@dy float: The y coordinate of the move vector.

	@dz float: The z coordinate of the move vector.

	@factor float: (optional)The property thickness factor.
	(Default: 1.0)

	@initial_foam boolean: (optional)If True, reference nodes keywords will be created at the end of the 
	depenetration procedure.
	(Default: False)

	@returns object: Returns 1 on success and 0 on failure.
	If initial_foam=True, the function returns a list of the initial_foam entities on success, 
	or None on failure.

	"""

def CreateVolumeBox(point1, point2, point3, dim_x, dim_y, dim_z, part, property, volumes):

	"""

	This function defines a rectangular hexahedron by creating six quadrilateral faces connected accordingly. 
	Apart from the six macro-faces, a Volume entity is also created.


	@point1 object: A list of x,y,z coordinates defining the center of the box.

	@point2 object: A list of x,y,z coordinates defining the X-axis of the box.

	@point3 object: A list of x,y,z coordinates defining the Y-axis of the box.

	@dim_x float: The dimension of the X-axis.

	@dim_y float: The dimension of the Y-axis.

	@dim_z float: The dimension of the Z-axis.

	@part object: (optional)The part for the created face(s).
	If nothing is passed, the current part is taken into consideration.

	@property object: (optional)The property for the created faces(s).
	If nothing is passed, the default property is taken into consideration.

	@volumes boolean: (optional)If set to True, apart from the six macro-faces, a Volume entity is also created.
	(Default: True)

	@returns object: Returns a list with the created faces, otherwise None.

	"""

def AddGroupsToConfiguration(groups, configuration):

	"""

	The function adds entities of type ANSAPARTS/ANSAGROUPS to a configuration.


	@groups object: A list that contains ansa entities of type ANSAPART / ANSAGROUP.

	@configuration object: The configuration entity that we want to add to.

	@returns boolean: Returns True, if every entity was either succesfully added or already existed in the configuration.
	Returns False, if one or more entities failed to be added to the configuration.

	"""

def RemoveGroupsFromConfiguration(groups, configuration):

	"""

	The function removes entities of type ANSAPARTS/ANSAGROUPS from a configuration.


	@groups object: A list that contains ansa entities of type ANSAPART / ANSAGROUP.

	@configuration object: The configuration entity that we want to remove from.

	@returns boolean: Returns:
	True: If every entity was either succesfully removed or was not a member 
	of the configuration.
	False: If one or more entities failed to be removed from the configuration.

	"""

def FuseTreeStructures(model_1, model_2):

	"""

	This function fuses two part/group tree structures, by checking if the last level 
	parts(/groups) of the second tree can be hanged or replace the last level groups 
	of the first one. The merging only takes the parts'(/groups') "Name" and hierarchy 
	position(parents) into account. Anything that cannot be hanged will be discarded 
	from the second model. The second model will be replaced by the result.


	@model_1 object: The first ANSA model, that holds the first tree structure to use for the fusion.

	@model_2 object: The second ANSA model, that holds the second tree structure to use for the fusion.
	This model will hold the result, after the fusion takes place.

	@returns boolean: Returns False if any of the two arguments is not a valid ANSA model.
	Returns True in any other case.

	"""

def Sgraph(group_1, group_2, detailed_results):

	"""

	This function creates the Separation graph (SGRAPH) between two models and returns the calculated results.


	@group_1 object: (optional)A list that contains elements like volumes, shells and solids and 
	containers like group, parts, sets.
	These entities are going to be loaded in SGRAPH group1.

	@group_2 object: (optional)A list that contains elements like volumes, shells and solids and 
	containers like group, parts, sets.
	These entities are going to be loaded in SGRAPH group2.

	@detailed_results boolean: (optional)If set to True, results will contain the distance vectors coordinates calculated 
	by Separation Graph, per element.
	If set to False, results will contain the distance calculated by Separation 
	Graph, per element.
	(Default: False)

	@returns object: Returns a dictionary. 
	The keys are the elements and their respective data are lists of dictionaries.
	If the key element is shell then the list contains only one dictionary.
	This dictionary structure is described below.
	   KEY               VALUE
	  shell         list( nearest_entity, dist )  =  results referred to shell's COG      
	  node1         list( nearest_entity, dist )  =  results referred to shell's node1
	  node2         list( nearest_entity, dist )  =  results referred to shell's node2 
	  node3         list( nearest_entity, dist )  =  results referred to shell's node3 
	  node4         list( nearest_entity, dist )  =  results referred to shell's node4 
	
	If the key element is solid then list contains one dictionary for-each solid's facet. 
	These dictionaries have the following structure.
	   KEY                  VALUE
	  facet(SOLIDFACET)  list( nearest_entity, dist )  =  results referred to facet's COG  
	  node1              list( nearest_entity, dist )  =  results referred to facet's node1
	  node2              list( nearest_entity, dist )  =  results referred to facet's node2 
	  node3              list( nearest_entity, dist )  =  results referred to facet's node3 
	  node4              list( nearest_entity, dist )  =  results referred to facet's node4 
	
	nearest_entity:: the entity from the other group that nodes or COGs find the projection with minimum distance.
	dist:: if argument detailed_results is set to True dist will contain the projection vector coordinates
	 (x_start, y_start, z_start, x_end, y_end, z_end).
	 If argument detailed_results is set to False dist will contain the projection distance.
	
	Faces are not supported in this function.

	"""

def FacesShrink(entities, width, method, delete_old_faces):

	"""

	This script function shrinks inward a selected Face by a given distance value. The result is either a new zone in Face(s), created by cutting the old Face(s) by using its perimeters, or new smaller Face(s), or a set of 3D-curves corresponding to the Face's boundary.


	@entities object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@width float: The distance value.

	@method integer: 0: For creating a new zone in Face(s) by cutting the old Face(s) 
	by using its perimeters.
	1: For creating new smaller Face(s)
	2: For creating a set of 3D-curves corresponding to the Face's boundary.

	@delete_old_faces boolean: (optional)If the argument 'method' is 1 (create  new smaller Face(s)), 
	set to True to delete the old Face(s), or False for the old Face(s) to remain.
	(Default: False)

	@ret_ents boolean: (optional)If True and named argument 'method' equals to 0 or 1 returns a list containing two lists, in success, otherwise None.
	In success, first list contains resulted CONS and second list contains resulted faces.
	If named argument 'method' equals to 2 returns a list with the created Curves, in success, otherwise None.
	If False, returns 1 in case of success or 0 otherwise.

	@returns integer: Returns 1 in case of success or 0 otherwise.

	"""

def SizeBoxConvertToMorph(entities):

	"""

	A function that converts size boxes to morphing boxes.


	@entities object: A list that contains size boxes.

	@returns object: Returns a list containing references to the newly created box objects on success, or 0 on failure.

	"""

def LaminateLayerChangeOrientation(deck, laminate, sequence_pos, layer_pos, orientation_type, elements, vertical_limit, orientation_vector, orientation_element, orientation_curves):

	"""

	Changes the mapped orientation of a laminate layer.


	@deck integer: One of NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS, PERMAS.

	@laminate object: A laminate property.

	@sequence_pos integer: The index of sequence.

	@layer_pos integer: The index of layer.

	@orientation_type string: One of "by_vector", "by_theta", "by_edges".

	@elements object: (optional)A list of elements of the layer to change orientation. 
	If not given all elements of the layer are used.

	@vertical_limit float: (optional)The angle in degrees. The orientation change fails if the angle between 
	the normal vector and the vector which gives the orientation is greater 
	than the vertical_limit.

	@orientation_vector object: (optional)A list with three double values. Needed for "by_vector", "by_theta".

	@orientation_element object: (optional)An element needed for "by_theta".

	@orientation_curves object: (optional)A list of curves. Needed for "by_curves".

	@returns object: Returns None on success and a list of failed elements if any of the given elements fail to orient.

	"""

def NewSubsystem(name, module_id, subtype, is_folder):

	"""

	This function creates a new Subsystem with its name and/or its module id given by the user.


	@name string: (optional)The name of the new subsystem. 
	If an existing subsystem has the same name, the function will fail.

	@module_id string: (optional)The Module Id of the new subsystem. 
	If an existing subsystem has the same Module Id, the function will fail.

	@subtype string: (optional)The subtype of the new subsystem.
	Accepted values: "Regular", "Connecting"

	@is_folder boolean: (optional)If True, function creates a simple Group Subsystem

	@returns object: Returns a reference to the newly created subsystem object on success, or None on failure.

	"""

def NewConfiguration(name, module_id):

	"""

	This function creates a new Configuration with its name and/or its module id given by the user.


	@name string: (optional)The name of the new Configuration.
	If an existing Configuration has the same name, the function will fail.

	@module_id string: (optional)The Module Id of the new Configuration.
	If an existing Configuration has the same Module Id, the function will fail.

	@returns object: Returns a reference to the newly created configuration object on success, or None on failure.

	"""

def KineticsConvertPosition(position, conversion_type, output_directory, locations_type, velocities_type, sets_type, use_position_name, position_prefix_name, include_transform_file_name, include_trasform_full_path_names, morph_nodes_file_name, output_kinetics, deformed_bodies, include_transform_enable_file, morph_nodes_enable_file):

	"""
	Deprecated since version 17.1.0. Use function ConvertPosition instead.

	The function performs the conversion of Rigid Bodies locations and initial velocities to keywords that are 
	written in deck files. It also takes into account possible deformed bodies through the Dummy Seat depenetration
	tool as long as the corresponding nodes hold initial foam keywords, and also possible morphed nodes that have 
	been produced through the Kinematics-Morph coupling of ANSA.


	@position object: The KIN_POSITION entity.

	@conversion_type string: The conversion type.
	The available options are 'locations', 'velocities' or 'both'.

	@output_directory string: The directory that the files will be written out.

	@locations_type string: (optional)The available options are:
	LS-DYNA:  '*DEFINE_TRANSFORMATION' 
	          '*NODE'
	PAMCRASH: 'TRSFM /' 
	          'NODE /'.
	ABAQUS:   '*NMAP' 
	          '*NODE'
	RADIOSS:  '/TRANSFORM'
	          '/NODE'.
	
	The default option is defined in ANSA Defaults.

	@velocities_type string: (optional)The available options are:
	LSDYNA:   '*INITIAL_VELOCITY_SET'
	          '*INITIAL_VELOCITY_GENERATION'
	          '*INITIAL_VELOCITY_NODE'.
	PAMCRASH: 'INVEL_SET /' 
	          'INVEL_RIGID /' 
	          'INVEL_NODE /'
	ABAQUS:   'ROTVEL,SET'
	          'ROTATING_VELOCITY'
	          'ROTVEL,NODE'
	RADIOSS:  '/INIVEL_SET'
	          '/INIVEL_NODE'.
	
	The default option is defined in ANSA Defaults.

	@sets_type string: (optional)The available options are:
	LSDYNA: '*SET_NODE_LIST'
	        '*SET_NODE_GENERAL'
	PAMCRASH: 'NODE'
	          'GENERAL'
	
	The default option is defined in ANSA Defaults.

	@use_position_name boolean: (optional)Use Position's name as prefix for the created file. 
	The default option is defined in ANSA Defaults.

	@position_prefix_name string: (optional)The prefix to be used for the created file.
	The default option is defined in ANSA Defaults.

	@include_transform_file_name string: (optional)LSDYNA: The name of the separate file to write out 
	the *INCLUDE_TRANSFORM keywords.
	The default option is defined in ANSA Defaults.

	@include_trasform_full_path_names boolean: (optional)LSDYNA: If a Rigid Body contains an *INCLUDE, the corresponding
	 *INCLUDE_TRANSFORM that is going to be created will written out 
	by using its FullPathName.
	The default option is defined in ANSA Defaults.

	@morph_nodes_file_name string: (optional)The name of the separate file to write out the morphed nodes.
	The default option is defined in ANSA Defaults.

	@output_kinetics boolean: (optional)Output as ANSA comments the participating Kinetic entities.
	The default option is defined in ANSA Defaults.

	@deformed_bodies object: (optional)A list that contains the names of the Rigid Bodies that have been 
	deformed through the Dummy-Seat Depenetration tool and their 
	nodes hold initial foam keywords.
	For each of those nodes a set will be written out and the 
	corresponding transformation keyword.

	@include_transform_enable_file boolean: (optional)LSDYNA: Output *INCLUDE_TRANSFORM keywords in a separate file. 
	In case there are Rigid Bodies that contain *INCLUDEs.
	The default option is defined in ANSA Defaults.

	@morph_nodes_enable_file boolean: (optional)Output Morphed Nodes in a separate file.
	The default option is defined in ANSA Defaults.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.0. Use function ConvertPosition instead.", DeprecationWarning)

def OutputEpilysis(filename, include, mode):

	"""

	Outputs the model to EPILYSIS DB.


	@filename string: (optional)Filename of EPILYSIS DB.
	(Default: "Untitled.edb", in the current directory)

	@include object: (optional)ANSA Include entity.

	@mode string: (optional)"all", "model" or "visible".
	(Default: "all")

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def Epilysis(jobname, output_dir, mode, include, out_edb, scratch_dir, run_meta, meta_args ):

	"""

	Solves the model with the BETA EPILYSIS solver.


	@jobname string: (optional)The job name. (Default: "Untitled.edb")

	@output_dir string: (optional)The output directory. By default the current directory.

	@mode string: (optional)One of "all", "visible" or "model".
	(Default: "all")

	@include object: (optional)The ANSA Include entity.

	@out_edb boolean: (optional)True to output the EPILYSIS DB.
	(Default: False)

	@scratch_dir string: (optional)The scratch directory. By default the current directory.

	@run_meta boolean: (optional)Run META on finish.
	(Default:False)

	@meta_args string: (optional)META arguments.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def GetPartFromName(name, type):

	"""

	This function returns an "ANSAPART" or "ANSAGROUP",
	according to the "name" given as argument.
	
	This function can also return an "ANSA_CONFIGURATION" or "ANSA_SUBSYSTEM",
	if the second optional argument "type" is used.


	@name string: The name.

	@type string: (optional)The type of the entity.
	For Configurations use type: "ANSA_CONFIGURATION".
	For Subsystems use type: "ANSA_SUBSYSTEM".
	For Simulation Models use type: "ANSA_SIMULATION_MODEL"
	For Simulation Runs use type: "ANSA_SIMULATION_RUN"

	@returns object: Returns a reference to the "ANSAPART" or "ANSAGROUP" with the specified Name.
	If such part does not exist None is returned.
	
	If the additional argument "type" has been used, this function returns
	an "ANSA_CONFIGURATION" or an "ANSA_SUBSYSTEM".

	"""

def Compare(parts, filename_in, file_type, input_deck, model1, model2, model1filenames, model1filetypes, model2filenames, model2filetypes, report_export_dir, meta_post_command, meta_post_script, ansa_post_script, c_state_export_dir, compare_action, matched_parts_map, report_filename, matched_diffs_list, dock_area):

	"""

	Compares two models to identify the differences, based on the matching/diffing criteria specified in the
	ANSA.defaults.
	Three use cases are supported:
	-1st Use Case: Compare a list of parts of the current model with an incoming model. The incoming model can
	 be an ANSA database, an Input file, or a Connection file.
	-2nd Use Case: Compare two models, which can be created through merge/input of ANSA databases/Input files.
	-3rd Use Case: Compare two models, where each model can consist of more than one files. The supported file
	 types are ANSA database, Input file, and Connection file.
	
	Additionally, a series of optional actions are provided and the user can:
	- export a report with the identified differences in PDF, PPTX, XLSX, and CSV formats,
	- save the comparison results list for future use,
	- apply the made decisions (by default the entities of Model 2 are kept),
	- leave the comparison process open for further manual handling, and
	- cancel the comparison process.


	@parts object: (optional)(1st Use Case) A list with the parts of the current model to be
	compared.

	@filename_in string: (optional)(1st Use Case) The full path of the incoming model.

	@file_type string: (optional)(1st Use Case) The type of the file of the incoming model. It can be
	'AnsaDB' for ANSA database, 'DeckFile' for Input file, and 'VIP', 'VIP2',
	'XML' for the respective Connection file.
	(Default: 'AnsaDB')

	@input_deck string: (optional)(1st Use Case) The type of the Input file if the incoming model e.g.
	'Nastran', 'LsDyna', 'PamCrash', 'Abaqus', 'Radioss', 'Ansys', etc.
	(If the file_type = 'DeckFile'). The default value is the current deck.

	@model1 object: (optional)(2nd Use Case) The 1st model to be compared (it can be created through
	the CreateNewAnsaModel script function).

	@model2 object: (optional)(2nd Use Case) The 2nd model to be compared (it can be created through
	the CreateNewAnsaModel script function).

	@model1filenames object: (optional)(3rd Use Case) A list with the full paths of the files which constitute
	Model 1.

	@model1filetypes object: (optional)(3rd Use Case) A list with the types of the files included in the
	model1filenames list. They can be 'ANSA_DB_TYPE' for ANSA database,
	'INPUT_FILE_TYPE' for Input file, and 'CONN_VIP_TYPE', 'CONN_VIP2_TYPE',
	'CONN_XML_TYPE' for the respective Connection files.

	@model2filenames object: (optional)(3rd Use Case) A list with the full paths of the files which constitute
	Model 2.

	@model2filetypes object: (optional)(3rd Use Case) A list with the types of the files included in the
	model2filenames list. They can be 'ANSA_DB_TYPE' for ANSA database,
	'INPUT_FILE_TYPE' for Input file, and 'CONN_VIP_TYPE', 'CONN_VIP2_TYPE',
	'CONN_XML_TYPE' for the respective Connection files.

	@report_export_dir string: (optional)The full path of the directory where all the data, which are needed
	for the generation of the report, are exported.

	@meta_post_command string: (optional)The full path of the META PostProcessor executable. META PostProcessor
	is used for the generation of the PDF and PPTX reports.

	@meta_post_script string: (optional)The full path of the script used for the generation of the PDF and
	PPTX reports.

	@ansa_post_script string: (optional)The full path of the script used for the generation of the CSV and
	XLSX reports.

	@c_state_export_dir string: (optional)The full path of the ".ansa_compare" file, where the comparison
	results list will be saved.

	@compare_action string: (optional)Defines the action taken once the comparison process is completed.
	It can be 'OK' to apply the made decisions (by default the entities of
	Model 2 are kept), 'SHOW_CARD' to keep the Compare Report window 
	open, 'SHOW_COMPARE_OPTIONS_AND_CARD' to keep the Advanced 
	View Options and the Compare Report windows open, and 'CANCEL' to 
	cancel the comparison process.
	(Default: 'CANCEL)'

	@matched_parts_map object: (optional)A dictionary with the ANSA Ids of the matched parts. The Ids of Model 1
	are set as keys and the Ids of Model 2 are set as values. This argument is
	given by the user and it is filled in during the execution of the function.
	As a result the length of the dictionary is the number of the matched parts.
	The ANSA Ids refer to Model 1 and Model 2, and if these Models are merged,
	the returned Ids are invalid.

	@report_filename string: (optional)Defines the file name of the generated report.

	@matched_diffs_list object: (optional)A list in which two dictionaries are appended, one for each of the 
	Compare Models (Model 1 and Model 2). Each of the dictionaries contain 
	the Ids of the matched parts as keys and the percentage difference as 
	value. This argument is given by the user and it is filled in during the 
	execution of the function. As a result the length of the dictionaries is 
	the number of the matched parts for each Model. The ANSA Ids refer to 
	Model 1 and Model 2, and if these Models are merged, the returned Ids 
	are invalid. The length of the input list is increased by 2.

	@dock_area string: (optional)Defines the location where the "Compare Report" window will be docked.
	The accepted values are "LeftDockArea".

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def LaminateRosetteInfo(deck, laminate, rosette, fields):

	"""

	Gets values from a Rosette for the specified laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: A reference to a laminate Property.

	@rosette integer: The id of the rosette to get its values.

	@fields object: A list of the fields to retrieve info.
	
	Available fields are:
	
	name:       The name of the rosette.
	position:   A list with the coordinates of the position vector (x,y,z).
	direction:  A list with the coordinates of the direction vector (x, y, z).
	reference:  A list with the coordinates of the reference vector (x,y,z).
	coordinate: An object of the coordinate system if the rosette is defined on a coordinate, 
	            or None if it isn't.

	@returns object: Returns a dictionary with keys the 'fields' values.

	"""

def BlockRedraws(block):

	"""

	This function is used to block and unblock any drawing action in ANSA main GL area.
	It is used to block/unblock any drawing update actions, in case drawing while in the 
	middle of some procedure is unwanted or time consuming.


	@block boolean: Set this variable to 'True' to block all redraw actions or 'False' to enable drawing again.

	@returns integer: Always returns 1.

	"""

def SCTetraCreateRegionsForUnreferencedProperties():

	"""

	This function automatically creates REGIONs in SC TETRA deck for every PSHELL and PSOLID that are
	not referenced by any REGION. It works on the whole model, and thus, it takes no arguments.


	@returns integer: Returns 1 in all cases.

	"""

def CreateNewAnsaWindow(name):

	"""

	Creates a new ANSA window with the given name.


	@name string: (optional)The name of the window that will be created.

	@returns object: Returns a reference to the newly created window object.

	"""

def GetAnsaWindow(name):

	"""

	Returns a reference to the ANSA window with the given name.


	@name string: The name of the requested ANSA window.

	@returns object: Returns a reference to the ANSA window with the given name.

	"""

def GetAnsaWindowName(window):

	"""

	Returns the name of the given ANSA window.


	@window object: A reference to the ANSA Window to retrieve its name.

	@returns string: Returns the name of the requested ANSA window.

	"""

def LoadAnsaModelToAnsaWindow(model, window):

	"""

	Loads a model to an ANSA window.


	@model object: A reference to the model.

	@window object: A reference to the ANSA window.

	@returns object: Always returns None.

	"""

def LoadAllAnsaModelsToAnsaWindow(window):

	"""

	Loads all the existing models to the given ANSA window.


	@window object: A reference to the ansa window.

	@returns object: Always returns None.

	"""

def SyncWindows(windows):

	"""

	Syncronizes the views of listed ANSA windows.


	@windows object: (optional)A list of the requested ANSA windows to be synchronized.

	@returns object: Always returns None.

	"""

def CloseAnsaWindow(window):

	"""

	Closes an existing Ansa window.


	@window object: A reference to the window to be closed.

	@returns object: Always returns None.

	"""

def UnloadAnsaModelFromAnsaWindow(model, window):

	"""

	Unloads a model from an ANSA window.


	@model object: The model to unload.

	@window object: The respective ANSA window.

	@returns object: Always returns None.

	"""

def UnloadAllAnsaModelsFromAnsaWindow(window):

	"""

	Unloads all models loaded in an ANSA window.


	@window object: The respective ANSA window.

	@returns object: Always returns None.

	"""

def SmoothResultFeatureBased(result,flatten_top,flatten_bottom,zero_abs_range,cutoff_curvature, cutoff_displacement):

	"""

	Function for applying feature based smoothing on a created result.


	@result object: An OpenFoam result object.

	@flatten_top float: (optional)Values greater than the one defined will be flattened.

	@flatten_bottom float: (optional)Values smaller than the one defined will be flattened.

	@zero_abs_range float: (optional)Set to 0 to absolute values smaller than the one defined.

	@cutoff_curvature float: (optional)Mean curvature in each node is checked and if its ratio is below 
	this value the node is omitted. Values should be in the 0-1 range. 
	(Default: 0, Nothing is ommited)

	@cutoff_displacement float: (optional)It's the ratio of the vector measure, from which and below 
	the vector will be omitted.

	@returns integer: Returnd 0 on success and 1 on error.

	"""

def GetFacesOfHotPoints(hot_points):

	"""

	Returns a list with the faces that the input hot points belong to.


	@hot_points object: A hot point entity, a hot point ID, a list of hot point entities, 
	a list of hot point IDs, or a list of hot point entities and IDs.

	@returns object: A list with the faces that the input hot points belong to.

	"""

def GetMacrosOfHotPoints(hot_points):

	"""

	Returns a list with the macros that the input hot points belong to.


	@hot_points object: A hot point entity, a hot point ID, a list of hot point entities, a list of hot point IDs, 
	or a list of hot point entities and IDs.

	@returns object: Returns a list with the macros that the input hot points belong to.

	"""

def GetConsOfHotPoints(hot_points):

	"""

	Returns a list with the adjacent CONS of the input hot points.


	@hot_points object: A hot point entity, or a hot point ID, or a list of hot point entities, 
	or a list of hot point IDs, or a list of hot point entities and IDs.

	@returns object: A list with the adjacent CONS of the input hot points.

	"""

def GetPerimetersOfHotPoints(hot_points):

	"""

	Returns a list with the adjacent perimeters of the input hot points.


	@hot_points object: A hot point entity, a hot point ID, a list of hot point entities, a list of hot point IDs, 
	or a list of hot point entities and IDs.

	@returns object: A list with the adjacent perimeters of the input hot points.

	"""

def FacesCut(node1, node2, heal, cut_option, auto_remesh_flg):

	"""

	Applies a parametric cut between input hot points and returns created faces, or a plane cut defined by a normal vector.


	@node1 object: Either a hot point entity or a hot point ID.

	@node2 object: Either a hot point entity or a hot point ID.

	@heal boolean: (optional)True for heal-cut, False (default) otherwise.

	@cut_option object: (optional)A dictionary containing tuples of string values 'parametrical' or 'plane' - 
	a triple of floats defining the normal vector of the cutting plane.
	Triple of floats may not be given, in case that the string value equals 
	to 'parametrical'.
	If the dictionary is not given, parametrical cut is the default state.

	@auto_remesh_flg object: (optional)If True and macros are meshed, cut and macros (that are affected) 
	remeshing will take place.

	@returns object: Returns a list with the created faces.

	"""

def CadToAnsa(parts, file_type_priority, num_of_parallel_jobs, time_out_limit, dm_path, representation_name, check_for_other_representations, script_per_part_file_name, script_per_part_function_name, script_all_parts_file_name, script_all_parts_function_name, reload_parts, open_window, report_dir, check_in_dm, ansa_executable, check_in_dm_representation_priority, use_attached_ansa_files_instead_of_checking_in_dm, conflict_nodes, conflict_properties, conflict_materials, conflict_sets, conflict_coords, conflict_bc_sets, open_group_files, use_always_the_ansa_feature):

	"""

	This function calls the CAD to ANSA functionality.


	@parts object: (optional)A list of parts for which CadToAnsa will run. If this 
	argument is missing, all parts of the ANSA database 
	will be sent to the function.

	@file_type_priority string: (optional)Set the suggested file type priority eg. 'jt, CATPart, igs'. 
	Default value is undefined.

	@num_of_parallel_jobs integer: (optional)Define how many processes will be launched to work in parallel.
	Use the number 0 to denote that no parallel processes should 
	be launched.
	(Default: 0)

	@time_out_limit integer: (optional)Maximum allowed time (in minutes) before a process 
	is considered as blocked.
	Blocked processes will be forced to finish.
	(Default: 30)

	@dm_path string: (optional)The DM path in which the parts will be saved. Alternatively, 
	the value "current" can be given to denote the usage of the 
	current DM path or the value "temporary" to denote the usage 
	of a temporary DM that will be deleted after usage.
	(Default: "temporary")

	@representation_name string: (optional)Representation name of the new translated parts that 
	will be saved in DM.
	(Default: "translated_cad")

	@check_for_other_representations boolean: (optional)In case the desired Representation does not exist in DM, 
	reload any other existing Representation name.
	(Default: True)

	@script_per_part_file_name string: (optional)Script that will be called after translating every part file. 
	This script will be called one time for every part.
	By default, no such script will be used.

	@script_per_part_function_name string: (optional)The function name to be called on the script specified 
	by: "script_per_part_file_name". 
	By default, no such function name will be used.

	@script_all_parts_file_name string: (optional)Script that will be called after opening all parts.
	This script will be called only one time at the end.
	By default, no such script will be used.

	@script_all_parts_function_name string: (optional)Script that will be called after opening all parts.
	This script will be called only one time at the end.
	By default, no such function name will be used.

	@reload_parts boolean: (optional)Set to False if the parts should not reloaded from DM.
	(Default: True)

	@open_window boolean: (optional)Set to True if the CAD to ANSA Settings window should 
	open before execution.
	(Default: False)

	@report_dir string: (optional)The directory in which the report files should be placed.

	@check_in_dm boolean: (optional)Set to False if you want to skip checking for available 
	representations in DM.
	(Default: True)

	@ansa_executable string: (optional)Define a specific ANSA executable to be used when 
	CAD to ANSA runs in parallel.

	@check_in_dm_representation_priority string: (optional)Define the priority of Representation names to be 
	checked in DM, e.g. 'crash, nvh, dura'.

	@use_attached_ansa_files_instead_of_checking_in_dm string: (optional)Give priority to open the attached ANSA or Solver files instead of reloading the part form DM.

	@conflict_nodes string: (optional)Determine how to resolve conflicts on Nodes during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_properties string: (optional)Determine how to resolve conflicts on Properties during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_materials string: (optional)Determine how to resolve conflicts on Materials during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_sets string: (optional)Determine how to resolve conflicts on Sets during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_coords string: (optional)Determine how to resolve conflicts on Coords during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_bc_sets string: (optional)Determine how to resolve conflicts on Bc Sets during merge. 
	Accepted values: "Offset", "Keep old". 
	Default value: "Offset".

	@open_group_files boolean: (optional)Defines if the attached files of groups will be opened. 
	Default value: False.

	@use_always_the_ansa_feature boolean: (optional)Defines if the parallel workers will always use the ANSA BETA LM feature or if it will be chosen automatically depending on the CAD file type.
	Default value: False

	@check_in_dm_ignore_status string: (optional)When checking in DM, ignore parts with specific DM/Status value. Example: 'WIP, Draft, In progress'.

	@conflict_sections string: (optional)Determine how to resolve conflicts on Sections during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_hourglass string: (optional)Determine how to resolve conflicts on Hourglass during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_eos string: (optional)Determine how to resolve conflicts on Eos during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@conflict_functions string: (optional)Determine how to resolve conflicts on Functions during merge. 
	Accepted values: "Offset", "Keep old", "Keep new". 
	Default value: "Offset".

	@parallel_jobs_execution string: (optional)Define if the parallel jobs will be executed locally or remotely from a SPDRM client. This option is available only when connected to a SPDRM with version > 1.6.0
	Accepted values: "Locally", "Remotely"
	Default value: "Locally"

	@returns integer: Returns 0 if the CAD to ANSA procedure has been executed successfully and 1 otherwise.

	"""

def SurfaceExtrudeExtrude(select_entities, dir_entities, direction_method, internal_face, respect_user_selection, point1, point2, distance, part, property, mirror, volumes, ret_ents):

	"""

	This function works in the same principle as the Sweep function of the same menu.
	It creates a surface out of an extruded profile. 
	When a surface is created, the topological conditions are automatically generated.


	@select_entities object: Is a list of entities for the extrusion surface. It can be either 
	Cons/Curves/ or Faces.

	@dir_entities object: Is a list of entities which defines the directrix (a chain of CONS or 
	3D-curve segments) of the extrusion.

	@direction_method integer: If 0, the extrusion performs by two points that defines the direction, 
	else directrix is being activated.

	@internal_face boolean: If True, result forms a closed volume or volumes where the internal 
	faces are created.

	@respect_user_selection boolean: If True, then the order of entries in entities will be respected and thus 
	Faces will be created according to that order.

	@point1 object: (optional)Is a list with x, y, z double coordinates that indicates the start of the 
	direction, in case that direction_method equals to 0.

	@point2 object: (optional)Is a list with x, y, z double coordinates that indicates the end of the 
	direction, in case that direction_method equals to 0.

	@distance float: (optional)If direction_method equals to 0 and distance is given, the length of the 
	created face(s) is equal to that input, otherwise the length is equal to the 
	distance of the vector that define point1 and point2.

	@part object: (optional)Is the part for the created face(s).

	@property object: (optional)Is the property for the created faces(s).

	@mirror boolean: (optional)If True bidirectionally extruded faces are being created , while direction_method equals to 0.
	Default value is False.

	@volumes boolean: (optional)If True, in case select_entities named_argument contains face(s), Volume creation takes place.
	Default value is False.

	@ret_ents boolean: (optional)If True returns created faces.
	Default value is False.

	@returns integer: It returns 1 if faces were created. Otherwise 0.

	"""

def ApplyResult(result):

	"""

	Script function for applying an OPENFOAM Result. Takes as input an unbuilt Result.


	@result object: An OPENFOAM result.

	@returns integer: Returns 1 on success, 0 otherwise

	"""

def FacesMiddleSingle(face1, face2, part, property, hide_used_faces):

	"""

	This function creates a middle Face between two Faces. The new Face will lie on a new 
	Surface that is created between the Surfaces of the two Faces. The shape of the resulting 
	middle Face is a combination of the perimeter shapes of the two ones.


	@face1 object: A face.

	@face2 object: A face.

	@part object: (optional)The part for the created face.

	@property object: (optional)The property for the created faces

	@hide_used_faces boolean: (optional)If set to False, initial input faces will not be hidden, 
	in case of graphical interface.
	(Default: True)

	@returns object: Returns the created face on success, otherwise None.

	"""

def ScaleResult(result, scale_value):

	"""

	Function for scaling an OPENFOAM Result. Takes as input a Result and the scale value.


	@result object: An OPENFOAM result object.

	@scale_value float: The scale factor.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def MoIsToPlotels():

	"""

	The function takes into account the visible elements, counts their principal 
	inertia axes and creates three pairs of auxiliary PLOTEL type elements according
	to the directions of the principal inertia axes. The three pairs of PLOTELs are
	named "Plotel for I1" and I2 and I3.


	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def GetEntitySubsystem(entity):

	"""
	Deprecated since version 17.1.3. Use function GetEntityCardValues instead.

	The function returns all the subsystems that contain the specified entity.


	@entity object: This can be either a part or an include entity.
	The function will not work for any other entity type.

	@returns object: Returns a list of subsystems. If the specified entity does not belong to any subsystem, 
	then the function will return an empty list.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.3. Use function GetEntityCardValues instead.", DeprecationWarning)

def CurvesTangentCurve(entity, point_on_entity, point_direction, distance, part):

	"""

	This function defines a 3D-curve as the tangential extension of a selected entity.
	The entity can be a 3D-curve, CONS or Cross Section segment. 


	@entity object: A 3D-curve, CONS or Cross Section segment.

	@point_on_entity object: A list with x, y, z double coordinates that indicates the start point 
	of the tangent vector for the new 3D Curve.

	@point_direction object: A list with x, y, z double coordinates that indicates the direction point, 
	defining the end of the tangent vector for the new 3D Curve.

	@distance float: (optional)Defines the extend length value. If distance is not defined the length 
	of the created segment equals to the distance between the start point 
	of the tangent vector and the projection point of "point_direction" 
	upon the tangent.

	@part object: (optional)The part for the created tangent curve.

	@returns object: Returns the created tangent curve, otherwise None.

	"""

def FacesProjectCut(node1, cons):

	"""

	This function is used to cut (split) a Face by combining the Hot Points>Project and Faces>Cut functions.
	In other words, it splits a face between a selected hot point and its projection on a selected CONS parametrically.


	@node1 object: The selected hot point.

	@cons object: The selected cons that projection will be held.

	@returns object: Returns a list with the created faces on success, otherwise None.

	"""

def HotPointsRelease(hot_points):

	"""

	This function releases Hot Points that lie on the limit of two or more faces. When a Hot Point is released, the adjacent CONS of the faces' limits are also released and become single CONS (marked in red). As a result, the local topology changes.  


	@hot_points object: (optional)Accepted values: a hot point, a list of hot points, a string with value 'visible' or 
	a string with value 'all'. 
	If it is called with 'visible', it works with all the visible hot points.
	If it is called with 'all', it works with all the hot points.

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def HotPointsDelete(hot_points):

	"""

	This function deletes Hot Points either lying on a CONS segment or on an FE perimeter. After deletion, the adjacent 
	CONS segments or FE perimeters sharing the Hot Point become one.


	@hot_points object: A hot point, a list of hot points, a node, a list of nodes, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible hot points.
	If it is called with 'all', it works with all the hot points.

	@returns integer: Returns 1 if the deletion succeeded, otherwise 0.

	"""

def IsolateRadius(radius):

	"""

	This function isolates on the screen all the faces based on a given radius limit.


	@radius float: The radius limit to isolate the faces.

	@returns integer: Always returns 1.

	"""

def HotPointsParametrical(entities, points_dir, method, distance, produce3dpoint, remesh):

	"""

	This function defines a new Node or Hot Point parametrically on a 3D-curve segment, 
	on a CONS segment or on a linear element. The input parameter value may vary from 0 to 1, 
	describing the percentage of the length of the 3D-curve or CONS, corresponding to method equals to 1.
	Alternatively, it can be an exact value of distance corresponding to method equals to 0.


	@entities object: A list of CURVES, CONS or LINEAR ELEMENTS, where the hot point will be 
	defined parametrically.
	Alternatively, a dictionary containing tuples of entities (CURVES, CONS, 
	LINEAR ELEMENTS) - a triple of floats defining the start point of the 
	corresponding entity. If triple of floats is empty the start point of the entity
	will be taken into account by default. If argument is a dictionary, point_dir 
	argument could not be given.

	@points_dir object: (optional)A list of x, y ,z coordinates defining the start point of the corresponding entity.
	If not given, x, y, z coordinates from entities dictionary will be taken into account, 
	otherwise the start point of the entity.

	@method integer: (optional)If 0, the input value can be the exact distance which may vary from 0 to the 
	length of the entity, otherwise the input parameter value may vary from 0 to 1, 
	describing the percentage of the length of the 3D-curve, cons or linear element.
	(Default: 0)

	@distance float: (optional)The input parameter value which may vary from 0 to 1, describing the percentage 
	of the length of the 3D-curve, cons or linear element. Alternatively, it can be 
	an exact value of distance.
	If not given, method value becomes 1 and distance 0.5.

	@produce3dpoint boolean: (optional)If set to True, produces a 3d point instead of a hot point, else a hot point.

	@remesh boolean: (optional)In case of CONS, if set to True, the Macro Area will be remeshed, else not.

	@returns integer: Returns the number of the valid insertions on success, otherwise 0.

	"""

def SurfaceContoured(entities, part, property, coordinates, additional_coordinates, direction, perpendicular_mode):

	"""

	This function creates surfaces, passing through selected curves, which essentially become surfaces' profile curves.


	@entities object: A list of entities that will comprise the surface's cross sections. It
	can be either Cons/Curves/Morph edges/Linear Elements, a string with 
	value 'visible' or a string with value 'all'. If it is called with
	'visible', it works with all the visible entities concerning the above
	types. If it is called with 'all', it works with all the entities.

	@part object: (optional)The part for the created face(s).

	@property object: (optional)The property for the created faces(s).

	@coordinates object: (optional)A list with lists of triple coordinates, that define the start of each profile curve.

	@additional_coordinates object: (optional)A list with lists of triple coordinates, that define the spots where
	additionals surfaces will be created. All profile curves should have 
	the same number of spots and the spots that concern a profile should
	be given in order (in compliance with the direction). At closed 
	profile curves, if no additional surfaces are requried the list should
	be empty. At opened profile curves the list should always contain the
	end of each profile curve, even if no additional surfaces are requried.

	@direction object: (optional)A list with lists of triple coordinates, that define points which are
	on profile curves and very close to the points of the coordinates list. 
	That points mark the direction. If the list is empty the direction of
	each profile curve will be defined automatically. If the desired
	direction differs from the one that is calculated automatically ,
	the direction list should be used. The order of the given points for
	a cross section at additional_coordinates list should be in compliance
	with the given direction or with the direction that is calculated
	automatically (if no direction is given).

	@perpendicular_mode object: (optional)If it is 1 the created surfaces will be tanget to the planes that are
	defined by profile curves. (This option has effect only if all profile
	curves can define a plane). The default value is 0.

	@returns object: Returns a list containing referenecs to the newly created entities on success, otherwise None.

	"""

def DefineInterfaceBoundary( faces, part, pid, red, blue, subsystem ):

	"""

	This functions create Interface Boundary Entities from the given list of faces or cons.


	@faces object: A list that contains faces, cons or both.

	@part boolean: (optional)If set to True, Interface Boundary Entities, between different parts will be created.

	@pid boolean: (optional)If set to True, Interface Boundary Entities, between different pids will be created.

	@red boolean: (optional)If set to True, Interface Boundary Entities, from red Cons will be created.

	@blue boolean: (optional)If set to True, Interface Boundary Entities, from blue Cons will be created.

	@subsystem boolean: (optional)If set to True, Interface Boundary Entities, between different subsystems will be created.

	@returns object: Returns a list of the Interface Boundary Entities that have been created.
	If no Interface Boundary Entity has been created, the function returns None.

	"""

def GetKeywordFieldLabels(deck, type):

	"""

	Returns a list with the field labels of an entity card.


	@deck integer: The deck of the entity card.

	@type string: The name of the entity card.

	@returns object: Returns a list with the field labels of the entity card.

	"""

def SetPickMethod(pick_method):

	"""

	This function sets the picking method(s) to be used by picking functions (e.g. PickEntities()), for line and area elements.
	It should be called before the picking function.


	@pick_method integer: A combination of one or more of the following picking methods.
	NOTE: Although all the following methods can be combined, there is no point in that since 
	all line methods, as well as all area methods, are mutually exclusive.
	You could, however set a combination of an area and a line method.
	
	-base.constants.ENT_SELECTION: Pick line or area elements with the Feature Selection>ENT 
	 method.
	-base.constants.LINE_ANGLE_SELECTION: Pick line elements with the Feature Selection>Feature 
	 Line method.
	-base.constants.LOOP_SELECTION: Pick line elements with the Feature Selection>Loop method.
	-base.constants.PID_NEIGHB_SELECTION: Pick line elements with the Feature Selection>PID 
	 Neighbs method.
	-base.constants.OPPOSITE_SELECTION: Pick line elements with the Feature Selection>Opposite method.
	-base.constants.LINE_PERIM_SELECTION: Pick edges with the Feature selection>Perimeter method.
	-base.constants.POLY_LINE_NODE_SELECTION: Pick line elements with the Feature Selection>Path method.
	-base.constants.POLY_LINE_OPPOSITE_SELECTION: Pick line elements with the 
	 Feature Selection>Opposite Path method.
	-base.constants.AREA_ANGLE_SELECTION: Pick area elements with the Feature Selection>Feature 
	 Area method.
	-base.constants.PID_SELECTION: Pick area elements with the Feature Selection>PID method.
	-base.constants.PID_REGION_SELECTION: Pick area elements with the Feature Selection>PID 
	 Region method.
	-base.constants.MID_SELECTION: Pick area elements with the Feature Selection>MID method.
	-base.constants.VOL_SELECTION: Pick area elements with the Feature Selection>VOL method.
	-base.constants.PART_SELECTION: Pick area elements with the Feature Selection>PART method.
	-base.constants.CFD_BC_SELECTION: Pick area elements with the Feature Selection>BC method.
	-base.constants.INCLUDE_SELECTION: Pick area elements with the Feature Selection>Include method.
	-base.constants.HBOX_FACE_SELECTION: Pick area elements with the Feature Selection>Hexa Box Face 
	 Area method.
	-base.constants.MACRO_SELECTION: Pick area elements with the Feature Selection>Macro method.
	-base.constants.POLY_AREA_AREA_SELECTION: Pick area elements with the Feature Selection>Poly 
	 Area method.
	-base.constants.POLY_LINE_AREA_SELECTION: Pick area elements with the Feature Selection>Poly 
	 Line method.
	-base.constants.FRONT_SELECTION: Pick entities which are only in the front view of the screen.
	-base.constants.NODES_SELECTION: Pick nodes with line elements tools. Mutually exclusive with base.constants.NODES_FROM_AREA.
	-base.constants.NODES_FROM_AREA: Pick nodes with area elements tools. Mutually exclusive with base.constants.NODES_SELECTION.

	"""

def GetPickMethod():

	"""

	This function returns the current picking method(s) that will be used the next time 
	that the user calls a picking function (e.g. PickEntities()).
	Possible returned values are a combination of the following constants:
	
	base.constants.ENT_SELECTION: Pick line or area elements with the Feature Selection>ENT method
	
	base.constants.LINE_ANGLE_SELECTION: Pick line elements with the Feature Selection>Feature Line method
	base.constants.LOOP_SELECTION: Pick line elements with the Feature Selection>Loop method
	base.constants.PID_NEIGHB_SELECTION: Pick line elements with the Feature Selection>PID Neighbs method
	base.constants.OPPOSITE_SELECTION: Pick line elements with the Feature Selection>Opposite method
	base.constants.LINE_PERIM_SELECTION: Pick edges with the Feature selection>Perimeter method
	base.constants.POLY_LINE_NODE_SELECTION: Pick line elements with the Feature Selection>Path method
	base.constants.POLY_LINE_OPPOSITE_SELECTION: Pick line elements with the Feature Selection>Opposite Path method
	base.constants.NODES_SELECTION: Pick nodes with line elements tools. Mutually exclusive with base.constants.NODES_FROM_AREA.
	base.constants.NODES_FROM_AREA: Pick nodes with area elements tools. Mutually exclusive with base.constants.NODES_SELECTION.
	
	base.constants.AREA_ANGLE_SELECTION: Pick area elements with the Feature Selection>Feature Area method
	base.constants.PID_SELECTION: Pick area elements with the Feature Selection>PID method
	base.constants.PID_REGION_SELECTION: Pick area elements with the Feature Selection>PID Region method
	base.constants.MID_SELECTION: Pick area elements with the Feature Selection>MID method
	base.constants.VOL_SELECTION: Pick area elements with the Feature Selection>VOL method
	base.constants.PART_SELECTION: Pick area elements with the Feature Selection>PART method
	base.constants.CFD_BC_SELECTION: Pick area elements with the Feature Selection>BC method
	base.constants.INCLUDE_SELECTION: Pick area elements with the Feature Selection>Include method
	base.constants.HBOX_FACE_SELECTION: Pick area elements with the Feature Selection>Hexa Box Face Area method
	base.constants.MACRO_SELECTION: Pick area elements with the Feature Selection>Macro method
	base.constants.POLY_AREA_AREA_SELECTION: Pick area elements with the Feature Selection>Poly Area method
	base.constants.POLY_LINE_AREA_SELECTION: Pick area elements with the Feature Selection>Poly Line method
	base.constants.KINBODY_SELECTION: Pick area elements with the Feature Selection>KINBODY method


	@returns object: Returns a combination of area and/or line mode picking methods, that will be used by picking functions.

	"""

def BestView(ent1, ent2, ent3):

	"""

	This function rotates the image automatically to align a view parallel to the screen.
	This function operates on Faces, Elements, Working Planes, Coordinate.


	@ent1 object: A referance to an entity, must be o a point reference if ent2 and ent3 arguments are used.

	@ent2 object: (optional)A reference to a point, ent1 must also be a point reference if used.

	@ent3 object: (optional)A reference to a point, ent1 must also be a point reference if used.

	@returns object: Returns 1 on success and None on failure.

	"""

def ConsOpenHole(entities, center, radius, normal, delete, reconstruct, tube, trim, link):

	"""

	This function opens holes on selected Faces or FE Shells, defining the center and the radius of the hole. 


	@entities object: A list of entities, where the holes will be opened. They can be either Faces, 
	FE Shells, a string with value 'visible' or a string with value 'all' . If it is called 
	with 'visible', it works with all the visible entities concerning the above types. 
	If it is called with 'all', it works with all the entities.

	@center object: A list with x, y, z coordinates defining the center of the hole.

	@radius float: (optional)The radius of the hole. This argument can be used alternatively to argument 'diameter' but not in conjuction with it.

	@normal object: (optional)A list with dx, dy, dz values, defining the normal vector of the created tubes, 
	in case that the tube flag is True.
	If the normal vector is not defined or is None, default value is given.

	@delete boolean: (optional)If True the entities will be deleted.

	@reconstruct integer: (optional)If FE Shells are given, reconstruct value defines the affected zones 
	that the reconstruction will be held.
	If 0, no reconstruction takes place.

	@tube boolean: (optional)If True, tube(s) can be generated.

	@trim boolean: (optional)If True, deletes redundant/excessive part of tube(s) defined.

	@link integer: (optional)When linked faces are involved on "delete" hole interior, then:
	-"0" means delete "All" linked faces.
	-"1" means delete "Child" linked faces.
	-"2" means "Convert" child linked faces.
	(Default: 0)

	@diameter float: (optional)The diameter of the hole. This argument can be used alternatively to argument 'radius' but not in conjuction with it.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def FacesExtendPairs(boundary_cons_1, boundary_cons_2, range, delete_hots_flag, patch_flag):

	"""

	This script function extends Faces (source), defined in two groups, by adding new Faces 
	as extensions to the source ones, according to a specified distance or until extension 
	of the one group reaches Faces of the other group. The new Surfaces are extensions of 
	the Surfaces of the sources. Topology will be applied automatically, only between Faces 
	of different groups. 


	@boundary_cons_1 object: A red cons or a list of red cons of the first group.

	@boundary_cons_2 object: A red cons or a list of red cons of the second group.

	@range float: The appropriate extension distance.

	@delete_hots_flag boolean: True or False, in cases that a selection of CONS could be replaced 
	by one CONS or not (by removing their intermediate Hot Points).

	@patch_flag boolean: If set to True, the created extension faces lay on new surfaces.
	If set to False, the new face gives the surface to the original faces too.

	@returns integer: Returns 1 on success or 0 on failure.

	"""

def ControlNewListItem(deck, control, type, index, entity, part_type):

	"""

	Adds a new item in a Control list.


	@deck integer: One of PAMCRASH, LSDYNA, RADIOSS.

	@control object: A reference to the Control entity.

	@type string: Keyword of the Control entity that has a list to be modified.

	@index integer: (optional)The index that the item will be inserted.
	If not specified, item will be inserted at the end of the list .

	@entity object: (optional)A reference to the entity that will replace the existing one.

	@part_type integer: (optional)The value of the TYPE field that will replace the existing one.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def ControlDeleteListItem(deck, control, type, index):

	"""

	Deletes an item from a Control list.


	@deck integer: One of PAMCRASH, LSDYNA, RADIOSS.

	@control object: A reference to the Control entity.

	@type string: Keyword of the Control entity that has a list that will be modified.

	@index integer: (optional)The index of the item that will be deleted.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def ControlModifyListItem(deck, control, type, index, entity, part_type):

	"""

	Modifies the values of an item of a Control list.


	@deck integer: One of PAMCRASH, LSDYNA, RADIOSS.

	@control integer: A reference to the Control entity.

	@type string: Keyword of the Control entity that has a list that will be modified.

	@index integer: (optional)The index of the item that will be modified.
	If not specified, all items of the list will be modified.

	@entity object: (optional)A reference to the entity that will replace the existing one.

	@part_type integer: (optional)The value of the TYPE field that will replace the existing one.

	@returns integer: Returns 0 if invalid arguments are specified, 1 otherwise.

	"""

def ControlInfoListItem(deck, control, type, index):

	"""

	Gets values from an item of a Control list.


	@deck integer: One of PAMCRASH, LSDYNA, RADIOSS.

	@control integer: A reference to the Control entity.

	@type string: Keyword of the Control entity that has a list to get values from.

	@index integer: (optional)The index of the item to get values from.

	@returns object: On success, it returns a dictionary with keys the labels of the fields and values their respective values.
	Otherwise, None is retuned.

	"""

def CurvesNew(coordinates, tangency, common, new_part):

	"""

	This function defines smooth 3D-curves by passing through a number of positions.


	@coordinates object: A list with lists of x, y, z coordinates defining the points that the 
	created curve passes through.

	@tangency object: (optional)A dictionary defining vectors (vx, vy, vz), controlling the tangency 
	at the start or at the end of the created curve.
	-'s' defines the starting vector (vx1, vy1, vz1).
	-'e' defines the ending vector (vx2, vy2, vz2).

	@common boolean: (optional)If True, the tangency of the starting vector, will also be imposed 
	on the ending vector and the curve will close.

	@new_part boolean: (optional)If True, a new part is given to the created curve, otherwise a current part.

	@returns object: Returns the created curve, otherwise None.

	"""

def LaminateSplitToOnePropertyPerLayer(deck, laminate, create_simple_props, skip_empty_layers):

	"""

	Takes a laminate with different elements per layer and creates one laminate property per layer.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: A laminate property.

	@create_simple_props boolean: (optional)If set to True, the laminate must not have woven layers and deck must be one of
	Nastran, LsDyna, Abaqus, Ansys and Permas (Nastran only for shells).

	@skip_empty_layers boolean: (optional)If set to True, no properties are created for empty layers.
	(Default: False)

	@returns object: Returns a list containing the created properties.

	"""

def MatchCurvesAndCons(curves, cons):

	"""

	Finds the identical input curves and cons (according to the "tolerance mode").


	@curves object: A list of curves to compare with cons.

	@cons object: A list of cons to compare with curves.

	@returns object: On success, it returns a list of matched curves and cons (two consecutive 
	list items correspond to a pair). On error, it returns 0.

	"""

def SaveFileAsCGR(filename):

	"""

	This function ouputs the visible entities with no hierarchy to a ".cgr" file.
	The units of the ".cgr" file are the same with the units of ansa at the time of the output.


	@filename string: The whole path to the file.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def SectionForceAssistant(entities, part, deck, section_type, name, multiple_planes, mp_number, mp_distance, mp_path, origin, normal_vector, create_geb, create_global, create_local, local_type, local_axis, circular, create_ref_node, ref_node, step):

	"""

	Creates a Section Force as the gui Assistant.


	@entities object: A list of elements to be cut.
	Can be Elements, Properties or Parts.

	@part object: (optional)The part of the created cross section force.

	@deck integer: (optional)The deck according to which the Section Force will be created.

	@section_type string: (optional)The section type when needed (PLANE, SET, CONTACT, LINK).

	@name string: (optional)The name of the created cs,

	@multiple_planes boolean: (optional)If set to True, multiple planes will be created.

	@mp_number integer: (optional)The number of the created planes when multiple planes will be created.
	(Only when multiple_planes=True)

	@mp_distance float: (optional)The distance between the planes when multiple planes will be created.
	(Only when multiple_planes=True with no mp_number)

	@mp_path object: (optional)The path (array of curves) of the created multiple planes.
	(Only when multiple_planes=True)

	@origin object: (optional)Origin point when single plane.

	@normal_vector object: (optional)Normal Vector when single plane.

	@create_geb boolean: (optional)If set to True, creates GEB_OR.

	@create_global boolean: (optional)If set to True, global cord output result.

	@create_local boolean: (optional)Local cord if create_local=True.

	@local_type string: (optional)"coord", "accelometer" of local.

	@local_axis string: (optional)Axis aligned with local. ( LX, LY, LZ, LI)

	@circular boolean: (optional)If set to True, creates circular cs.

	@create_ref_node string: (optional)Creation of reference node in Abaqus. (auto, specify, no) (only in Abaqus)

	@ref_node object: (optional)Reference Node in Abaqus (when create_ref_node = 'specify')

	@step object: (optional)Abaqus Step.

	@returns object: Returns a list containing references to the newly created Section Force objects.

	"""

def SeatFieldGetCharacteristicPoints(field):

	"""

	This function collects the positions of the seat adjustments' field characteristic points.


	@field object: The name or the PID of the seat adjustments' field.

	@returns object: Returns a dictionary with the following keys:
	        A_SRP, B_MostFront, C_SRP, Cprime_SRP and D_MostRear.

	"""

def SetGroupAsConfiguration(group):

	"""
	Deprecated since version 16.0.1. Use function NewConfiguration instead.

	WARNING: This function is obsolete! Use the function 
	"ansa.base.NewConfiguration" instead to create configurations.
	
	This function accepts a group and sets it to be a configuration.


	@group object: The group you wish to set as configuration.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 16.0.1. Use function NewConfiguration instead.", DeprecationWarning)

def RunParallelJobsOnParts(parts, num_of_parallel_jobs, per_part_script, per_part_script_function,per_part_script_data, time_out_limit, report_dir, ansa_executable):

	"""

	This function will execute a Python "per part" script on each given part 
	individually, in parallel. For each part, an ANSA process (Worker) is launched 
	in the background and runs the given script for that part.
	
	Apart from the "per part" script, a function must be specified on that script 
	file to run. The given function must accept one single argument. That argument 
	will be a dict that contains two keys:
	- 'part_attributes': The running part attributes.
	- 'per_part_script_data': Optional user data that should be given upon calling 
	the RunParallelJobsOnPart functions as an argument. If a lot of data should be 
	passed to the per part script function, eg. separate info for each part, all 
	this data could be written to a file and just the file path passed as per part 
	script data to get the data re-evaluated inside the function.
	
	The return value of the per part script function will be stored in a report.xml
	file stored in the "report_dir". The function can also return a dict with 
	special keys to denote an error or warning. The keys in the dict can be:
	"RETURN_ERROR", "RETURN_WARNING", "RETURN_VALUE".


	@parts object: A list of parts for which RunParallelJobsOnParts will run. 
	If this argument is missing, all parts of the ANSA database 
	will be sent to the function.

	@num_of_parallel_jobs integer: Define the maximum number of ANSA workers that will work 
	in parallel at any given time.

	@per_part_script string: The user per part script that will be called for each part.

	@per_part_script_function string: The function name to be called on the per part script. 
	See the function's description for more details.

	@per_part_script_data object: (optional)A dict which contains key-value string pairs of data which will be 
	available to the per part script function.
	See the function's description for more details.

	@time_out_limit integer: (optional)Maximum allowed time (in minutes) before a process is considered 
	as blocked. Blocked processes will be forced to finish.
	(Default: 30)

	@report_dir string: (optional)A directory that will contain detailed report (and execution) files for 
	reference purposes.

	@ansa_executable string: (optional)Define a specific ANSA executable to be used for parallel jobs.

	@returns integer: Returns 0 on success and 1 otherwise.
	
	WARNING: While the procedure may have been executed succesfully, the per part 
	script function may have failed for one or all parts, therefore the report
	directory files should be checked for detailed information if something has not
	worked as expected.

	"""

def CreateDMRoot(dm_root, dm_structure_xml):

	"""
	Deprecated since version 17.0.0. Use function CreateRootFolder instead.

	This function creates a new folder which can be then used as a DM Root.
	If a dm_structure.xml file is defined, it will be copied into that new folder.


	@dm_root string: The desired folder that will be used as a DM Root.

	@dm_structure_xml string: (optional)The source dm_structure.xml that will be copied to the new DM folder.

	@returns integer: Returns 1 if the function was successful and 0 on failure, 
	in one of the following cases:
	-If the new folder exists but has no write access.
	-If the new folder can't be created.
	-If the dm_structure.xml can't be copied to the new folder.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function CreateRootFolder instead.", DeprecationWarning)

def GetEntityDMProperties(entity):

	"""

	When connected to a DM, one may need to get an entity's DM Properties as a list.


	@entity object: The input entity whose properties will be returned.
	It may be one of the following: 
	-ANSAPART
	-ANSA_SUBSYSTEM
	-ANSA_SIMULATION_MODEL
	-ANSA_CONFIGURATION
	-ANSA_SIMULATION_RUN
	-ANSA_LOADCASE
	-ANSA_LIBRARY_ITEM
	-INCLUDE

	@returns object: Returns a list containing the DM Properties.
	Any properties that are ANSA Attributes, are returned with the "DM" prefix, e.g."DM/Discipline".

	"""

def UnvolumizeSolidLaminate(deck, laminate, delete, treat_initial_conditions):

	"""

	Converts a Solid Laminate into a Shell Laminate.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: The solid laminate to unvolumize.

	@delete boolean: (optional)Controls whether the original solid laminate will be deleted.
	(Default: True)

	@treat_initial_conditions boolean: (optional)Controls whether the initial conditions will be transferred to the new 
	shell element.
	(Default: True)

	@returns object: Returns the created shell laminate or None in case of failure.

	"""

def ConvertUnits(units, scale):

	"""
	Deprecated since version 18.0.0. Use function SetLengthUnits instead.

	Changes the current units by determining the appropriate input.
	Note that as the current units change, the tolerances are automatically adjusted.


	@units string: A string determining the desired change, available from 
	the below list:
	- "Kilometers (KM)"
	- "Meters (M)"
	- "Centimeters (CM)"
	- "Millimeters (MM)"
	- "Micrometers (UM)"
	- "Miles (MI)"
	- "Feet (FT)"
	- "Inches (IN)"
	- "Milliinches (MIL)"
	- "Microinches (UIN)"

	@scale boolean: (optional)If set to True, both units and coordinates change, otherwise 
	units are changed but the coordinates remain the same.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

	import warnings; warnings.warn("Deprecated since version 18.0.0. Use function SetLengthUnits instead.", DeprecationWarning)

def GatherFaces(face, feature_angle, visibility, container):

	"""

	Function that gathers the desired faces from all faces of the model or from 
	every visible one or from containers.
	This function works a script alternative for selecting faces. The user can gather 
	any face he needs in a similar way as he would select faces from the screen. 
	
	The script function works either in visible faces defining visibililty named argument 
	as 'visible', or in the entire database defining visibililty named argument as 'all'.
	
	Besides the option to define feature angle, the user can obtain faces by defining container named argument as 'PID',
	gathering faces which have the same PID, by defining as 'PID_region', gathering faces which have the same PID and are
	topologically associated, by defining as 'PART', gathering faces which have the same part, taking into account the
	visibility mode. 
	
	In case that user will define neither visibility nor container named arguments,
	function will return faces that are topologically associated according to given feature_angle, as in gui mode.
	Specifically, if feature_angle is not defined, it is initialized to 40 degrees.


	@face object: A face to define the feature angle selection, 'PID', 'PID_region', or 'PART'.

	@feature_angle float: (optional)Specify the 'feature_angle' value. All neighboring faces will be selected provided 
	that the angle formed by the normals of neighboring entities is less than the 
	specified value. This allows for fast and easy selection of specific regions of the 
	model. Adjusting the 'feature angle' value controls the extent of the selection area 
	of the entities. If not defined feature_angle is initialized to 40 degrees.

	@visibility string: (optional)If visibility = 'all', then the entire database is taken into account, 
	if visibility = 'visible', only visible faces. 
	In case that visibility is not defined visible faces are taken into account.

	@container string: (optional)Container can be one of the following strings:
	-'PID', gathering faces with same PID.
	-'PID_region', gathering faces that are topologically connected with same PID.
	-'PART', gathering faces with the same part.
	If not defined, feature_angle selection is taken into account.

	@returns object: Returns a list with the gathered faces, otherwise None.

	"""

def SizeBoxByCurves(height_edges, top_bottom_edges, max_surface_length, max_volume_length):

	"""

	Function for creating a size box by defining its four "height" edges and the "top", "bottom" edges (optionally).


	@height_edges object: A list that contains all the entities that define the four box "height" edges.

	@top_bottom_edges object: (optional)A list that contains all the entities that define the "top", "bottom" edges of 
	the new box.

	@max_surface_length float: (optional)The max surface length of the created size box.

	@max_volume_length float: (optional)The max volume length of the created size box.

	@returns object: Returns a reference to the newly crated box object on success, 0 on failure.

	"""

def SizeBoxSplitProject(box_edge, points):

	"""

	Function for projecting points array on an edge to split size box(es).


	@box_edge object: A box edge that will be split (point will be projected on this edge).

	@points object: The points (3D point, node, hot point, etc) to project on the box edge.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def SizeBoxByPoints(points, solid_type, max_surface_length, max_volume_length):

	"""

	Function for creating a 3D size box from existing nodes or edges, shells.


	@points object: A list with entities from where 5,6,7 or 8 points will be taken to create 
	a TETRA, PYRAMID, PENTA or HEXA box.

	@solid_type string: (optional)An argument that defines the solid type in case that the input points could 
	be used for the creation of more than one solid types.
	It takes the values "hexa", "penta", "tetra" or "pyramid".

	@max_surface_length float: (optional)The max surface length of the created size box.

	@max_volume_length float: (optional)The max volume length of the created size box.

	@returns object: Returns a reference to the newly created box object on success, or 0 on failure.

	"""

def FlangesCompatible(faces1, faces2, option, create_interface_pid):

	"""

	Given two compatible sets of faces, it applies flanges compatible to them and returns 
	1 on success, 2 on partial done, 0 on failure and all faces cut in the process.


	@faces1 object: A list of first set of faces either entities or face IDs.

	@faces2 object: A list of second set of faces either entities or face IDs.

	@option integer: (optional)An integer representing the flanges compatible option:
	0 - Link (default)
	1 - Topo
	2 - Fuse
	(suppliance of this argument is optional, default value = 0)

	@create_interface_pid boolean: (optional)Set to True, if the user wants the flange compatible faces created 
	(for options link and topo) to be assigned to new interface PID.
	False otherwise (suppliance of this argument is optional).
	(Default: False)

	@returns object: Returns 1 on success, 2 on partial done, 0 on failure and a list with the faces 
	that have been cut in case of success or partial done.

	"""

def IsolateFlangesProximity(entities1, entities2, search_by, fact_or_dist, solid_thic, angle):

	"""

	Detects flanges by proximity, just like the Isolate>Flanges>Proximity button.
	'entities1' and 'entities2' definitions are important.
	If none is defined, function will detect flanges on all visible entities.
	if only entities1 is defined, function will detect flanges on that container.
	If both entities1 and entities2 are defined, function will detect flanges between those containers, 
	flanges between entities1 elements and flanges between entities2 elements will be ignored.
	The function does not alter the model visibility (as opposed to the ANSA button).
	If elements are detected as flanges, they will be returned in a list.


	@entities1 object: (optional)The first container of entities (shells/faces/solids).

	@entities2 object: (optional)The second container of entities (shells/faces/solids).

	@search_by string: (optional)Search method: "factor" or "distance".
	(Default: "factor")

	@fact_or_dist float: (optional)The factor/distance value.
	(Default: 1.0)

	@solid_thic float: (optional)The 'thickness' that will be applied to solids for the check.
	(Default: 1.0)

	@angle float: (optional)The maximum allowed angle between two entities to be considered flanges.
	(Default: 10.0)

	@returns object: Returns:
	-NULL if there is an input data error.
	-None if the function detects no flanges.
	-A list with all the detected flange elements.

	"""

def MergeSets(sets, keep_sets_as_nested, delete_merged_sets):

	"""

	Merges two or more sets into a new one.


	@sets object: A list of the sets we need to Merge.

	@keep_sets_as_nested boolean: (optional)Option to add the selected sets as nested into the new set, instead of 
	only adding their contents.
	(Default: False)

	@delete_merged_sets boolean: (optional)Option to delete the sets we merged.
	All the objects that refer to these sets will be changed to refer to the newly
	created set, that derives from the selected sets merge.
	Only effective if keep_sets_as_nested = False.
	(Default: False)

	@returns object: Returns a reference to the newly created set that derives from the sets merge.

	"""

def ConsBreak(cons, tolerance, angle):

	"""

	This function breaks the selected CONS, CURVES by inserting Hot Points on locations of discontinuity.
	In case a selected CONS-CURVE does not have any discontinuity, this CONS is not broken.


	@cons object: Can be a CONS, a list of CONS, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible CONS.
	If it is called with 'all', it works with all the CONS in database.

	@tolerance float: (optional)Discontinuity distance, the maximum gap between limits of two curves.
	(Default value : Nodes matching distance)

	@angle float: (optional)The angle formed between two consecutive curves in degrees.
	(Default : 45)

	@returns integer: Returns 1 on success and 0 on error.

	"""

def InputOffForm(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function inputs an off format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def OutputOffForm(filename, mode):

	"""

	This function outputs a model in OFF Format from ANSA.


	@filename string: The file system path.

	@mode string: (optional)Accepted values: "all", "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def AddToRdsSubset(subset, entities):

	"""

	Adds an entity or a matrix containing entities, to a subset.
	The AddToRdssubset function performs significantly faster when 
	entities are added in to the set massively, through a list. 


	@subset object: The subset entity reference.

	@entities object: A list of references or a single reference 
	of the entities that will be added to the set.

	@returns object: Always returns None.

	"""

def InteractiveGroupingOfPartsBasedOnAttribute(attribute_name, group_name_color, group_names_order, type):

	"""

	This function can classify parts according to a given attribute name (argument 
	'attribute_name') and after the user's interaction, pick parts from one group and 
	push to another in order to change their value. Parts are colored according to 
	their value for the given attribute name. If an attribute does not exist, 
	it will be created.
	
	For Parts use "ANSAPART" for argument 'type' or nothing.
	The function works for Parts by default.
	
	The function also supports grouping of subsystems.
	For Subsystems use argument: type = "ANSA_SUBSYSTEM".


	@attribute_name string: The attribute name.

	@group_name_color object: (optional)The groups names to use and their respective colors.

	@group_names_order object: (optional)A list cointaining the order of the group names to be displayed in the gl area.

	@type string: (optional)The type of the entities that will be classified.

	@returns object: Returns a dictionary with the entities (parts or subsystems) grouped according to
	their values (groups of entities per value).
	In case of QUITALL or ESCKEY (Cancel), None is returned.

	"""

def DampingPatchLayerNew(dpatch, layer_pos, mat, t, theta, sout):

	"""

	Creates a new Damping Patch layer in the specified Damping Patch.


	@dpatch object: A Damping Patch object

	@layer_pos integer: The position of the new layer.

	@mat object: (optional)A Material object for the layer. If no Material is given, 
	a default MAT1 Material will be created.

	@t float: (optional)The thickness of the layer.
	(Default: 1.0)

	@theta float: (optional)The angle of the layer.
	(Default: 0.0)

	@sout string: (optional)The sout of the layer. Accepted values: "", "yes" or "not".
	(Default: "")

	@returns integer: Always returns 0.

	"""

def DampingPatchLayerDelete(dpatch, layer_pos):

	"""

	Deletes a Damping Patch layer in the specified Damping Patch.


	@dpatch object: A Damping Patch object.

	@layer_pos integer: The position of the layer to delete.

	@returns integer: Always returns 0.

	"""

def DampingPatchLayerModify(dpatch, layer_pos, mat, t, theta, sout):

	"""

	Modifies a Damping Patch layer in the specified Damping Patch.


	@dpatch object: A Damping Patch object.

	@layer_pos integer: The position of the new layer.

	@mat object: (optional)A Material object for the layer. If no Material is given, 
	a default MAT1 Material will be created.

	@t float: (optional)The thickness of the layer.

	@theta float: (optional)The angle of the layer.

	@sout string: (optional)The sout of the layer.

	@returns integer: Always returns 0.

	"""

def DampingPatchLayerInfo(dpatch, layer_pos, fields):

	"""

	Gets values from a Damping Patch Layer in the specified Damping Patch.


	@dpatch object: A Damping Patch object.

	@layer_pos integer: The position of the new layer.

	@fields object: A list of the fields to retrieve info from.
	Available fields are:
	-MID: (object) The Material.
	-T: (float) The thickness.
	-THETA: (float) The angle.
	-SOUT: (string) The sout: "", "YES" or "NO".

	@returns object: Returns a dictionary with key the 'fields' values. Otherwise None is returned.

	"""

def ControlListItemsNum(deck, control, type):

	"""

	Gets the total number of the items of a Control list.


	@deck integer: One of PAMCRASH, LSDYNA, RADIOSS.

	@control integer: A reference to the Control entity.

	@type string: Keyword of the Control entity that has a list to get values from.

	@returns object: Returns a dictionary with the total number of items, on success.
	Otherwise, None is retuned.

	"""

def CanvasList():

	"""

	Returns a list with all the Canvas objects.


	@returns object: Returns a list with the Canvas names, or None if there are no Canvas objects.

	"""

def DrawModeList():

	"""

	Gets a list with all the DrawMode objects.


	@returns object: Returns a list with all the DrawMode objects, or None if none of them exist.

	"""

def CopyPartsToAnsaModel(parts, model):

	"""

	Copies one or more parts of the active model to another model.


	@parts object: A list of part entities.

	@model object: The model object where parts will be copied.

	@returns integer: Always returns 1.

	"""

def GetInterfaceNode(entity, create):

	"""

	The function returns the interface node of an element and optionally
	it can create it, if it does not exist, and return it.


	@entity object: The entity from which interface node will be returned.
	Warning: not all entities have interface node.

	@create boolean: (optional)Force create an interface node if the entity does not have any.
	(Default: False)

	@returns object: Returns the interface node or None.

	"""

def ConsProject(entities, faces_array, range, project_type, min_length, split_original, connect_with_faces, paste, produce_curves, nearest_target, delete_faces):

	"""

	This function projects a number of selected 3D-curves, CONS, element edges or line elements 
	on a number of selected Faces, in a direction that is normal, or the user defines to each Face.


	@entities object: The projected entity, a list with the projected entities, a string with 
	value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible entities.
	If it is called with 'all', it works with all the entities.

	@faces_array object: A face, a list of faces, a string with value 'visible' or a string 
	with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@range float: (optional)If given, projections are being created only in areas that the projection 
	distance is not bigger than the specified value, else there is no limitation.

	@project_type object: (optional)A dictionary containing tuples of string values 'normal' or 'user' - a triple 
	of floats defining the direction, in case that string value is 'user'.
	Triple of floats may not be given, in case that string value equals 
	with 'normal'.

	@min_length float: (optional)If given, avoids projections in areas that would create CONs very 
	close to the existing ones, provided that the defined value is not 
	bigger than the critical length.

	@split_original boolean: (optional)If True, the source curves will be split according to their 
	projections' Hot Points.

	@connect_with_faces boolean: (optional)If set to True, it results in the creation of Faces between the 
	original CONS and their projections. The newly created Faces, 
	will also be returned in a list.

	@paste boolean: (optional)If True, source entities (CONS, 3D Curves, etc.) and target projections 
	are pasted, if their distance is smaller than the "CONS matching 
	distance" parameter in Windows>Settings>Settings>Tolerance.

	@produce_curves boolean: (optional)If True, 3D Curves are produced instead of CONS as projections 
	of the source curves.

	@nearest_target boolean: (optional)If True, projection will take place on nearest faces within the range 
	of maximum projection distance and avoid double projection on 
	opposite positioned faces.
	(Default: False)

	@delete_faces boolean: (optional)If True, if the trace of the projection forms a closed loop inside the target faces (not touching the outer perimeters), faces inside the loop will be deleted.
	(Default: False)

	@returns object: Returns a list containing two lists. The first list contains the newly created CONS.
	The second list contains the newly created faces, if connect_with_faces flag is True, 
	otherwise it is None.

	"""

def SurfacesReduce(faces, tolerance, shrink, perface):

	"""

	Certain Surfaces may have a very detailed description. In some rare cases this may lead to problems 
	like bad projections and offsetting or slightly distorted mesh. This function addresses these problems 
	by automatically applying one of two procedures. It firstly attempts to simplify the selected surfaces 
	or, if this fails, to reduce them. More specifically:
	
	Simplify: It replaces an existing surface with a planar or one of the primitive shapes (sphere, torus, cone, cylinder)
	approximation, provided that its roughness falls within the Tolerance value.
	It will also shrink Surfaces to the minimum size required to accommodate the Faces sharing these Surfaces, 
	by activating the relevant option.
	
	Reduce: It reduces the data of surfaces. Data reduction is achieved by means of the mathematical description 
	and the number of patches of the surface.


	@faces object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@tolerance float: Can be any positive value, corresponding to the 'Tolerance' line edit.

	@shrink boolean: (optional)Can be True or False, corresponding to the activation or not of the flag 'Shrink'.

	@perface boolean: (optional)Can be True or False, corresponding to the activation or not of the flag 'Per face'.
	In case it becomes True, shrink value becomes True too.
	(Default: False)

	@returns integer: Returns the number of reduces and/or shrinked surfaces or 0 on failure.

	"""

def PlaneCutMulti(auxiliary_entities, defined_wrkplanes, entities, produce_plane_faces, perform_topology):

	"""

	This function cuts a number of selected Faces, FE elements, CONS or Curves with a number of planes which are defined perpendicularly along a chain of CONS or 3D curves. At least one cutting plane can be used, which corresponds in the middle of the input named argument "auxiliary_entities".


	@auxiliary_entities object: Input entities, Curves or CONS normally to which cut planes will be defined.

	@defined_wrkplanes string: Input string to specify the number of equidistant cut planes, 
	or the absolute step distance between them. 
	In the latter case, type "~" and the desired distance and the fitting 
	number of planes between the end-points of the chain will be created.

	@entities object: A list of entities where the cut will be applied, a string with value 'visible' 
	or a string with value 'all' . If it is called with 'visible', it works with all 
	the visible entities. If it is called with 'all', it works with all the entities.

	@produce_plane_faces boolean: (optional)If True, new planar face(s) will be created lying on the plane(s) that 
	will intersect with the face(s)/shell(s).

	@perform_topology boolean: (optional)If False, the performed plane-cut will get released into red bounds. 
	If True, all cuts will be pasted.

	@returns integer: Always returns 1.

	"""

def CircleTangentToCurves(first_entity, second_entity):

	"""

	This script function defines an arc using two 3d Curves or Cons.


	@first_entity object: A dictionary containing tuples of entities (CURVES, CONS) - a triple of floats 
	defining the start point of the corresponding entity.

	@second_entity object: A dictionary containing tuples of entities (CURVES, CONS) - a triple of floats 
	defining the start point of the corresponding entity.

	@returns object: Returns the created CURVE, otherwise None.

	"""

def CurvesCircleConcentric (curve, distance):

	"""

	This function defines a 3D curve, as an arc of a circle concentric to a selected 3D curve circle definition.  


	@curve object: A 3D curve object, which is an arc of a circle (3D curve).

	@distance float: The distance, specifying the difference between the radius of 
	the input circle and the new concentric circle.

	@returns object: Returns the created 3d curve, otherwise None.

	"""

def FlangesCornerMark(faces):

	"""

	This function inserts two Hot Points to mark free round-shaped edges (corners), 
	identifying them automatically by the input faces. 


	@faces object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@returns integer: Returns 1 in all cases.

	"""

def FlangesSimplify(cons):

	"""

	This function simplifies the flanges shape, by creating faces using the already existing surface.


	@cons object: A cons or a list of cons.

	@returns integer: Returns 1 in all cases.

	"""

def CreateGEB(entities, type):

	"""

	This function takes as input a collection of nodes, and creates a Generic Entity
	Builder (GEB). The nodes are grouped into elements, edges and nodes.


	@entities object: A collection of nodes.

	@type string: The type of the GEB that will be created (i.e. ENTITY_NAME_SB, ENTITY_NAME_BC etc).

	@returns object: Returns the created GEB on successs, or None on failure.

	"""

def SizeBoxCornerPoints(boxes):

	"""

	Script function for acquiring the corner points of a size-box.


	@boxes object: A list with size-box entities.

	@returns object: Returns a list containing the acquired corner points on success, or 0 on failure.

	"""

def DeleteSubsystem(subsystem):

	"""
	Deprecated since version 17.1.0. Use function DeleteEntity instead.

	Deletes a subsystem from the ANSA database.


	@subsystem object: The subsystem entity that should be deleted.

	@returns boolean: Returns True on success, False otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.0. Use function DeleteEntity instead.", DeprecationWarning)

def AddToSubsystem(subsystem, ents, force_move):

	"""

	Adds entities to a subsystem.


	@subsystem object: The subsystem entity to which we need to add entities to.

	@ents object: A list that contains the entities that should be added to the subsystem.

	@force_move boolean: (optional)If true, parts or groups are converted to Top Items in hierarchy 
	to be eligible for dropping in the user-specified subsystem.

	@returns boolean: Returns true on success, false otherwise.

	"""

def RemoveFromSubsystem(subsystem, ents):

	"""
	Deprecated since version 20.0.0. Use function RemoveFromModelContainer instead.

	Removes entities from a subsystem.


	@subsystem object: The subsystem entity, which we need to remove entities from.

	@ents object: (optional)A list that contains the entities that should be removed from the subsystem.

	@returns boolean: Returns True on success, False otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 20.0.0. Use function RemoveFromModelContainer instead.", DeprecationWarning)

def PopulateSubsystemWithInclude(subsystem):

	"""

	This function takes all the contained entities of a subsystem, creates an include
	to contain them and attaches that include to the subsystem.


	@subsystem object: The subsystem entity.

	@returns boolean: Returns True if the command was executed successfully, False otherwise.

	"""

def Clear():

	"""

	The function clears all the drawing area of ANSA.
	It functions similar to pressing the "ALL" and then the "INVERT" button inside Focus Toolbar.


	@returns integer: Returns 0 in all cases.

	"""

def WritePamstampFabric(filename, mode, write_thickness, title):

	"""

	Writes a Pamstamp Fabric file, i.e. a M01 file containing thickness (THCK) and fiber direction (FIB1/FIB2) data.


	@filename string: The full path name for the Pamstamp file.

	@mode string: (optional)"all" or "visible".
	(Default: "all")

	@write_thickness boolean: (optional)If set to True, write the thickness.
	(Default: True)

	@title string: (optional)The title of the file.
	(Default: "")

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def ReadPamstampFabric(filename):

	"""

	Reads a Pamstamp Fabric file, i.e. an M01 file containing thickness (THCK) and fiber direction (FIB1/FIB2) data.


	@filename string: The full path name for the Pamstamp file.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def GetReferenceLibraryEntity(deck, name, type):

	"""

	Transfers an entity from the Reference Library to the current ANSA model, given its name and type.


	@deck integer: The deck constant.

	@name string: The name of the entity that will be transferred from the Reference Library.

	@type string: A string that describes the type of element. 
	It can be retrieved from the title of the element's edit card, 
	where it is displayed within brackets. 
	To get a reference to a property or a material, the types 
	"__PROPERTIES__" and  "__MATERIALS__" can be used 
	instead of the exact entity type.

	@returns object: Returns None when the entity is not found, and a class object on success.
	
	The returned class has two members:
	entity:         The transferred entity. 
	referentials:   A list containing all the referentials of the main transferred entity.

	"""

def HotPointsMarkUnmark(hot_point, unmark):

	"""

	This function is used to define Welding Spots on existent Hot Points or to remove selected Welding Spots. 


	@hot_point object: (optional)A hot point, a list of hot points, a string with value 'visible' or a string 
	with value 'all'. If it is called with 'visible', it works with all the visible hot points.
	If it is called with 'all', it works with all the hot points.
	If the hot_point argument is not given, it works with all the visible hot points.

	@unmark boolean: (optional)If set to True, functionality unmarks the already marked welding spots, 
	else it marks the selected hot_point/s.
	(Default: False)

	@returns integer: Returns 1 in all cases.

	"""

def HotPointsWeldSpot(face, coordinates, produce3dpoint, ret_ents):

	"""

	This function defines Welding Spots (magenta circle with cross) or 3D points (cyan squares) at the indicated position on a selected Face. 


	@face object: The face that weld spots will be created.

	@coordinates object: A list containing lists with triples of x, y, z, defining the set of points 
	that will be projected on the input face, in order to create weld spots.
	[[x1, y1, z1], [x2, y2, z2], ..., [xn, yn, zn]]

	@produce3dpoint boolean: (optional)Produce 3d points instead of weld spots.

	@ret_ents boolean: (optional)If set to True, returns the created entities, otherwise the number of the 
	successful projections.
	(Default: False)

	@returns object: Returns the number of the successful projections, otherwise 0.
	If ret_ents=True returns the created entities, otherwise None.

	"""

def CreatePropertiesFromShellsThickness(shells, thickness_step, base_value, cut_mesh, expand_level, always_create_new_pids, start_pid, create_fe_perimeters, apply_pid_per_macro):

	"""

	This function will create new properties according to the average shell's nodal 
	thickness and to the given thickness step. These properties will be assigned 
	correctly to all the given shells correspondingly .


	@shells object: A list that holds the shells we want to process .

	@thickness_step float: The step that we will use to bundle thicknesses.

	@base_value float: (optional)The base value will be included in the discretization of nodal to property thickness.

	@cut_mesh boolean: (optional)Option for cutting mesh at thickness changes.
	(DEPRECATED ARGUMENT)

	@expand_level integer: (optional)The number of expand levels to improve the mesh around the edges where mesh will be cut.
	(DEPRECATED ARGUMENT)

	@always_create_new_pids boolean: (optional)Option to create always new properties or using existing properties every time the function is called.

	@start_pid integer: (optional)The starting PID of the created properties. Used in case of option 'always_create_new_pids' is true.

	@create_fe_perimeters boolean: (optional)Option for creating FE perimeters at PID bounds.

	@apply_pid_per_macro boolean: (optional)Option for applying PID per macro. In order for this to work, 'cut_mesh' and 'create_fe_perimeters' should be False. It is also not working for shells belonging to 'Not Recognized' parts.

	@returns object: Returns a list with the created properties, on success.
	On failure returns None.

	"""

def SetPamstampFabricAngles(shells, b2_offset):

	"""

	Sets the Fabric Angles b1 and b2 for PAM-CRASH. THETA must be defined on Shell elements for this function to work.
	Angle b1 is calculated based on shell's THETA. Angle b2 is defined as b1+b2_offset.


	@shells object: A list with Shell elements.

	@b2_offset float: Add this value to angle b1 in order to produce a value for angle b2.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def LoadDMEntities(entities, load):

	"""
	Deprecated since version 17.0.0. Use function LoadEntities instead.

	This functions loads/unloads Model Browser entities from DM. When in Load mode all specified 
	entities will first be cleared of their contents and then be loaded(downloaded) from DM. When
	in Unload mode, entities will be cleared and left empty.


	@entities object: A list of Model Browser entities which can be loaded/unloaded.
	These can be Subsystems, Simulation Models, Simulation Runs or 
	Library Items, or any combination of them.

	@load boolean: Set this argument to True to load the specified entities from DM or False to unload them.
	(Default: False)

	@returns integer: Returns 0 in all cases.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function LoadEntities instead.", DeprecationWarning)

def FacesFuseProximities(faces1, faces2, method, part, property):

	"""

	This function closes the narrow gap between two groups of faces and connects them along a wide area. 


	@faces1 object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@faces2 object: A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.

	@method object: A dictionary containing tuples of string values 'Translate' or 'Offset' - four floats 
	defining the direction (the first triple-dx, dy,dz) and the distance, in case that the 
	string value is 'Translate', a float defining the offset distance, in case that the 
	string value is 'Offset'.

	@part object: (optional)The part for the created face(s).

	@property object: (optional)The property for the created faces(s).

	@returns object: Returns a list with the created face(s), otherwise None.

	"""

def FacesFusePipes(cons1, cons2):

	"""

	This function closes the narrow gap between two solid description pipes that lie one inside the other. 


	@cons1 object: A CONS that lies on the inner perimeter of the outer pipe.

	@cons2 object: A CONS that lies on the outer perimeter of the inside pipe.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def FacesFuseProject():

	"""

	Ths function projects and connects every visible single (red) CONS to the visible neighboring faces.


	@returns object: Returns a list of the created CONS on success, otherwise None.

	"""

def PointsRemoveDouble (entities, tolerance):

	"""

	This function deletes duplicate 3D Points within a user specified tolerance.


	@entities object: A point, a list of points, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible points.
	If it is called with 'all', it works with all the points.

	@tolerance float: A search value that describes the distance where possible collision 
	may occur between input 3D Points.

	@returns integer: Returns the number of the deleted 3D Points on success, else 0.

	"""

def InputOptistruct(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, header, ignore_enddata, read_only, sets_type_definition, read_hmcomments, bc_sets_offset, create_parameters, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, read_replication_lines, model_action, comment_input_annotations, advanced_options, coords_id, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, paste_nodes_by_id):

	"""

	The InputOptistruct function imports an Optistruct model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@tolerance_paste_nodes_by_name string: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: "0.0")

	@new_include string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge", "skip" or "new".
	(Default: "overwrite")

	@ignore_enddata string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@sets_type_definition: (optional)Pairs of ids and type of imported sets. Ranges of sets can be 
	specified a pair of lower and upper ids separated by ":".
	The whole range of imported sets can be represented by "ALL".
	Set type can be assigned option "NODE", "ELEMENT", "DESVAR", "RANDOM", "FATIGUE", "UNDEFINED" or "TRIM".

	@read_hmcomments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@bc_sets_offset string: (optional)Accepted values: "offset" or "keep-old".
	(Default: "offset")

	@create_parameters string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@read_replication_lines string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@advanced_options string: (optional)Defines the entity types to be read:
	dr, Header, Nodes, Elements, Properties, Materials, Sets, 
	Contacts. When this argument is defined only the provided 
	types will be read. When dr exists in the beginning of the 
	string the provided types will not be read
	If left blank everything will be read.

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns object: Returns 1 on success and 0 on failure.
	If the "new_include" argument is enabled, it returns a reference to a new INCLUDE 
	containing all the newly imported entities or None on failure.

	"""

def OutputOptistruct(filename, mode, write_comments, format, continuation_lines, enddata, split_pyramid, disregard_includes, output_element_thickness, thickness, second_as_first, first_as_r, cweld_el_as_grid, apply_subcontainer_rules, lf_mode, beginbulk, output_numbering_rules, version, include_output_mode, output_only_main_file, output_parts_in_xml, update_include_fname, output_all_same_directory, use_relative_name_for_readonly_includes, output_parameter_keywords, output_pcompg_as_pcomp, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_safety, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_as_hypermesh, comment_output_lock_views, advanced_options, include, configuration, comment_output_annotations, comment_output_names_as_plain_comment, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids,comment_output_connections_user_defined_geometry, comment_output_fe_perimeters, comment_output_features):

	"""

	This function outputs an Optistruct format file.


	@filename string: (optional)The name of the output file.
	It must reference the full path to the file.

	@mode string: (optional)"all", "model" or "visible".
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "as_v_11_2_4", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@format string: (optional)"short" or "long".
	(Default: what set at the last execution)

	@continuation_lines string: (optional)"on" or "off".
	(Default: "off")

	@enddata string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@split_pyramid string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_element_thickness string: (optional)"off", "at_element_card" or "at_property_card".
	(Default: what set at the last execution)

	@thickness float: (optional)The thickness of the element.
	(Default: "0.0")

	@second_as_first string: (optional)"on" or "off".
	(Default: "off")

	@first_as_r string: (optional)"on" or "off".
	(Default: "off")

	@cweld_el_as_grid string: (optional)"on" or "off".
	(Default: "off")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@lf_mode string: (optional)"system native", "unix" or "dos".
	(Default: what set at the last execution)

	@beginbulk string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@version string: (optional)Optistruct version. One of "2017", "2018".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off".
	Corresponds to the "Update Include ReferenceFile" 
	option of the Output Parameters of the GUI function.
	(Default: "off")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_pcompg_as_pcomp string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_name_comment: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_safety string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_as_hypermesh: (optional)"on" or "off".
	(Default: "off")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of dw, wo, followed by Header, UHeader, Nodes, UNodes, Elements,
	UElements, Properties, UProperties, Materials,
	UMaterials, Sets, USets, Contacts, Ucontacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to the include entity.

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" argument.
	Outputs either an inactive configuration when no other 
	actives, or the active one.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_names_as_plain_comment string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def FacesPlaneCut(working_plane, entities, produce_plane_faces, perform_topology, part, property):

	"""

	This function cuts a number of input Faces, FE elements, CONS or Curves with a Working Plane.
	This plane can be either an existing Working Plane or a newly created Working Plane, defined by a list of coordinates.


	@working_plane object: Can be one of the following:
	-A WPLANE.
	-A list containing two lists - [[x,y,z], [dx,dy,dz]].
	The first list contains a triplet of x, y, z coordinates defining the origin 
	of the desired plane.
	The second list contains a triplet of dx, dy, dz (vector), defining the 
	normal vector of the desired plane,
	-A list containing three lists of triplets [ [x1, y1, z1], [x2, y2, z2], [x3, y3, z3] ] defining three points that determine the desired working plane.

	@entities object: A list of entities where the cut will be applied, a string with value 
	'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible entities.
	If it is called with 'all', it works with all the entities.

	@produce_plane_faces boolean: (optional)If set to True, the new planar face will be created lying on the plane 
	that will intersect with the face(s)/shell(s).

	@perform_topology boolean: (optional)If set to False, the performed plane-cut will get released into red bounds.
	If set to True, all cuts will be pasted.

	@part object: (optional)The part for the requested planar face.

	@property object: (optional)The property for the requested planar face.

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def ResultsMapperManualPosition(mapper, user_transformations):

	"""

	The user can run directly the Manual Position Tool for a Results Mapper entity without opening its card.


	@mapper object: A RESULTS_MAPPER entity.

	@user_transformations object: (optional)One or more transformations matrices which will be applied after the 
	transformation matrix of the Results Mapper.

	@returns integer: Returns 0 if OK was pressed.
	Returns 1 if Cancel was pressed or if another failure occured.

	"""

def UpdateModelSetupEntities(entities, clear_first):

	"""
	Deprecated since version 18.1.0. Use function OrganizeModelContainerEntities instead.

	Accepts a list of entities (Subsystems, Simulation Models, Simulation Runs) and 
	runs Action Update Model Setup Entities for them.


	@entities object: A list containing the entities on which the action Update 
	Model Setup Entities will be executed for.
	Bear in mind that this action is not defined for the 
	GEOMETRY_OUT_OF_SUBSYSTEMS subsystem.

	@clear_first boolean: (optional)This argument is deprecated. The function's behaviour has been thoroughly updated 
	and the Model Setup Entities are cleared and recalculated in all cases.

	@returns integer: Returns the number of entities that ran the Update Model Setup Entities action.

	"""

	import warnings; warnings.warn("Deprecated since version 18.1.0. Use function OrganizeModelContainerEntities instead.", DeprecationWarning)

def PointsRelative (relative, project_on_plane):

	"""

	This function defines new 3D-points that lie on a given relative position from a number 
	of node entities, 3D-points, Hot Points, Weld Points, Grids etc, or by passing a list with 
	lists of triple coordinates, that define the desired position of the created 3d-points.
	i.e. [[x1, y1, z1], [x2, y2, z2], ..., [xn, yn, zn]].


	@relative object: A list with node entities or a list with lists of triple coordinates, that define 
	the desired position of the created 3d-points.
	i.e. [[x1, y1, z1], [x2,y2,z2], ..., [xn,yn,zn]].

	@project_on_plane object: (optional)A WPLANE or a CROSS_SECTION where the created 3d points will be projected.

	@ret_ents boolean: (optional)If True, returns a list with the create 3d points in success, otherwise an empty list.

	@returns integer: Returns the number of the created 3d POINTS, otherwise 0.
	If ret_ents is True, returns a list with the created 3d points in success, otherwise an empty list.

	"""

def GetNastranHeaderInfo(header):

	"""

	This function returns all the information from a nastran header.


	@header object: The nastran header where the information will be extracted from.

	@returns object: Returns an object on success, or None on failure.
	
	This object header_info has the following members:
	header_info.solution:                   the solution
	header_info.nastran_statements:         a list of nastran statements
	header_info.file_management_statements: a list of file management statements
	header_info.executive_control:          a list of executive control statements
	header_info.case_control:               a list of objects for each subcase
	
	Each subcase object has the following members:
	subcase.subcase_id:             the subcase id (0: for common case)
	subcase.subcase_commands:       a list of objects for each statement in subcase
	
	Each subcase_command object has the following members:
	subcase_command.name:           the command name
	subcase_command.value:          the command value
	subcase_command.entity:         the referenced entity (if exists)
	subcase_command.line:           the command line
	
	header_info.parameters:         a list of objects for each parameter
	
	Each parameter object has the following members:
	parameter.name:                 the name of parameter
	parameter.value:                the value of parameter
	parameter.line:                 the command line
	
	header_info.unsupported_lines:  a list of lines that are not included in the 
	                                above sections

	"""

def SetNastranOutputRequestToGeb(geb, output_request):

	"""

	Given a nastran output request line, sets the appropriate values in GEB_OR.


	@geb object: A GEB_OR entity.

	@output_request string: A nastran output request line.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def SgraphMapAction(group_1, group_2, matching_threshold, map_type):

	"""

	This function maps Parts or Pids of provided groups, using Separation graph (SGRAPH).


	@group_1 object: A list that contains elements like volumes, shells 
	and solids and containers like group, parts, sets. These
	entities are going to be loaded in SGRAPH group1.

	@group_2 object: A list that contains elements like volumes, shells 
	and solids and containers like group, parts, sets. These
	entities are going to be loaded in SGRAPH group2.

	@matching_threshold float: (optional)Is the matched area percentage above which parts/pids is concidered unmatched. 
	(Default: 0.1)

	@map_type string: (optional)The basic grouping unit, meaning "part" o "pid".
	(Default: "part")

	@returns object: Returns a dictionary. 
	The key is a Part/Pid of group_2 and the data is another dictionary, with key a Part/Pid of group_1 and 
	data the matching area percentage between the respective Part/Pid of group_2 and Part/Pid of group_1.

	"""

def PointsDelete (entities):

	"""

	This function deletes a number of selected 3D-points (cyan squares), circle centers (cyan circles), point-sets, Spots (red circles) or TARGET_POINTS.


	@entities object: (optional)A point, a list of points, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible points.
	If it is called with 'all', it works with all the points.
	If no input is given, the function will delete the visible entities.

	@returns integer: Returns the number of deleted 3D Points on success, otherwise 0.

	"""

def ReleaseVolumes(faces):

	"""

	This function disconnects geometrical volumes that have been topologically pasted.
	The volumes are released and the triple (cyan) CONS become double (yellow).


	@faces object: (optional)A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	If no input is given, release performs on visible faces.

	@returns integer: Returns 1 in all cases.

	"""

def LaminateSplit(deck, laminate, elements):

	"""

	Splits the specified laminate property into two laminate properties; one that contains 
	the specified elements and one that contains the rest of the initial property's elements.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: A reference to a laminate property.

	@elements object: A list with elements that belong to the laminate property, 
	which will form a new laminate property.

	@returns object: Returns a reference to the newly created laminate part object, containing the specified list of elements.

	"""

def LaminateReportWindow(laminates):

	"""

	Opens a Laminate tool's Generate Report window for the given Laminates.


	@laminates object: A list with laminate properties.

	@returns integer: Returns 0 if OK was pressed, or 1 if Cancel was pressed or if another failure occured.

	"""

def AddToModelContainer(container, entities, force_move, return_failed):

	"""

	Adds entities to a model container.
	
	Model container types are:
	"ANSAPART", "ANSAGROUP", "ANSA_SUBSYSTEM", "ANSA_CONFIGURATION", 
	"ANSA_SIMULATION_MODEL", "ANSA_SIMULATION_RUN", ANSA_LOADCASE".
	Entities types to be added are:
	All ANSA entity types(including Model container types).
	
	The model container and "entities" must have compatible types to interact. 
	Compatibility examples:
	Adding "ANSAPART" to "ANSA_SUBSYSTEM".
	Adding "ANSAPART" to "ANSA_CONFIGURATION".
	Adding "ANSA_SUBSYSTEM" to "ANSA_SIMULATION_MODEL".
	Adding "ANSA_LIBRARY_ITEM" / "INCLUDE" to "ANSA_LOADCASE".
	Adding "ANSA_LOADCASE" / "ANSA_SIMULATION_MODEL" to "ANSA_SIMULATION_RUN".
	Adding any other ANSA entity to ANSAPART/ ANSA_SUBSYSTEM/ ANSA_SIMULATION_MODEL/ LOADCASE
	
	The compatibility between the Model Containers and the entities to be added  
	can be checked in the Model Browser by dragging and drop operation.


	@container object: The Model Container to add entities to.
	For supported container types, check the function description.

	@entities object: The entities to add to the model container.
	For container-entities type compatibility examples, check the function description.

	@force_move boolean: (optional)If true, parts or groups are converted to Top Items in hierarchy 
	to be eligible for dropping in the user-specified subsystem.

	@return_failed boolean: (optional)Controls the return value. If set to True, a list of entities which
	failed to be added to the specified container is returned.

	@returns object: Always returns None.

	"""

def RemoveFromModelContainer(container, entities):

	"""

	Removes entities from a model container.
	
	Model container types are:
	"ANSAPART", "ANSAGROUP", "ANSA_SUBSYSTEM", "ANSA_CONFIGURATION", 
	"ANSA_SIMULATION_MODEL", "ANSA_SIMULATION_RUN", ANSA_LOADCASE".
	
	Entity types to be removed are:
	All ANSA entity types(including Model Container types).
	
	The model container and "entities" must have compatible types to interact. 
	Compatibility examples:
	Removing "ANSAPART" from "ANSA_SUBSYSTEM".
	Removing "ANSAPART" from "ANSA_CONFIGURATION".
	Removing "ANSA_SUBSYSTEM" from "ANSA_SIMULATION_MODEL".
	Removing "ANSA_LIBRARY_ITEM" / "INCLUDE" from "ANSA_LOADCASE".
	Removing "ANSA_LOADCASE" / "ANSA_SIMULATION_MODEL" from "ANSA_SIMULATION_RUN".
	Removing any other ANSA entity from ANSA_SUBSYSTEM/ ANSA_SIMULATION_MODEL/ ANSA_LOADCASE.
	Removing the following ANSA entities from ANSAPART: GEBs, RESULTs_MAPPERs,
	        INVERSE FORMINGs, SPCs, AIRBAGs, MOTIONs, DEFINE_HEX_SPOTWELD_ASSEMBLY, DISPLAY MODELs,
	        Nastran PEM entities (TRMCPLs, ACPEMCPLs), Nastran Thermal BCs (QVECT etc).


	@container object: The Model Container to remove entities from.
	For supported container types, check the function description.

	@entities object: The entities to remove from the model container.
	For container-entities type compatibility examples, check the function description.

	@returns object: Always returns None.

	"""

def AutodetectGEBConnectivity(geb, type, search_area, search_distance):

	"""

	This function automatically detects the connectivity of Generic Entity Builders (GEBs) that 
	have one of the following search patterns: UserDefinedArea, MappedArea, MappedAreaBox.


	@geb object: The GEB entity whose connectivity will be automatically detected.

	@type string: The type of the connected entities. Can be one of the following:
	i) Part
	ii) Property
	iii) Subsystem

	@search_area string: (optional)Specify whether the function will search among "All" or "Visible" entities.
	(Default: "All")

	@search_distance float: (optional)Specify the search distance for the detection of connected entities.

	@returns object: Returns a list with the detected entities.
	If the function fails to detect any entity, it will return None.

	"""

def SetCrossSectionPid(cross_section, property):

	"""

	Set a PID to a cross section.


	@cross_section object: A cross section or a list of cross section entities.

	@property object: A reference to a property.

	@returns integer: Always returns 0.

	"""

def SetCurvePid(curve, property):

	"""

	Sets a PID to a curve.


	@curve object: A reference to the curve to be set the property.

	@property object: A reference to a property.

	@returns integer: Always returns 0.

	"""

def PointsOnCurve(entities, total_points, create_curves, create_pset, ret_ents):

	"""

	This function distributes 3D-points (cyan squares) along selected 3D curves, CONS or element edges.
	At least one 3d Point can be defined, which corresponds in the middle of the input named argument "total_points".


	@entities object: A list with valid CONS, CURVE, MORPHEDGE or linear elements.

	@total_points string: An input string to specify the number of equidistant 3d Points, or the 
	absolute step distance between them. In the latter case, type "~" and 
	the desired distance and the fitting number of 3d Points between the 
	end-points of the chain will be created.

	@create_curves boolean: (optional)If set to True, apart from the 3D Points, 3D Curves will also be created 
	to fill the gaps between the selected Curves.
	(Default: False)

	@create_pset boolean: (optional)If set to True, Point Sets will be created instead of 3D Points in a similar fashion.
	(Default: False)

	@ret_ents boolean: (optional)If set to True, returns created 3d Points, in case create_pset equals to False.
	(Default: False)

	@returns integer: Returns the number of the created 3d Points, otherwise 0.
	In case that create_pset is True, the function returns the number of the created point sets, otherwise 0.

	"""

def PointsInLine(coordinates, total_points):

	"""

	This function defines new 3D-points in a straight line between two input points. 
	The user should pass as an input a list with two lists of triple doubles, defining the input points.


	@coordinates object: A list with two lists of x, y, z coordinates are given as first input, defining the positions.
	i.e. [[x1, y1, z1] , [x2, y2, z2]].

	@total_points string: An input string to specify the number of equidistant 3d points, or the absolute 
	step distance between them. In the latter case, type "~" and the desired distance 
	and the fitting number of 3d points between the input end-points will be created.

	@returns integer: Returns the number of the created 3d Points on success, otherwise 0.

	"""

def FacesFreezeUnFreeze(faces, unfreeze):

	"""

	This function locks / unlocks the selected Faces and their boundary CONS segments.
	In this way, the Faces' condition is "function locked" and no participation to 
	functions that might alter their topology or meshing (if any) is permitted!
	The input Macro Areas become frozen (locked) and the segments that compose their boundaries too. 


	@faces object: (optional)A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	If nothing is passed then functionality will freeze the visible faces.

	@unfreeze boolean: (optional)If True input faces will be unfreezed in case that are frozen.
	(Default: False)

	@returns integer: Returns the number of the faces that have been freezed or unfreezed on success, otherwise 0.

	"""

def FlangesCompatibleLink(faces1, faces2, assign_property, assign_part):

	"""

	Given two compatible sets of faces, it apples flanges compatible with option link on them and 
	returns 1 on success, 2 on partial done, 0 on failure and all faces cut in the process.


	@faces1 object: A list of first set of faces either entities or face IDs (Master faces).

	@faces2 object: A list of second set of faces either entities or face IDs (Slave faces).

	@assign_property integer: (optional)An integer representing the available options for assigning the property 
	of newly created faces.
	0 - Assign property of master (default).
	1 - Assign property of slave.
	2 - Assign interface property.
	3 - No assignment (i.e., master/slave).

	@assign_part integer: (optional)An integer representing the available options for assigning the part 
	of newly created faces.
	0 - Assign part of master (default).
	1 - Assign part of slave.
	2 - Assign interface part.
	3 - No assignment (i.e., master/slave).

	@returns object: A list containing 1 on success, 2 on partial done, 0 nfailure and a list with the faces 
	that have been cut in case of success or partial done.

	"""

def FlangesCompatibleTopo(faces1, faces2, assign_property, assign_part):

	"""

	Given two compatible sets of faces, it apples flanges compatible with option topo on them and 
	returns 1 on success, 2 on partial done, 0 on failure and all faces cut in the process.


	@faces1 object: A list of first set of faces either entities or face IDs (Master faces).

	@faces2 object: A list of second set of faces either entities or face IDs (Slave faces).

	@assign_property integer: (optional)An integer representing the available options for assigning the property 
	of newly created faces.
	0 - Assign property of master (default).
	1 - Assign property of slave.
	2 - Assign interface property.
	3 - Assign double property.

	@assign_part integer: (optional)An integer representing the available options for assigning the part 
	of newly created faces.
	0 - Assign part of master (default).
	1 - Assign part of slave.
	2 - Assign interface part.

	@returns object: A list containing 1 on success, 2 on partial done, 0 on failure and a list with the faces 
	that have been cut in case of success or partial done.

	"""

def FlangesCompatibleFuse(faces1, faces2, assign_property, assign_part, keep_faces):

	"""

	Given two compatible sets of faces, it apples flanges compatible with option fuse on them and 
	returns 1 on success, 2 on partial done, 0 on failure and all faces cut in the process.


	@faces1 object: A list of first set of faces either entities or face IDs (Master faces).

	@faces2 object: A list of second set of faces either entities or face IDs (Slave faces).

	@assign_property integer: (optional)An integer representing the available options for assigning the 
	property of newly created faces.
	0 - Assign property of master (default).
	1 - Assign property of slave.
	2 - Assign interface property.

	@assign_part object: (optional)An integer representing the available options for assigning the 
	part of newly created faces.
	0 - Assign part of master (default).
	1 - Assign part of slave.
	2 - Assign interface part.

	@keep_faces integer: (optional)An integer representing the available options for keeping or deleting face caps.
	0 - Delete caps (default).
	1 - Keep master caps.
	2 - Keep slave caps.
	3 - Keep both master and slave caps.

	@returns object: Returns a list containing 1 on success, 2 on partial done, 0 on failure and a list with the faces 
	that have been cut in case of success or partial done.

	"""

def GetGeometryOutOfSubsystems():

	"""
	Deprecated since version 21.1.0. Use function CollectEntities instead.

	The function will return the GEOMETRY_OUT_OF_SUBSYSTEMS subsystem, 
	or None in case the model does not have any subsystems.


	@returns object: Returns a reference to the entity GEOMETRY_OUT_OF_SUBSYSTEMS, 
	or None if it does not exist (when there are no subsystems in the model).

	"""

	import warnings; warnings.warn("Deprecated since version 21.1.0. Use function CollectEntities instead.", DeprecationWarning)

def CreateConfigurations(source, names, variant_values):

	"""

	This function will create new configurations as a given source/functionality would do.


	@source string: "variant_conditions": Create the configurations based on the 
	"Variant Conditions" functionality.

	@names string: (optional)- "overwrite": If conflicting names occur with existing configurations' ones, 
	   ovewrite the configurations.
	- "offset": If conflicting names occur with existing configurations' ones, 
	   offset the new names.

	@variant_values object: (optional)A dictionary of configuration names to a dictionary of accepted variant name-value. If no value is specified for a variant name then a new configuration is created for all possible combinations for this variant

	@returns object: Returns a list that contains the created configurations.

	"""

def ImportVariantValues(vechicle_id, variant_values):

	"""

	This function imports the variant values that define a specific vehicle, so that they 
	can be used by the "Variant Conditions" functionality.


	@vechicle_id string: An identifier for the vehicle (eg it's name).

	@variant_values object: A dictionary, containing the variant values that define this vehicle.

	@returns object: Always returns None.

	"""

def ClearVariantValues():

	"""

	This function clears all the imported vehicle variant values that got imported
	by the ImportVariantValues function.


	@returns object: Always returns None.

	"""

def OutputSonate(filename, mode, source_unit_system):

	"""

	This function ouputs a Sonate format file like the FILE>OUTPUT>SONATE functionality.


	@filename string: The name of the output file. Must reference the full path to the file.

	@mode string: (optional)Selection of output entities. Valid options are: 'all', 'model' or 'visible'.
	(Default: what set at the last execution)

	@source_unit_system object: (optional)A UnitSystem object. Dictates the unit system from which the output will be converted to SI.

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def OutOfIncludes(deck, search_types, filter_visible):

	"""

	Collects massively the entities of a particular type that are listed in the OUT OF INCLUDES container.


	@deck integer: The deck for which the collection will take place.

	@search_types object: A string or list of strings with "ansa keywords" of the types to be 
	collected. Such types can be SHELL, SOLID, GRID etc.
	Additionally, the following keywords can be used:
	"__PROPERTIES__": returns all properties in the "OUT OF INCLUDES" container.
	"__MATERIALS__": returns all materials in the "OUT OF INCLUDES" container.
	"__ELEMENTS__": returns all standard elements in the "OUT OF INCLUDES" container.
	"__ALL_ENTITIES__": returns all entities in the "OUT OF INCLUDES" container.
	"__CONNECTIONS__":returns all connections in the "OUT OF INCLUDES" container.

	@filter_visible boolean: (optional)Return only the entities that satisfy all collection criteria, have visibility 
	status, and the status is active. In all other cases the parameter is ignored.
	(Default: False)

	@returns object: Rreturns a list with references to the collected entities.

	"""

def LaminateLayerTemplateNew(deck, laminate, id, name, color, add_elements, remove_elements, mat, ply, t, theta, nip, sout, type, tmanuf, dvpreln, mapped_data, mapped_thickness, mapped_orientation, rosette, a, sync_name, layer_type):

	"""

	Creates a new laminate layer template in the specified laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH or OPTISTRUCT.

	@laminate object: A laminate property.

	@id integer: (optional)The id of the layer template.

	@name string: (optional)The name of the layer template.

	@color object: (optional)The color of the layer template. A list with 3 integers (rgb).

	@add_elements object: (optional)A list of elements to be added to the layer template.

	@remove_elements object: (optional)A list of elements to be removed from the layer template.

	@mat object: (optional)The material of the layer template. None to disable it.

	@ply object: (optional)The PLY of the layer template. None to disable it. (PAMCRASH)

	@t object: (optional)The thickness of the layer template. None to disable it.

	@theta object: (optional)The orientation angle of the layer template. None to disable it.

	@nip object: (optional)The number of integration points, NIP. None to disable it. (ABAQUS, ANSYS)

	@sout object: (optional)One of: "", "YES" or "NO". None to disable it. (NASTRAN)

	@type object: (optional)One of: "SHELL", "PLANE" or "CORE". None to disable it. (PERMAS)

	@tmanuf float: (optional)The thickness of one manufacturable ply, TMANUF of Optistruct. (NASTRAN)

	@dvpreln object: (optional)A list of DVPRELn. (NASTRAN)

	@mapped_data string: (optional)"Thick, Orient", "Thickness", "Orientation" or "".

	@mapped_thickness object: (optional)A list of the mapped thicknesses of the elements in "add_elements" matrix.

	@mapped_orientation object: (optional)A list or a list with lists of the mapped orientations of the elements 
	in "add_elements" matrix.

	@rosette object: (optional)A rosette id.

	@a float: (optional)The angle between first and second material direction (Radioss).

	@sync_name boolean: (optional)Synchronize Template Name with Layer Name

	@layer_type string: (optional)One of: "Draped", "Projected".

	@returns integer: Returns the id of the new layer template.

	"""

def LaminateLayerTemplateModify(deck, laminate, id, new_id, name, color, add_elements, remove_elements, mat, ply, t, theta, nip, sout, type, tmanuf, dvpreln, mapped_data, mapped_thickness, mapped_orientation, rosette, regenerate_mapped_data, a, sync_name, layer_type):

	"""

	Modifies a laminate layer template in the specified laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH or 
	OPTISTRUCT.

	@laminate object: A laminate property.

	@id integer: The id of the layer template.

	@new_id string: (optional)The new id of the layer template.

	@name object: (optional)The name of the layer template.

	@color object: (optional)The color of the layer template. A list with 3 integers (rgb).

	@add_elements object: (optional)A list of elements to be added to the layer template.

	@remove_elements object: (optional)A list of elements to be removed from the layer template.

	@mat object: (optional)The material of the layer template. None to disable it.

	@ply object: (optional)The PLY of the layer template. None to disable it. (PAMCRASH)

	@t object: (optional)The thickness of the layer template. None to disable it.

	@theta object: (optional)The orientation angle of the layer template. None to disable it.

	@nip object: (optional)The number of integration points, NIP. None to disable it. (ABAQUS, ANSYS)

	@sout object: (optional)One of: "", "YES" or "NO". None to disable it. (NASTRAN)

	@type object: (optional)One of: "SHELL", "PLANE" or "CORE". None to disable it. (PERMAS)

	@tmanuf float: (optional)The thickness of one manufacturable ply, TMANUF of Optistruct. (NASTRAN)

	@dvpreln object: (optional)List of DVPRELn. (NASTRAN)

	@mapped_data string: (optional)"Thick, Orient", "Thickness", "Orientation" or "".

	@mapped_thickness object: (optional)A list of the mapped thicknesses of the elements in "add_elements" matrix.

	@mapped_orientation object: (optional)A list or a list with lists of the mapped orientations of the elements 
	in "add_elements" matrix.

	@rosette object: (optional)A rosette id, or None to clear rosette.

	@regenerate_mapped_data boolean: (optional)If the mapped data of the layer will be regenerated when there are elements to be added to it. If it was already draped by ANSA, draping will be reapplied. Otherwise, any existing mapped data will be extrapolated to the newly added elements.

	@a float: (optional)The angle between first and second material direction (Radioss).

	@sync_name boolean: (optional)Synchronize Template Name with Layer Name

	@layer_type string: (optional)One of: "Draped", "Projected".

	@returns object: Returns None.

	"""

def LaminateLayerTemplateDelete(deck, laminate, id, delete_instances):

	"""

	Deletes a laminate layer template from the specified laminate.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A laminate property.

	@id integer: The id of the layer template.

	@delete_instances boolean: (optional)If True all layer instances will be deleted. (default = False)

	"""

def LaminateLayerTemplateCopy(deck, laminate, id):

	"""

	Copies a layer template of a laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A laminate property.

	@id integer: The id of the layer template.

	@returns integer: Returns the id of the newly created layer template.

	"""

def LaminateLayerTemplateIds(deck, laminate):

	"""

	Gets a list of ids of all the layer templates of a laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A laminate property.

	@returns object: A list of ids of all the layer templates of a laminate property.

	"""

def LaminateLayerTemplateReferences(deck, laminate, id):

	"""

	Gets a list of layers using the specified layer template.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS or PAMCRASH.

	@laminate object: A laminate property.

	@id integer: The id of a layer template.

	@returns object: Returns a list of tuples (sequence, layer).

	"""

def LaminateLayerTemplateInfo(deck, laminate, id, fields):

	"""

	Gets values from a layer template of the specified laminate property.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH or OPTISTRUCT.

	@laminate object: A laminate property.

	@id integer: The id of the layer template.

	@fields object: A list with the options that the user wants to extract the values from.
	Available options:
	"name"
	"color"
	"elements"
	"PLY"
	"MID"
	"T"
	"THETA"
	"NIP"
	"mapped_data"
	"mapped_thickness"
	"mapped_orientation"
	"SOUT"
	"type"
	"TMANUF"
	"DVPRELn"
	"rosette"
	"A"
	"sync_name"
	"layer_type"

	@returns object: Returns a dictionary with the requested options as keys and the retrieved values as the dictionary's values.

	"""

def OutputAtfx(filename, mode):

	"""

	This function outputs a model in ATFX format.


	@filename string: The name of the output file.

	@mode string: (optional)"all", "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputIdeasMseries(filename, nodes_id, elements_id, properties_id, merge_sets_by_name, input_pyramids, model_action, new_include):

	"""

	This function inputs an I-DEAS M-Series format file.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@input_pyramids string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@new_include string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@returns object: Returns 0 on success and 1 on failure.
	If the "new_include" argument is enabled, it returns a reference to a new INCLUDE 
	containing all the newly imported entities, or None on failure.

	"""

def InputIdeasV(filename, nodes_id, elements_id, properties_id, model_action, new_include):

	"""

	This function inputs a '.unv' format file.


	@filename string: The path to the filename to import.

	@nodes_id string: Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@new_include string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@returns object: Returns 0 on success and 1 on failure.
	If the "new_include" argument is enabled, it returns a reference to a new INCLUDE 
	containing all the newly imported entities or None on failure.

	"""

def InputMSeries(filename, nodes_id, elements_id, properties_id, merge_sets_by_name, input_pyramids, model_action):

	"""

	This function inputs an M-Series format file.


	@filename string: The path to the filename to import.

	@nodes_id string: Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@merge_sets_by_name string: Accepted values: "on" or "off".
	(Default: "off")

	@input_pyramids string: Accepted values: "on" or "off".
	(Default: "off")

	@model_action string: Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputSonate(filename, nodes_id, elements_id, properties_id, model_action, target_unit_system):

	"""

	This function inputs a Sonate format file.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window",
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@target_unit_system object: (optional)A UnitSystem object. Dictates the unit system to which the input will be 
	converted from SI.
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def InputUniversal(filename, nodes_id, elements_id, properties_id, model_action, new_include):

	"""

	This function inputs a .unv format file.


	@filename string: The path to the filename to import.

	@nodes_id string: Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window",
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@new_include string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@returns object: Returns 0 on success and 1 on failure.
	If the "new_include" argument is enabled, it returns a reference to a new INCLUDE 
	containing all the newly imported entities or None on failure.

	"""

def SurfacesFit(entities, part, prop, ret_ents):

	"""

	The function can be used to create a new Face, so that it fits input edges or point entities.
	Edges refer to Curves, CONS or even shell element edges, whereas point entities can be 3D Points, 
	Hot Points or FE-Model nodes.
	Alternatively, the function accepts a list with lists of triple coordinates, that define the desired 
	position that the new face fits. 
	[[x1, y1, z1] [x2, y2, z2], ..., [xn, yn, zn]]


	@entities object: A list containing edges (CONS, CURVE, MORPH EDGES, CONNECTION EDGES, LINEAR ELEMENTS etc)
	and points (3D Points, Hot Points or FE-Model node) simultaneously.
	Alternatively, a list with lists of triple coordinates, that define the desired 
	position that the new face fits. 
	[[x1, y1, z1], [x2, y2, z2], ..., [xn, yn, zn]]

	@part object: (optional)The part for the created face.

	@prop object: (optional)The property for the created face.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.

	@returns object: Returns True on success, otherwise False.
	If ret_ents=True it will return a list with the created entities, 
	or None if no entities are created.

	"""

def CurvesTangentPointToCurve(point, entity, part):

	"""

	The function defines a 3D-curve between a selected point and the tangent of a selected 3D curve or CONS. 
	Point entity can be 3D Point, Hot Point or FE-Model node.
	Alternatively, point can be represented by passing a list with xyz coordinates, [x, y, z].


	@point object: A point entity can be 3D Point, Hot Point or FE-Model node.
	Alternatively, point can be represented by passing a list 
	with xyz coordinates, [x, y, z].

	@entity object: Can be a CURVE or a CONS.

	@part object: (optional)The part for the created curve. If it is not defined, the part 
	of the input entity will be taken into consideration.

	@returns object: Returns the created curve on success, otherwise None.

	"""

def FringeDrawModeList():

	"""

	Gets a list with all the FringeDrawMode objects.


	@returns object: Returns a list containing the FrineDrawMode objects, or None if none of them exist.

	"""

def ExportPLMXMLTree(filename, parts, structure_info, representation_info, flatten_files, export_jt, export_png, export_attachments, file_handling, engine_settings):

	"""

	This function exports model related information into a PLMXML package. This 
	package consists of a PLMXML file, plus an optional directory which holds all
	file references from the XML file. The name of this directory is the same as the
	XML file minus the extension.
	
	The way files are referenced from the XML file depends on the configured File 
	Handling information. If no explicit File Handling information is provided (see
	argument file_handling), then 3 kinds of files are handled by default. The
	values of the type / role attributes in the Dataset / AssociatedDataset elements
	respectively are described for the default handling below:
	- ANSA files: type = "T4T_ANSA", role = "IMAN_specification"
	- JT files: type = "DirectModel", role = "IMAN_Rendering"
	- PNG files: type = "Image", role = "IMAN_specification"


	@filename string: Name of the PLMXML output file.
	This argument may also hold a pathname, if the
	output file is to be stored in a directory 
	different that the current working one.

	@parts object: (optional)A list of parts entities to be exported in the 
	PLMXML package. Note that the parts that will
	eventually be described in the PLMXML package
	depend also on the value of the structure_info
	argument: if set to "hierarchy" or "flat" then the
	children of the selected parts will recursively be
	visited and will be output to the PLMXML package.
	(Default value: Root parts)

	@structure_info string: (optional)Describes what structural information should be
	output to the PLMXML file. Allowed values are:
	"hierarchy": information about all selected parts
	and their (recursive) children will be exported,
	together with assembly relationship.
	"flat": information about all selected parts and
	their (recursive) children will be exported, but
	the assembly relationships not.
	"monolithic": selected parts are exported with a
	monolithic representation file that aggregates all
	respective contained parts. 
	(Default value: "hierarchy")

	@representation_info string: (optional)Describes what representation info should be
	output to the PLMXML file. Allowed values are:
	"current": the currently active representation
	for each part will be packaged and referenced
	from the PLMXML file.
	"all": for each part the currently active one,
	plus all others found in DM will be packaged and
	referenced from the PLMXML file. 
	"none": no representation related files will be
	packaged.
	(Default value: "current")

	@flatten_files boolean: (optional)Defines whether the referenced files directory
	(accompanying the PLMXML file) will contain the
	packaged files in a nested or flattened directory 
	structure.
	(Default value: False)

	@export_jt boolean: (optional)Defines whether a JT image should be included in
	the PLMXML package for each part.
	(Default value: False)

	@export_png boolean: (optional)Defines whether a PNG image should be included in
	the PLMXML package for each part.
	(Default value: False)

	@export_attachments boolean: (optional)Defines whether the various attached files should
	be included in the PLMXML package for each part.
	(Default value: False)

	@file_handling object: (optional)List or tuple of PLMXMLFileHandlingInfo objects.
	Defines how the different kinds of packaged files
	should be described in the PLMXML file. When this
	argument is provided, it describes exclusively the
	file handling (i.e. it is not applied over the
	default handling).
	(Default value: See function description)

	@engine_settings object: (optional)Object of type PLMXMLEngineSettings, describing
	various configuration options of the PLMXML export
	engine.
	(Default value: Default created PLMXMLEngineSettings
	object)

	@returns integer: This function returns an integer, which encodes the below Result Codes:
	0 - Success.
	1 - No license available (ANSA_JT_OPEN).
	2 - Unable to create packaging directory.
	3 - Unable to create PLMXML file.
	4 - File packaging failed.
	5 - Invalid hierarchy detected.
	6 - PLMXML SDK error.

	"""

def GetLengthUnits():

	"""

	The function returns the current ANSA units label from
	Tools>Settings>Settings>Resolution/Tolerances/Units>Current Units.


	@returns string: Returns a string that contains the label of the current ANSA length units.

	"""

def SetLengthUnits(units, scale):

	"""

	The user can change the current length units by determining the appropriate input, available from the list below:
	   "millimeter",
	   "kilometer",
	   "meter",
	   "centimeter",
	   "micron",
	   "mile",
	   "feet",
	   "inch",
	   "mil",
	   "microinch".
	Note that as the current units change the tolerances are adjusted automatically.


	@units string: A string determining the desired change, available from the below list:
	
	-"millimeter",
	-"kilometer",
	-"meter",
	-"centimeter",
	-"micron",
	-"mile",
	-"feet",
	-"inch",
	-"mil",
	-"microinch".

	@scale boolean: (optional)If True, the model coordinates change too, otherwise they remain the same.
	(Default: True)

	@returns string: Returns a string containing the previous length units setting on success, otherwise NULL.

	"""

def OpenIdsManager(container, ids_from):

	"""

	This function opens the "Ids Manager" tool.


	@container string: The container that the "Ids Manager" window will refer to.
	The container can be either "Includes", or "Properties".

	@ids_from string: (optional)The name of the group of entities from which the ids will be shown 
	in the "Ids Manager" tool.

	@returns integer: Always returns 0.

	"""

def TransformCompress(deck, entity):

	"""

	Compresses a transformation with multiple sub-transformations.


	@deck integer: The deck in which the transform will take place.

	@entity object: The transform that is going to be compressed.
	Should contain two or more sub-transformations.

	@returns integer: Returns 0 on success or 1 otherwise.

	"""

def SetIncludePathAlias(alias, path, force_use_alias):

	"""

	Sets a path alias and adds it in Include Paths.


	@alias string: The alias to be used for a specific path.

	@path string: The path to be replaced by the alias.

	@force_use_alias boolean: (optional)If force_use_alias = True, the alias given as argument will be used in the 
	corresponding Includes' RefereneFile.
	If force_use_alias = False, the alias given as argument will not be used in the 
	corresponding Includes ReferenceFile. 
	(Default: True)
	(See Remarks for a detailed description of the possible issues that may occur and 
	how to handle this argument)

	@returns object: On failure, 0 is returned. 
	On success, it returns either 1 or (in case of force_use_alias = False -see case 2 and 3 of the remarks-) 
	a list of includes that had their Reference File reverted to a previous analiased filename.

	"""

def RemoveIncludePathAlias(alias):

	"""

	Removes an existing alias from Include Paths.


	@alias string: The alias to be removed from Include Paths.

	@returns integer: Returns 0 on failure, 1 on success.

	"""

def GetIncludePathAlias():

	"""

	Gets all the pairs alias-path, defined in Include Paths.


	@returns object: Returns a dictionary with key: Alias and value: Path.

	"""

def ImportAP242Tree(filename, open_tree_editor):

	"""

	Imports an AP242 tree into ANSA with or without launching the product tree editor.


	@filename string: The full path of the AP242 file.

	@open_tree_editor boolean: (optional)If set to True, the tree editor is launched.
	(Default: False)

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def NearestGeometry(coordinates, tolerance, search_types, entities, all_nearest):

	"""

	This function finds the nearest geometrical entity to a set of coordinates.
	A list with lists of the x, y, z coordinates are given as input and for each point the nearest(s) 
	geometrical entity is found.


	@coordinates object: A list with lists of triple x, y, z coordinates are given as input
	and for each triple, the nearest(s) geometrical entity is found.

	@tolerance float: The search tolerance.

	@search_types string: A string defining the willing search geometrical type.
	Valid inputs can be: 'FACE', 'CONS', 'CURVE', 'CONNECTION_CURVE', 
	'CROSS_CURVE', 'POINT' or 'HOT POINT'.

	@entities object: (optional)A list of entities where the search will take place.
	A string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	If nothing is passed, it works with the visible entities, concerning the 
	'search_types' named argument.

	@all_nearest boolean: (optional)If set to True, the function returns all the nearest entities per triple coordinate, 
	otherwise the closest entity found within the given tolerance.

	@returns object: Returns a list containing lists with the references to the closest geometrical entities
	per triple given coordinate. The first list is a reference to the nearest entity in correspondence 
	to the first point as it is determined by the x, y, z coordinates of the first triple in the coordinates list. 
	If nothing is found within the tolerance, None is returned.

	"""

def UnitConversion(source_unit_system, target_unit_system, include):

	"""

	This function performs a unit conversion of the current model from source to target unit systems. 
	Additionaly, the 'include' parameter can be specified to perform a unit conversion on an include.


	@source_unit_system object: The source unit system, defined by a UnitSystem object.

	@target_unit_system object: The target unit system, defined by a UnitSystem object.

	@include object: (optional)The include that will be converted.
	If left blank, the current model will be converted.

	@returns object: Always returns None.

	"""

def GetShellThickness(deck, shell, nodal_thicknesses):

	"""

	@deck constant: The selected deck.

	@shell object: The shell entity.

	@nodal_thicknesses boolean: (optional)If True, return a tuple with the nodal thicknesses.

	@returns object: Returns a double if nodal_thicknesses=False.
	Returns a tuple of the nodal thicknesses if nodal_thicknesses=True.

	"""

def LeadingEdge (faces, radius, create_curves):

	"""

	Detects leading edges on supplied faces, with respect to a supplied radius which defines the maximum radius in consideration.
	Retuns a SET, named "Leading Edge Curves" or "Leading Edge CONS", containing the curves or CONS created respectively.


	@faces object: (optional)A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	If nothing is passed, all the visible faces are taken into consideration.

	@radius float: (optional)A float defining the radius curvature of the input faces where leading edge will be detected.

	@create_curves boolean: (optional)True if only create curves, False (default) if create only CONS (i.e., Cut).

	@returns object: Returns a list of the created CURVES on success, otherwise None.

	"""

def FacesDach(faces, auto_identify, parameters):

	"""

	This function replaces a single fillet (or chamfer) or a series of fillets (or chamfers) with 
	the corresponding tangent Faces creating a sharp corner.


	@faces object: (optional)A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	In case a list is passed, result will simulate selection of faces in GUI mode.
	In case 'visible' or 'all' is passed, named argument auto_identify must be specified, 
	in order to simulate automatic identification of entities to be sharped.
	If auto_identify will not passed default values will be taken into consideration.
	If nothing is passed function will auto identify visible faces to be sharped.

	@auto_identify object: (optional)A list with three lists. First sublist consists two floats , min radius, max radius.
	Second sublist consists two floats, min corner angle, max corner angle.
	Third sublist consists two floats, min width, max width.
	If no list is passed default operation will search for entities with min radius = 0, 
	max radius = 20 and min width = 0, max width = 10.
	(Default: [[0., 20.], [0., 0.], [0., 10.]])

	@parameters object: (optional)A list with five boolean parameters.
	The first defining deletion of identified fillet (or chamfer).
	The second defining release of CONS.
	The third defining Join of Macros.
	The fourth defining Produce Curves.
	The fifth defining tangency calculation of Dach's faces.

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def FacesDivide(faces, auto_identify, parameters):

	"""

	This function splits a string of Faces (fillets or chamfers) in half iso-parametrically.


	@faces object: (optional)A face, a list of faces, a string with value 'visible' or a string with value 'all'.
	If it is called with 'visible', it works with all the visible faces.
	If it is called with 'all', it works with all the faces.
	In case a list is passed, result will simulate selection of faces in GUI mode.
	In case 'visible' or 'all' is passed, named argument auto_identify  must be specified, 
	in order to simulate automatic identification of entities to be sharped.
	If auto_identify will not passed default values will be taken into consideration.
	If nothing is passed function will auto identify visible faces to be sharped.

	@auto_identify object: (optional)A list with three lists. First sublist consists two floats , min radius, max radius.
	Second sublist consists two floats, min corner angle, max corner angle.
	Third sublist consists two floats, min width, max width.
	If no list is passed default operation will search for entities with min radius = 0, 
	max radius = 20, min width = 0, max width = 10.
	(Default: [[0., 20.], [0., 0.], [0., 10.]])

	@parameters object: (optional)A list with two boolean parameters.
	The first defining Join of Macros.
	The second defining Keep PIDs for the created faces to maintain their Pid.
	(Default: [False, False])

	@returns integer: Returns 1 on success, otherwise 0.

	"""

def OrientSolidFacets(solids, facet):

	"""

	Just like its GUI counterpart (Elements->SOLID->"Orient Facets") this function will change
	the selected solids in order to use as base facet, facet with index = 1, the facet that has
	the same orientation as the given one.
	
	The facet, that is provided as argument, must belong to a solid element that is connected to the selected solids.


	@solids object: A list of solids. These solids will be oriented by the function.

	@facet object: A facet that will be used to orient the given solids.

	@returns object: Returns a list containing references to the solids that were unable to be oriented according to the given facet.
	If no solids have failed, it returns 0.

	"""

def GetCurvePid(curve):

	"""

	Gets the property of a cross curve.


	@curve object: A reference to a cross curve.

	@returns object: Returns the property of the cross curve or None if the curve has no property.

	"""

def GetDatabaseTypesInInclude(deck, include, recursive):

	"""

	Returns all the different ansa types contained in an include, as seen in given deck database.
	Helpful to answer questions like "does include has this type entities?"


	@deck integer: The deck for which the collection will take place.

	@include object: A reference to an INCLUDE ANSA entity.

	@recursive boolean: Recursively search any containers contained in a higher level INCLUDE.
	Available options: True or False.

	@returns object: Returns a list with the types of entities that are contained in the selected INCLUDE.
	In case that the selected INCLUDE is empty the function returns an empty list.

	"""

def CopyEntitiesFromAnsaModel(model, deck, types, names):

	"""

	Copies entities from an Ansa model to current model given 
	their names and types.


	@model object: The Ansa model object from which the requested entities will be copied to the current Ansa model.

	@deck constant: the deck

	@types object: A python list holding the requested entity types, which will be copied from the source Ansa model. This list should be created in correspondence with the next argument 'names' (i.e. should have the same size).

	@names object: A python list holding the requested entity names, which will be copied from the source Ansa model. This list should be created in correspondence with the previous argument 'types' (i.e. should have the same size).

	@returns object: CopyEntitiesFromAnsaModel() function returns a python list (having the same size 
	as the 'types' and 'names' lists) whose entries hold a reference to the copied
	entity. Any entry of the returned list could be 'None' in case an error occurs
	or if the requested entity can not be found.

	"""

def GetAnsaModelSourceFileNames(model):

	"""

	Returns a list of the file names (ansa databases and neutral files) that were read to form the given Ansa Model.


	@model object: The Ansa model object.

	@returns object: Returns a list whose entries hold the file names of the merged files that form the given Ansa Model.

	"""

def SetCurrentAnsaWindow(window):

	"""

	Sets as Current an existing-docked Ansa window.


	@window object: A reference to the window to become current.

	@returns object: Always returns None.

	"""

def InputAdamsSolver(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function imports an '.adm' (Adams/Solver) format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def LaminateChangeStackingToPerPly(deck, property, fill_ply_drop_offs, merge_method, merge_t_tol, merge_theta_tol, disconnect_layers, gap, ret_node_pairs, ret_node_bricks, ret_facet_pairs, drop_off_prop, force_split_woven_layers, avoid_hanging_edges, paste_same_angle_layers, create, rows_num):

	"""

	This function changes the stacking of a Laminate property to "per ply".


	@deck integer: One of NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS, PERMAS.

	@property object: A laminate property or a list of laminate properties.

	@fill_ply_drop_offs boolean: (optional)Flag for filling ply drop-offs.
	(Default: False)

	@merge_method string: (optional)Method by which the layers of different properties will be merged.
	One of "by_tolerances", "by_gplyid", "by_layer_name".
	Required only for multiple properties.

	@merge_t_tol float: (optional)Thickness tolerance by which the layers of different properties
	will be merged. Required for merge_method = "by_tolerances".

	@merge_theta_tol float: (optional)Theta tolerance by which the layers of different properties
	will be merged. Required for merge_method = "by_tolerances".

	@disconnect_layers object: (optional)A boolean value which if set to True all the layers are disconnected,
	or a dictionary with key a tuple (property, sequence_pos, layer_pos),
	and value a boolean which if set to True the layer key is disconnected
	from all adjacent layers above.
	(Default: False)

	@gap object: (optional)A float value which is the gap between all the disconnected layers,
	or a dictionary with key a tuple (property, sequence_pos, layer_pos),
	and value a float which is the gap between the layer key
	and all adjacent layers above. Gap should be 0 or greater.
	(Default: 0)

	@ret_node_pairs boolean: (optional)If set to True, layer_data.node_pairs is a list of tuples with 2 nodes.
	If set to False, layer_data.node_pairs is None.
	(Default: False)

	@ret_node_bricks boolean: (optional)If set to True, layer_data.node_bricks is a list of tuples with 6 or 8 nodes.
	If set to False, layer_data.node_bricks is None.
	(Default: False)

	@ret_facet_pairs boolean: (optional)If set to True, layer_data.facet_pairs is a list of tuples 
	with 2 facets or shells.
	If set to False, layer_data.facet_pairs is None.
	(Default: False)

	@drop_off_prop object: (optional)Simple solid property of the ply drop-offs. If not given
	and fill_ply_drop_offs is True, then a default solid property is created.

	@force_split_woven_layers boolean: (optional)If set to True, woven layers are split.
	If set to False, woven layers are not split, except for SOLID_LAMINATE
	in LSDYNA, PAMCRASH, RADIOSS and PERMAS
	(Default: False)

	@avoid_hanging_edges boolean: (optional)When fill_ply_drop_offs is True,
	avoid hanging edges by creating pyramids (drop-off elements)
	and by splitting hexas to pentas (layer elements).
	(Default: False)

	@paste_same_angle_layers boolean: (optional)If set to True, consequent layers with the same nominal angle
	are not disconnected, even if disconnect_layers = True.
	(Default: False)

	@create object: (optional)A string value which is element type which will be created,
	or a dictionary with key a tuple (property, sequence_pos, layer_pos),
	and value a string which is element type which will be created.
	This string must be one of 'shells', 'thick shells', 'solids'.
	(Default: same as the property type)

	@rows_num object: (optional)An integer which is the number of rows per layer that will be created,
	or a dictionary with key a tuple (property, sequence_pos, layer_pos),
	and value an integer which is the number of rows per layer that will be created.
	(Default: 1)

	@returns object: Returns None on failure.
	
	An object 'ret' on success with the following members:
	ret.layers_data: a list of layer_data objects, one object per layer
	with data about the interface between a layer and all adjacent layers above.
	
	This object layer_data has the following members:
	layer_data.laminate: the final laminate property
	layer_data.sequence_pos: the final sequence index
	layer_data.layer_pos: the final layer index
	layer_data.node_pairs: a list of tuples with 2 nodes (bottom and top). These may be used to create beams.
	layer_data.node_bricks: a list of tuples with 6 or 8 nodes (penta or hexa). These may be used to create cohesives.
	layer_data.facet_pairs: a list of tuples with 2 facets or shells (bottom and top). These may be used to create contacts.
	layer_data.init_laminate: the initial laminate property
	layer_data.init_sequence_pos: the initial sequence index
	layer_data.init_layer_pos: the initial layer index

	"""

def LaminateChangeStackingToSingleElement(deck, property, vertical_limit):

	"""

	This function changes the stacking of a tshell/solid laminate property to "single element".


	@deck integer: One of NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS, PERMAS.

	@property object: One tshell/solid laminate property or a list of tshell/solid laminate properties.

	@vertical_limit float: (optional)The vertical limit (angle in degrees) for the projection which is made,
	so that different material orientations of the solids are transferred 
	to the created solid as mapped orientations.
	Failed elements are stored in ret.failed_elems.
	(Default: 0)

	@returns object: Returns None on failure.
	
	Returns an object 'ret' on success with the following members:
	ret.failed_elems: a list of failed elements due to vertical_limit.

	"""

def GenerateReducedRepresentation(source, type, output_path, method, dm_option, dm, freqset, damping, frf_parameters, interface, displacement_all, solution, include_wetted_nodes, create_reduced_coupling, epilysis_in_ansa):

	"""

	This function generates a reduced representation from a source container (include or subsystem).


	@source object: A Subsystem, Include or Set.

	@type string: The representation type.
	Accepted values: 
	-"DMIGOP2": NASTRAN Superelement with .op2 results file
	-"DMIGPCH": NASTRAN Superelement with .pch results file
	-"FRF": FRF Representation
	-"MODAL": Modal Model
	-"RIGIDBODY": RigidBody Representation

	@output_path string: The path where the representation files will be output.
	The file to be solved (TS) as well as display files, where applicable.

	@method object: (optional)The EIGRL that is needed for the representation definition.
	The argument should not be defined for Static reduction (SOL 101)
	and RigidBody representation.

	@dm_option string: (optional)Display Model option.
	Accepted values:
	-"NO" (default): Use no Display Model
	-"NEW": Create new display model from source
	-"EXISTING": Use existing Display Model entity
	-"ALL": Use entire source as display
	-"SKIN": Create new display model containing the
	         solids shell skin (only for modal reduction of fluid container).

	@dm object: (optional)A Display Model entity.
	If dm_option is "EXISTING", the dm must be defined.

	@freqset object: (optional)A FREQSET entity.
	If type is "FRF", the freqset must be defined.

	@damping object: (optional)A TABDMP1 or TABLED entity that defines the damping.

	@frf_parameters object: (optional)A dictionary with FRF specific parameters:
	    - sol (integer or string) : Valid values are 108, 111, "From Modal".
	    - output_type (string): Valid values are "op2" and "pch"
	    - coordinate_system (string): Valid values are "local" and "global"
	    - excitation_dofs (dictionary): A dictionary with an LC POINT name as 
	      key and dof as value (12345)
	    - response_dofs (dictionary): A dictionary with an LC POINT name as 
	      key and dof as value (12345)
	    - modal_container (object): A Subsystem (Representation : Modal Model)
	      or a Reduced Model entity (TYPE : Modal Model) containing modal results.

	@interface object: (optional)Interface Nodes option.
	Accepted values:
	-"ALL" (default): All Assembly Points and Loadcase Points of Display Model.
	-"A_POINTS": All Assembly Points of Display Model.
	- A Set entity.

	@displacement_all boolean: (optional)Request Displacement for all (not only Display Model) nodes.

	@solution string: (optional)Select reduction type for Nastran Superelements.
	Accepted values:
	-"101" for static reduction (SOL 101)
	-"103" (default) for dynamic reduction (SOL 103)

	@include_wetted_nodes boolean: (optional)Request results for wetted nodes as well.
	Use for Representation "MODAL MODEL" of a Structural Subsystem connected
	with a Fluid Subsystem through an FSCOUPLING entity.
	(Default = True)

	@create_reduced_coupling boolean: (optional)Use for Representation "MODAL MODEL" of a Structural Subsystem connected
	with a Fluid Subsystem through an FSCOUPLING entity.
	(Default = False)

	@epilysis_in_ansa boolean: (optional)Runs Epilysis(IN ANSA) in order to solve the Reduced Representation.
	(Default = False)

	@returns integer: Returns 1 on success, or 0 on failure.

	"""

def LaminateLayerTemplateChangeOrientation(deck, laminate, id, orientation_type, elements, vertical_limit, orientation_vector, orientation_element, orientation_curves):

	"""

	Changes the mapped orientation of a laminate layer template.


	@deck constant: One of NASTRAN, LSDYNA, ABAQUS, RADIOSS, ANSYS, PERMAS, PAMCRASH.

	@laminate object: A laminate property.

	@id integer: The id of the layer template.

	@orientation_type string: One of "by_vector", "by_theta", "by_edges".

	@elements object: (optional)A list of elements of the layer to change orientation. 
	If not given all elements of the layer are used.

	@vertical_limit float: (optional)The angle in degrees. The orientation change fails if the angle between 
	the normal vector and the vector which gives the orientation is greater 
	than the vertical_limit.

	@orientation_vector object: (optional)A list with three double values. Needed for "by_vector", "by_theta".

	@orientation_element object: (optional)An element needed for "by_theta".

	@orientation_curves object: (optional)A list of curves. Needed for "by_curves".

	@returns object: Returns None on success and a list of failed elements if any of the given elements fails to orient.

	"""

def RenumberIncludes(includes):

	"""

	This function applies the numbering rules of the includes that are given as input.


	@includes object: A list containing the includes whose numbering rules will be applied.

	@returns integer: Always returns 1.

	"""

def IncludeHasDatabaseType(deck, include, search_type, recursive):

	"""

	Checks if include contains the given database type, given by "search_type" in form of string.


	@deck integer: The deck for which the collection will take place.

	@include object: A reference to an INCLUDE ANSA entity.

	@search_type string: A string that describes the type of the entity. 
	It can be retrieved from the title of the element's edit card, 
	where it is displayed within brackets.
	Additionally, a Database container (e.g. "ELEMENT", "MATERIAL", "PROPERTY") 
	can given as search_type.

	@recursive boolean: Recursively search any containers contained in a higher level INCLUDE.
	Available options: True or False.

	@returns boolean: Returns True if include contains search_type, False otherwise.

	"""

def SetWorkingModelContainer(container, check, unload):

	"""

	Sets a Simulation Model, Loadcase or Simulation Run as working or non working.


	@container object: The Model Container to be set. Supported types are:
	a) ANSA_SIMULATION_MODEL type,
	b) ANSA_SIMULATION_RUN type,
	c) ANSA_LOADCASE type.

	@check boolean: (optional)If set to False, the MB container is set as not working.
	(Default: True)

	@unload boolean: (optional)If True, setting a container as Working will result to unload 
	of entities which are not under this container.
	(Default: True)

	@returns boolean: Returns True or False, whether the operation was succesful or not.

	"""

def GetWorkingModelContainer(element_type):

	"""

	Returns the working Model Browser container as specified at input arguments.


	@element_type string: The type of ANSA Model Browser Container.
	Supported types:
	-"ANSA_SIMULATION_MODEL"
	-"ANSA_SIMULATION_RUN"
	-"ANSA_LOADCASE"

	@returns object: Returns the working Model Browser Container on success, or None on failure.

	"""

def ChangeCoordType(deck, coords, target_type_name, update_names):

	"""

	Changes a given goordinate system or a list of coordinate systems to the selected coordinate system type of the selected deck.


	@deck integer: The deck of the target coordinate system type

	@coords object: A coordinate system entity or a list of coordinate system entities

	@target_type_name string: The target coordinate system keyword on the selected deck

	@update_names boolean: (optional)If set to True the changed coordinate systems are renamed based on the new type. False by default.

	@returns object: Returns a list with the changed coordinate system entities. The new list has 'None' values at the positions of the entities that failed to be converted so that they can be retrieved from the original list.

	"""

def InverseFormingImportFlc(inv_forming, filename):

	"""

	Imports a forming limit curve to an INVERSE FORMING entity from a *.csv file.


	@inv_forming object: A reference to an INVERSE FORMING object.

	@filename string: The filename to import.

	@returns: Always returns none.

	"""

def InverseFormingExportFldPoints(inv_forming, filename):

	"""

	Exports the forming limit diagram points of a builded INVERSE FORMING entity to a *.csv file.


	@inv_forming object: A reference to an INVERSE FORMING object.

	@filename string: The filename to output.

	@returns: Always returns None.

	"""

def InverseFormingApply(inv_formings):

	"""

	Builds the selected INVERSE FORMING objects.


	@inv_formings object: A list of INVERSE FORMING objects.

	@returns integer: Return 0 on success 1 on failure

	"""

def InverseFormingSetDirection(inv_formings):

	"""

	Defines stamp directions for INVERSE FORMING objects.


	@inv_formings object: A list of INVERSE FORMING objects.

	@returns: Always returns None.

	"""

def InverseFormingReleaseResults(inv_formings):

	"""

	Releases created entities from INVERSE FORMING entities.


	@inv_formings object: A list of INVERSE FORMING objects.

	@returns object: Always returns none.

	"""

def OrganizeModelContainerEntities(entities):

	"""

	Accepts a list of entities ( Subsystems, Simulation Models ) and runs action Organize Subsystem/Simulation Model Entities respectively.


	@entities object: A list containing the entities on which the action Organize Model Container Entities will be executed for.
	Bear in mind that this action is not defined for the GEOMETRY_OUT_OF_SUBSYSTEMS subsystem.

	@returns: Returns the number of entities that ran the Organize Model Container action.

	"""

def AddSimulationRunToDM(names_values, file_type, overwrite, link):

	"""
	Deprecated since version 17.1.0. Use function AddSimulationRun instead.

	Adds a Simulation Run to the DM. If the Simulation Run file contains a hierarchy 
	of Includes, they will be added as well to the DM.


	@returns object: Returns the server id of the newly added Simulation Run, unless the addition 
	fails or the overwrite flag is False and the Simulation Run already exists in 
	the DM (then it returns None).

	"""

	import warnings; warnings.warn("Deprecated since version 17.1.0. Use function AddSimulationRun instead.", DeprecationWarning)

def CheckAdjacentFacesOrientation(cons):

	"""

	This script function checks orientation between two adjacent faces, by accepting a valid double( yellow ) cons.


	@cons object: A double ( yellow ) cons.

	@returns boolean: Returns True in case orientation between adjacent faces is the same, otherwise False.

	"""

def ResultsMapperGetResults(mappers):

	"""

	Returns a list of entities that are created by the mapper upon 'Apply'.


	@mappers object: A Results Mapper entity

	@returns object: Upon success, returns a list of entities created by the Results Mapper. Returns none otherwise

	"""

def CollectAssemblyAdapter(container, content):

	"""
	Deprecated since version 20.0.0. Use function GetModelContainerAdapter instead.

	Returns the Adapter entity that adapts Content to Container, if exists.


	@container object: A reference to the container entity.

	@content object: A reference to the content entity.

	@returns object: Returns the Adapter ANSA entity, in case the Content ANSA entity is adapted in 
	the Container ANSA entity, or None otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 20.0.0. Use function GetModelContainerAdapter instead.", DeprecationWarning)

def CrossSectionOrientLocal(cross_section, x, y, angle, translate_to_shear, translate_to_mass, transform_to_mass):

	"""

	Orients the local coordinate system of a cross section.


	@cross_section object: A cross section or a list of cross section entities, whose coordinate system(s)
	will be oriented.

	@x float: (optional)The translation value parallel to the cross section's X-axis.
	Default value: 0

	@y float: (optional)The translation value parallel to the cross section's Y-axis.
	Default value: 0

	@angle float: (optional)The angle of rotation of the local coordinate system (degrees).
	Default value: 0

	@translate_to_shear boolean: (optional)Translate the local coordinate system to the cross section's shear center.
	Default value: False
	(Note: If translate_to_shear is True, none of the other optional arguments should
	be provided.)

	@translate_to_mass boolean: (optional)Translate the local coordinate system to the cross section's mass center.
	Default value: False
	(Note: If translate_to_mass is True, none of the other optional arguments should
	be provided.)

	@transform_to_mass boolean: (optional)Translate the local coordinate system to the cross section's mass center and
	rotate it at the angle of principal axis.
	(Note: If transform_to_mass is True, none of the other optional arguments should
	be provided.)

	@returns integer: Always returns 1.

	"""

def ConvertSubsystems(subsystems, subtype):

	"""

	Converts a list of Subsystem to the subtype the user specified, if such conversion is possible.


	@subsystems object: A list of subsytems.

	@subtype string: The subtype that the subsystems will be converted to. Can be "Regular" or "Connecting"

	@returns object: Return value is a list of subsystems which failed to be converted to the requested subtype.

	"""

def ViewsExportMetaFormat(view_name, file_path):

	"""

	Exports a saved view to a meta format file.


	@view_name string: The name of the saved view, there must be a view in Views Manager List with the corresponding name.

	@file_path string: The file path of the exported view.

	"""

def SmartPaste(source, target, prefer_change_source_than_join_perimeters, treat_source_as_frozen):

	"""

	This function pastes the CONS associated with the source and target given Interface Boundaries, without erasing the mesh. If the mesh around the source and target Boundaries is not compatible, then the target is reconstructed.


	@source object: A list or single Interface Boundary entity that contains the source cons to paste. The mesh of the source entities will not be altered (unless prefer_change_source_than_join_perimeters is set to True).

	@target object: A list or single Interface Boundary entity that contains the target cons or faces to paste with. If the mesh around the target entities is incompatible with the source, it will be altered to fit the source.

	@prefer_change_source_than_join_perimeters boolean: (optional)If this option is set to True, altering the source mesh is preferred if perimeters need to be joined in the target. The default value is False.

	@treat_source_as_frozen boolean: (optional)If this option is set to True, source perimeter considered as frozen. The default value is False.

	@returns object: If some of the Interface Boundaries fail to be pasted, The function returns a list with dictionaries. Each dictionary contains a) a list with the source failed cons with key "failed_source" b) a list with the target failed cons with key "failed_target" c) a list with all the alive source cons with key "source" d) a list with all the alive target cons with key "target". If paste succeeds completely, the function returns 0. If no valid input is provided and no paste is performed at all, the function returns 1.

	"""

def SetUserDefinedGeometrySearch(entity, settings):

	"""

	The function assigns UserDefinedGeometry as search method to entity, if it is not already assigned, and the area must be defined from a list of nodes. The area must always be defined.
	Also the function assigns UserDefinedArea as search method to Gebs, A_POINTs LC_POINTs and DOMAIN_FINDERs


	@entity object: A single entity or a sequence of entities to assign UserDefinedGeometry search. Valid entities are Connectors, GEBs, A_POINTs, LC_POINTs and DOMAIN_FINDERs.

	@settings anything: Depending on the entity type, the settings might be given in a different format.
	
	For Connector:
	A sequence of Dictionaries, one for each entity, where the key is the search Card fields where UserDefinedGeometry will be assigned. These fields are 'search1' to 'search4'. The data of each key might be another dictionary with settings or just a list with nodes to define the area.
	The settings dictionary accepts the following options:
	key: 'area'
	data: list of nodes
	
	key: 'sdist'
	data: a value larger than 0. 
	Default value is 1. This option is optional. 
	
	For Gebs, A_POINTs LC_POINTs and DOMAIN_FINDERs:
	A sequence of dictionaries or node lists, to define the area, for each entity.
	The dictionary accepts the following options:
	key: 'area'
	data: list of nodes
	
	key: 'sdist'
	data: a value larger than 0. 
	Default value is 1. This option is optional.

	@returns integer: The number of entities where the UserDefinedGeometrySearch was successfully applied.

	"""

def GetEntityCheckInDMValue(entity):

	"""
	Deprecated since version 19.1.0. Use function GetEntityDMUpdateStatus instead.

	Returns the value of 'Check in DM' flag of the given entity.


	@entity object: The entity to get the 'Check in DM' flag value

	@returns string: Returns the value of the 'Check in DM' flag.

	"""

	import warnings; warnings.warn("Deprecated since version 19.1.0. Use function GetEntityDMUpdateStatus instead.", DeprecationWarning)

def OutputCGNS2D(filename, mode, unit_system, scale, filetype, unstructured_options):

	"""

	Outputs a CGNS 2D file.


	@filename string: The name of the output file; must include
	the full path to the file.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@unit_system object: (optional)A UnitSystem object.
	Dictates the length unit to which the
	output will be scaled from the existing
	ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments
	are defined, the latter will override the first.

	@filetype string: (optional)Select the type of the output file.
	Can be "HDF5" or "ADF", in
	both upper- and lower-case.
	(Default: "ADF")

	@unstructured_options string: (optional)"mixed" or "separated".
	It controls the format of unstructured meshes.
	"mixed" - output all elements in a common section.
	"separated" - output elements in different sections 
	based on their types.
	(Default: "mixed")

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def CrossSectionResults(cross_section, mode, kind, system, result_flags):

	"""

	Returns stress values of a calculated cross section on its local coordinate system X-Y.


	@cross_section object: The calculated cross section.

	@mode string: Mode of results.
	Accepted values: "Any", Section", "Centroid", "Shear C"

	@kind string: Kind of results.
	Accepted values: "V.Misses", "Normal", "Shear", "Warping"

	@system string: System to which results are expressed.
	Accepted values: "X-Y", "1-2"

	@result_flags object: (optional)A list with strings that correspond to flags of various stresses.
	Accepted list values: "Nz", "Qx", "Q1", "Qy", "Q2", "Mz", "Mx", "M1", "My", "M2"
	
	Note: If this argument omitted, current values of these flags will be assumed,
	          otherwise only the referenced flags will be activated.

	@returns object: Return a list of class objects in success or None otherwise.
	
	The class objects in the returned list has three members:
	x:       The local x-coordinate of stress value
	y:       The local y-coordinate of stress value
	stress:  The stress value at point (x,y)

	"""

def AddToAnnotation(annotation, entity):

	"""

	Adds an entity to an Annotation.
	The Annotation will be attached to the entity.


	@annotation object: The Annotation entity

	@entity object: The entity that will be added to the Annotation

	@returns object: The function returns always None

	"""

def SaveLogFile(filename, log_type, format):

	"""

	This function saves last input or merge analytics 


	@filename string: The name of the file

	@log_type string: (optional)if value "merge_analytics" is provided the merge 
	analytics will be saved instead of input analytics

	@format string: (optional)accepted values "csv", "html"
	by default the log file is saved in html format

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def RelocateReducedRepresentationPaths(subsystem, target_path):

	"""

	Relocate to a target path, all paths related with a Reduced Representation.


	@subsystem object: A reference to a subsystem object.

	@target_path string: The path where all Reduced Representation related paths will be relocated to.

	@returns integer: Returns 0 if relocation fails, 1 otherwise.

	"""

def InputPlot3D(filename, nodes_id, elements_id, properties_id, model_action, file_format, dimension, grid_type, endianness, precision, contains_iblanking, data_layout, unit_system, cfd_light_mode):

	"""

	The InputPlot3D function imports a Plot3D model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted value: "offset".

	@elements_id string: (optional)Accepted value: "offset".

	@properties_id string: (optional)Accepted value: "offset".

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@file_format string: (optional)Accepted values: "ascii", "c-binary"  or "fortran-binary".
	(Default: "ascii")

	@dimension string: (optional)Accepted values: "2d" or "3d".
	(Default: "3d")

	@grid_type string: (optional)Accepted values: "single-block" or "multi-block".
	(Default: "multi-block")

	@endianness string: (optional)Accepted values: "big-endian" or "little-endian".
	(Default: "little-endian")

	@precision string: (optional)Accepted values: "single" or "double".
	(Default: "double")

	@contains_iblanking string: (optional)Accepted values: "yes" or "no".
	(Default: "no")

	@data_layout string: (optional)Accepted values: "whole" or "planar".
	(Default: "whole")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off".
	If it is set to "on", ANSA will use the light volume representation,
	which is more suitable for CFD meshes.
	(Default: "off")

	@returns integer: Returns 1 on success and 0 on failure

	"""

def OutputPlot3D(filename, mode, file_format, grid_type, precision, data_layout, unit_system, scale):

	"""

	This function outputs a Plot3D format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@file_format string: (optional)Accepted values: "ascii" or "c-binary".
	(Default: "ascii")

	@grid_type string: (optional)Accepted values: "single-block" or "multi-block".
	(Default: "multi-block")

	@precision string: (optional)Accepted values: "single" or "double".
	(Default: "double")

	@data_layout string: (optional)Accepted values: "whole" or "planar".
	(Default: "whole")

	@unit_system object: (optional)A UnitSystem object.
	Dictates the length unit to which the
	output will be scaled from the existing
	ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments
	are defined, the latter will override the first.

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def InputSestra(filename, nodes_id, elements_id, materials_id, coords_id, model_action, read_comments, comment_input_general_comments, comment_input_name_comment, comment_input_connection, comment_input_parts_groups, comment_input_kinetics, comment_input_colors, comment_input_numb_rules, comment_input_lock_views, comment_input_misc, comment_input_annotations, comment_input_attributes, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers):

	"""

	The InputSestra function imports an Sestra model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window",
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@read_comments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def OutputSestra(filename, mode, write_comments, model_check, model_check_template, cancel_output_if_model_check_error, write_analysis_control_data):

	"""

	This function outputs a Sestra format file like the FILE>OUTPUT>SESTRA functionality.


	@filename string: The name of the output file. must reference the full path 
	to the file.

	@mode string: (optional)"all", "model" or "visible".
	(Default: what set at the last execution)

	@write_comments string: (optional)"none" or "at_eof".
	(Default: what set at the last execution)

	@model_check string: (optional)Run a check template before output.
	Accepted values: "on" or "off".
	(Default: "off")

	@model_check_template string: (optional)The check template to execute during output.
	This argument is valid only if 'model_check' is "on".

	@cancel_output_if_model_check_error string: (optional)Cancel output if model checking fails. Model checking 
	will fail if at least one error or warning was encountered. 
	Accepted values: "on", "off".
	This argument is valid only if 'model_check' is "on".
	(Default: "off")

	@write_analysis_control_data string: (optional)Write Analysis Control Data file on output.
	Accepted values: "on", "off".
	(Default: what set at the last execution)

	@returns: Returns 1 on success, 0 otherwise.

	"""

def OutputMetaFrfAssembly(filename, mode):

	"""

	This function ouputs a Meta Frf Assembly format file like the FILE>OUTPUT>META FRF ASSEMBLY functionality.


	@filename string: The name of the output file. Must reference the full path to the file.

	@mode string: (optional)Selection of output entities. Valid options are: 'all', 'model' or 'visible'.
	(Default: what set at the last execution)

	@returns integer: Returns 0 on success, 1 otherwise.

	"""

def CreateView(view_name, euler_x, euler_y, euler_z, left, bottom, near, right, top, far, rotpoint_x, rotpoint_y, rotpoint_z):

	"""

	Creates a new view at Views Manager List.


	@name string: The view's name.

	@euler_x float: X axis euler angle.

	@euler_y float: Y axis euler angle.

	@euler_z float: Z axis euler angle.

	@left float: View's bouding box left coordinate.

	@bottom float: View's bouding box bottom coordinate.

	@near float: View's bouding box near coordinate.

	@right float: View's bouding box right coordinate.

	@top float: View's bouding box top coordinate.

	@far float: View's bouding box far coordinate.

	@rotpoint_x float: Rotation center's X coordinate.

	@rotpoint_y float: Rotation center's Y coordinate.

	@rotpoint_z float: Rotation center's Z coordinate.

	"""

def InvertPart(part):

	"""

	This function collects all parts that 
	1) are not in the incoming matrix and
	2) are not a parent group (all levels up till the top root) of any incoming part
	


	@part object: A part entity or a list of part entities.

	@returns object: A matrix with the collected parts.

	"""

def BuildModelBrowserEntities(entities):

	"""

	This function runs the "Build" functionality on all input Model Browser Containers.


	@entities object: An array of Model Browser Containers

	@returns integer: the number of entities that were successfully built.

	"""

def ActivateSimulationRun(simulation_run, activate):

	"""

	This function will set/unset the input Simulation Run as the Working Model 
	Browser Container.


	@simulation_run object: a Simulation Run entity.

	@activate boolean: set or unset as Working

	@returns integer: Always returns 0.

	"""

def ReplaceSegmentsWithinContactSets(contacts):

	"""

	The function takes a list of CONTACTs as argument and tries to replace the SEGMENTs existing within the referenced SETs, by filling them with entities which describe the same area/volume, such as SHELLs/SOLIDs, Properties or EDGEs.


	@contacts object: A single contact, a list of contacts or "all" to modify all the contacts of the model.

	@returns object: None

	"""

def OptimizeSetContents(sets, solid_skin_mode):

	"""

	The function takes a list of SETs as argument and tries to optimize their contents by replacing lower level entities to higher level entities which describe the same Area/Volume. The hierarchy of the entities has as follows:
	
	NODEs -> ELEMENTs -> PROPERTIES -> (optional) Skin of Solid PROPERTIES


	@sets object: A single SET, a list of SETs or "all" to optimize all the SETs of the model.

	@solid_skin_mode boolean: (optional)If this flag is True, then the solid Properties will be replaced with their 
	respective skin (default is False)

	@returns object: None

	"""

def CompareContentsOfContainers(deck, model1, model2, type, check_first_level, check_geometry):

	"""

	This function takes two ANSA models as arguments and tries to find differences between the contents of
	the given container type(e.g. SET), by comparing the type and the id of every contained entity. Also,
	there is an option to perform geometric check by inspecting the C.O.G. of each child entity alongside 
	with the C.O.G. of the container itself.
	To be noted that the function matches the containers of the two Models by using their Id.


	@deck integer: The deck

	@model1 object: The first ANSA Model for which the check will be held.

	@model2 object: The second ANSA Model for which the check will be held.

	@type string: The type of the container for which the check will be held. it can be:
	Sets, (i.e. "SET", "GROUP")
	"INCLUDE",  
	"ANSAPART"
	"__PROPERTIES__"
	"__MATERIALS__"

	@check_first_level boolean: (optional)If True, the check will be held only for the first level 
	children of the container (default is False).

	@check_geometry boolean: (optional)If True, geometric check will be held as well, based on the C.O.G.
	of the contained entities (default is False).

	@match_containers_by_name boolean: (optional)If True, the matching of containers is performed my name.

	@returns object: Returns a list of tuples, each of which contains information about the containers, which found different.
	The tuple has the form (container_of_model1, container_of_model2, str_difference) 
	The str_difference describes what kind of difference the containers have.

	"""

def GetIncludeReferenceFileText(include):

	"""

	Gets the text of an include's reference file.


	@include object: A reference to an include element.

	@returns string: Returns the text of the given include's reference file.

	"""

def InputMotionSolve(filename, nodes_id, elements_id, properties_id, model_action):

	"""

	This function imports a '.xml' (MotionSolve) format file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset" or "nooffset" or "keep-old" or "keep-new" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", "new_model_in_active_window", 
	"new_model_in_new_window" or "new_model_in_enabled_windows".
	(Default: "merge_model")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def RemoveFromAnnotation(annotation, entity):

	"""

	Removes an entity from an Annotation.
	The Annotation will be detached from the entity.


	@annotation object: The Annotation entity

	@entity object: The entity that will be removed from the Annotation

	@returns boolean: The function returns true if the entity is removed and false otherwise.

	"""

def DefineReducedRepresentation(type, display_file, asm_file, pch_file, results_file, convert_to_dmigpch, source):

	"""

	This function defines a reduced representation from the necessary solver files.


	@type string: The representation type.
	Accepted values: 
	-"DMIGOP2": NASTRAN Superelement with .op2 results file
	-"DMIGPCH": NASTRAN Superelement with .pch results file
	-"DMIG". Reduced Model with DMIG matrices as results.
	-"FRF": FRF Representation
	-"MODAL": Modal Model

	@display_file string: (optional)File with geometry used for display of the Reduced Model.

	@asm_file string: (optional)Assembly file (.asm) produced by the solver.
	If type is "DMIGOP2" or "DMIGPCH" asm_file must be defined.

	@pch_file string: (optional)Punch file (.pch) produced by the solver.
	If type is "DMIGPCH" or "DMIG" pch_file must be defined.

	@results_file string: (optional)Results file (.op2) produced by the solver.
	If type is "DMIGOP2" or "FRF" or "MODAL" results_file must be defined.

	@convert_to_dmigpch boolean: (optional)This option can be used if type is "DMIG" and converts the DMIG Reduced Model
	to DMIGPCH Reduced Model.
	Default is True.

	@source object: (optional)A Subsystem.

	@returns object: Returns the defined Reduced Model.

	"""

def OutputMotionSolve(filename, mode):

	"""

	This function outputs a MotionSolve file.


	@filename string: The path to the directory to export.

	@mode string: (optional)"all", "model" or "visible".
	(Default: "visible")

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def GetEntityDMUpdateStatus(entity):

	"""

	Get the "DM Update Status" of the specified entity.


	@entity object: The entity to get the "DM Update Status".

	@returns constant: Returns a constant value according to the "DM Update Status" as follows:
	constants.DM_STATUS_UP_TO_DATE      for "Up to date"
	constants.DM_STATUS_NOT_UP_TO_DATE  for "Not up to date"
	constants.DM_STATUS_MODIFIED        for "Modified"
	constants.DM_STATUS_ALTERNATIVE     for "Alternative"
	constants.DM_STATUS_NOT_FOUND       for "Not Found"
	constants.DM_STATUS_ERROR           when no "DM Root" was specified.

	"""

def CrossSectionAutoSpotAll(cross_section, tolerance_t_fac, parallel_limit, diameter, along_step, widthwise_step, young_modulus, poisson_ratio, curves):

	"""

	Connect cross section flanges with spot elements.


	@cross_section object: A cross section or a list of cross section entities, calculated as thin,
	whose flanges will be connected with spot elements.

	@tolerance_t_fac float: (optional)Two segments with thickness t1 and t2 will be spot connected if the distance between
	them is less or equal to tolerance_t_fac*(t1+t2)/2.
	(Default value: 1.2)

	@parallel_limit float: (optional)Any pair of segments that form angle up to this value (in degrees) will be treated
	as parallel. Accepted values 0 ~ 60.
	(Default value: 10.)

	@diameter float: (optional)Diameter of the created spot entity. If no value is provided, then the mean diameter
	,of the spots that already exist in the cross section, is extracted and applied. If
	the cross section does not have spot elements, the default value is applied.
	(Default value: 5.)

	@along_step float: (optional)Distance between the created spot elements along the cross section's normal axis.
	If no value is provided, then the mean distance, of the spots that already exist in
	the cross section, is extracted and applied. If the cross section does not have spot
	elements, the default value is applied.
	(Default value: 35.)

	@widthwise_step float: (optional)Distance between the created spot elements along the cross section segment.
	(Default value: 0.)

	@young_modulus float: (optional)The young modulus of elasticity of the created spot elements. If no value is
	provided, then the mean modulus of elasticity, of the spots that already exist
	in the cross section, is extracted and applied. If the cross section does not
	have spot elements, the default value is applied.
	(Default value: 210000)

	@poisson_ratio float: (optional)The poisson ratio of the created spot elements. If no value is provided, then the
	mean poisson ratio, of the spots that already exist in the cross section, is
	extracted and applied. If the cross section does not have spot elements,
	the default value is applied.
	(Default value: 0.3)

	@curves object: (optional)A list of CROSS_CURVE entities. If defined, then AutoSpot is performed only on the
	CROSS_CURVEs of the list and not on all cross section's CROSS_CURVEs.
	The entities of the list should belong to the provided cross_section.
	Note: This argument should not be used when a list of cross section entities is
	provided.

	@returns integer: Returns 1 upon successfull creation of at least one spot element and 0 otherwise.

	"""

def GetCrossSpotConnectedCurves(cross_spot):

	"""

	Creates a list with the cross curve entities that are connected through a cross spot.


	@cross_spot object: A cross spot entity. The curves which are connected through this entity will be extracted and
	retrieved.

	@returns object: Returns a list with the spot connected cross curve entities.

	"""

def MergeAnsaModels(master_model, slave_model, target_model, offset_option, delete_source_models, merge_parts, autoposition_parts, create_instances, custom_offset_options):

	"""

	This function merges two ansa models to the master model or to a new one, based on a series of user defined arguments.


	@master_model object: Master model object.

	@slave_model object: Slave model object.

	@target_model string: (optional)Determines whether slave model will be merged to master one, or master 
	and slave will be merged to a new one.
	Accepted values:"master_model", "new_model"
	(Default "master_model")

	@offset_option string: (optional)Determines the action to be taken for ids during the merge.
	Accepted values: "offset_slave_ids" 
	                 "offset_slave_ids_only_conflicts" 
	                 "custom_offset" : define offset option per entity group 
	                                   through "custom_offsets" parameter.
	(Default "offset_slave_ids")

	@delete_source_models boolean: (optional)Determines whether merged_models are going to be deleted or not.
	(Default: False)

	@merge_parts boolean: (optional)Determines whether conflicting parts are going to be merged or not.
	(Default: False)

	@autoposition_parts boolean: (optional)Determines whether multi-instantiated parts will be auto positioned or not.
	(Default: False)

	@create_instances boolean: (optional)Determines whether two parts with the same Id or name will be merged 
	or a new instance of the part will be created.
	(Default: False)

	@custom_offset_options object: (optional)Used in combination with "offset_option" = "custom_offset"
	A python list holding pairs of the requested entity group type,
	and one of the following offset options:  
	              "offset_all_slave_ids", 
	              "offset_all_slave_ids_with_value", "offset_value", <value>
	              "offset_only_conflicts", 
	              "offset_only_conflicts_with_value", "offset_value", <value>
	              "keep_master"(only for NODE, PROPERTY, MATERIAL, SET, COORDINATE,  SECTION PROPERTY, LOADSET, HOURGLASS, EOS)
	              "keep_slave"(only for NODE, PROPERTY, MATERIAL, SET, COORDINATE,  SECTION PROPERTY, LOADSET, HOURGLASS, EOS
	
	or 
	         "all"  along with the already afforementioned supported offset_options, if user wants all the existing entity groups to be merged according to offset_option.  If a group needs to be excluded the latter needs to be defined with the desired option as last argument
	          e.g. to merge all existing groups of entities with option "offset_all_slave_ids" and only NODE with "keep_master": custom_offset_options=("all", "offset_all_slave_ids", "NODE", "keep_master")

	"""

def MeanFieldHomogenization(filename):

	"""

	Performs material homogenization of a microstructure with properties of each
	constituent given in a xml file.


	@filename string: The filename of the xml with microstructure data.

	@returns object: Returns an object with the homogenization results(Engineering properties 
	assigned according to homogenized material type (isotropic, transversely isotropic
	orthotropic, anisotropic))
	-ret.E1
	-ret.E2
	-ret.E3
	-ret.N12
	-ret.N13
	-ret.N23
	-ret.G12
	-ret.G13
	-ret.G23
	-ret.RHO   (Homogenized Density)
	-ret.Stiff (Full stiffness matrix 6x6 in case of anisotropic materials)
	-ret.CTEs  (Full coefficients of thermal expansion matrix)
	-ret.SpecHeat (Specific Heat of composite in case of thermal conductivity analysis)
	-ret.ThermConduct (Full thermal conductivity tensor 3x3 in case of thermal conductivity analysis)

	"""

def MeanFieldHomogenizationMakeMaterial(deck, filename, stress_index_for_plast_curve, strain_index_for_plast_curve):

	"""

	Performs material homogenization of a microstructure with properties of each
	constituent given in a xml file, and creates the appropriate homogeneous material
	for the given deck.


	@deck integer: The deck for the material to be generated

	@filename string: The filename of the xml with microstructure data.

	@stress_index_for_plast_curve string: (optional)In case of non linear homogenization analysis the 
	stress index of the plastic curve to assign to 
	material.E.g. "Stress11", "Stress22", "Stress33",
	"Stress12", "Stress13", "Stress23", "VonMises".
	If omitted von mises stress type is considered.

	@strain_index_for_plast_curve string: (optional)In case of non linear homogenization analysis the 
	strain index of the plastic curve to assign to 
	material.E.g. "Strain11", "Strain22", "Strain33",
	"Strain12", "Strain13", "Strain23", "VonMises".
	If omitted, von mises strain type is considered

	@returns object: Returns the created homogeneous material

	"""

def ConnectPartInstances(master_part, slave_parts):

	"""

	This function makes the 'slave_parts' instances of the 'master_part'. 
	All instances of the 'slave_parts' will have the same Module Id and Version with
	the 'master_part".


	@master_part object: The master part.

	@slave_parts object: The list of parts that will become instances of the 'master_part'.

	@returns boolean: Returns True on success, False on failure.

	"""

def BreakPartInstances(parts):

	"""

	This function takes as input a list of multi-instance parts and makes them single-instances.
	The single-instances will have empty Module Ids and their Names will be uniquified by
	appending '@' and a number.


	@parts object: The list of parts.

	@returns boolean: Returns True on success, False on failure.

	"""

def GetPartInstances(part, same_version_instances):

	"""

	This runction returns all instances of a part. If the flag 'same_version_instances'
	is True then the function returns only the part instances with the same version
	as the input part.


	@part object: The input part.

	@same_version_instances boolean: (optional)This flag determines whether to return all part instances or only the ones
	with the same version as the input part. 
	Default value: False.

	@returns object: Returns the list with all instance of the part.

	"""

def GetPartLinks(part):

	"""

	This function returns all link parts of a part.


	@part object: The input part.

	@returns object: Returns a list with all links of the input part.

	"""

def CalculateHardeningParameters(deck, material_or_curve, filename, convert_nominal_to_true):

	"""

	Calculates hardening modulus and hardening exponent from stress/strain data curve.


	@deck integer: The deck to perform the calculations

	@material_or_curve object: (optional)For ABAQUS, LSDYNA and RADIOSS a material or a curve with 
	stress strain data or a *.csv file with first column having
	the stresses and the second column the strains. If data
	table with more than one curve is assigned to the material,
	the calculations are performed with the first curve. 
	Compatible materials:
	ABAQUS MATERIAL, RADIOSS LAW36, LSDYNA MAT24

	@filename string: (optional)A *.csv file with first column having the stresses and the 
	second column, the strains.

	@convert_nominal_to_true boolean: (optional)A flag for conversion of the stress and strain values 
	from nominal to true. Default value is False

	@returns object: Returns an object with the hardening parameters.
	-ret.K
	-ret.n

	"""

def GetAllCurvesFromMaterial(deck, material):

	"""

	GetAllCurvesFromMaterial - returns a list with all the curves of a data table assigned to material


	@deck integer: The deck of the corresponding material
	Compatible decks: ABAQUS, LSDYNA, RADIOSS

	@material object: A material with the given data table with curves
	Compatible materials:
	ABAQUS MATERIAL, LSDYNA MAT24, RADIOSS LAW36

	@returns object: Returns a list with the curves of the data table assigned to the material

	"""

def TransformResolve(entities):

	"""

	Disconnects transformation entities from their affected entities keeping them at their current position.
	The transformation entities are kept but will no longer be applied on any entity.


	@entities object: A reference or a list of references of transformation entities.

	@returns object: None

	"""

def CrossSectionDeleteFreeEdges(cross_section, apply_max_length, max_length, handle, free_on, spot_neighbor, paste_neighbor, curve_neighbor):

	"""

	Delete the free edges of thin cross sections.


	@cross_section object: A cross section, or a list of cross section entities, calculated as thin.

	@apply_max_length boolean: (optional)Defines whether the value of max_length should be taken into account or not.
	(Default value: False)

	@max_length float: (optional)Defines an upper limit to the length of the free edges that should be included.
	Free edges, whose length is bigger than this value are ignored.
	Used only when apply_max_length = True.
	(Default value: 0)

	@handle string: (optional)Defines whether two neighbor segments will be treated as a continuous edge or not.
	Accepted values: "Independently", "As chain"
	(Default value: "Independently")

	@free_on string: (optional)Defines that an edge should be included if it is free on one or both sides.
	Accepted values: "One side", "Both sides"
	(Default value: "One side")

	@spot_neighbor boolean: (optional)Defines whether free edges that neighbor with Cross Spot elements should be
	included or not.
	Used only when free_on = "One side"
	(Default value: False)

	@paste_neighbor boolean: (optional)Defines whether free edges that neighbor with Cross Paste elements should be
	included or not.
	Used only when free_on = "One side"
	(Default value: False)

	@curve_neighbor boolean: (optional)Defines whether free edges that neighbor with Cross Curve elements should be
	included or not.
	Used only when free_on = "One side"
	(Default value: False)

	@returns integer: Always returns 1.

	"""

def GetFacesOfMacros(macros):

	"""

	Returns the faces that input macros contain.


	@macros object: A Face entity, Face ID, a list of Face entities, a list of Face IDs, or a list of Face entities and IDs.

	@returns object: Returns a list with the faces that the input macros contain.

	"""

def SplitVolumeMesh(properties, create_cfd_interfaces):

	"""

	The SplitVolumeMesh function duplicates the selected shell properties and disconnects the volume mesh.


	@properties object: A list of shell properties where the mesh will be 
	splitted.

	@create_cfd_interfaces boolean: (optional)Flag that indicates if a CFD_INTERFACE will be created
	for each property in the list. (Default: True)

	@returns integer: Returns 0 on success, non zero on error, where:
	
	0: Sucess
	1: Failure: Invalid properties list. Only shell properties are accepted.
	2: Failure: Empty properties list.
	3: Failure: Shell properties are not internal.
	4: Failure: Shell properties are intersecting.
	5: Failure: Shell properties contain or connect with frozen faces.

	"""

def UpdateContactClearance(deck, contacts):

	"""

	Calculates the clearance values of given contacts. 


	@deck integer: The deck constant.

	@contacts object: A list with the desired contacts.

	@returns object: For the contacts that was able to make the calculations a dictionary is returned with keys the contacts and values the clearance of each contact.

	"""

def DeleteModelContainer(containers, geometry, connections, model_setup_entities, interfaces, inner_containers, display_model, superelement, loadcase, definition, protect_main_include):

	"""

	This function deletes one or more Model Browser Containers(Subsystems, Simulation Models, Simulation Runs, Loadcases, Library Items) contained in a list, according to a series of arguments.


	@containers object: A list of Model Browser containers(Subsystems, Simulation Models, Simulation Runs, Loadcases, Library Items).

	@geometry boolean: (optional)Determines whether the Model Browsers' geometry should be deleted or not.
	(Default: False)

	@connections boolean: (optional)Determines whether the Model Browsers' connections should be deleted or not.
	(Default: False)

	@model_setup_entities boolean: (optional)Determines whether the Model Browsers' model setup entities should be deleted or not.
	(Default: False)

	@interfaces boolean: (optional)Determines whether the Model Browsers' interfaces(Apoints, LCPoints) should be deleted or not.
	(Default: False)

	@inner_containers boolean: (optional)Determines whether the Model Browsers' inner containers should be deleted or not. 
	Use this when you need to delete the Subsystems/Manually dropped Includes that are children of a Simulation Model,  or the Loadcase and Simulation Model that are children of a Simulation Run.
	(Default: False)

	@display_model boolean: (optional)Determines whether the Model Browser containers' corresponding Display Model should be deleted or not.
	Is applicable only to Display Model subsystems.
	(Default:False)

	@superelement boolean: (optional)Determines whether the Model Browser containers' corresponding Superelement should be deleted or not.
	Is applicable only to Superlement subsystems.
	(Default : False)

	@loadcase boolean: (optional)Determines whether the Model Browser containers' corresponding Loadcase should be deleted or not.
	Is applicable only to Loadcase Model Browser Containers related to a Loadcase entity.
	(Default:False)

	@definition boolean: (optional)Determines whether the Model Browser containers' definition should be deleted or not.
	(Default:False)

	@protect_main_include boolean: (optional)Determines whether the Model Browser containers' main includes should be deleted or not.
	(Default: False)

	@returns integer: Returns 1 when at least one of the Model Browser Containers which was sent for deletion attempted to delete its definition but instead it was turned Hidden, because it is in use - probably by a Connection as connectivity.
	Returns 0 in all other cases.

	"""

def AddListAction(deck, action_name, keyword, filename, function_name, parent_name, separator, group, icon_name, parent_icon_name):

	"""

	Creates a user defined action in an entity's list based on the entity type.
	A callback script is set to run when the action runs.


	@deck constant: The deck on which the action will be created. A tuple of decks or constants.decks can also be used to create an action in more than one deck.

	@action_name string: The action name as it will appear in the right click pop up menu.

	@keyword string: The ANSA keyword of the entity for which the action will be created.

	@filename string: The filename of the script file where the callback function is located.

	@function_name string: The callback function that will run when the action is pressed. The prototype of the callback function is:
	def action(deck, entities, alist, *args)
	
	deck is the deck on which the action runs.
	entities is an iterable of the selected entities, or all the entities of the list if no entity is selected.
	alist is a named tuple with members alist.selected and alist.total.
	alist.selected is an integer of the number of the selected entities when the action was called.
	alist.total is an integer of the number of the total entities in the list.
	*args is reserved for future use.

	@parent_name string: (optional)The name of the parent action. Use the ':' character to create an hierarchy of actions.

	@separator boolean: (optional)Add a separator in the pop up menu before the action.

	@group constant: (optional)Add the action in the entity's group. Available constants are:
	
	constants.LIST_ACTION_NO_GROUP (default)
	constants.LIST_ACTION_IN_GROUP Add action in all entity types of a group
	constants.LIST_ACTION_IN_GROUP_ONLY Add action only in the entity's group
	constants.LIST_ACTION_IN_GROUP_ELEMENT Add action in all element types of a group
	constants.LIST_ACTION_IN_GROUP_ELEMENT_ONLY Add action only in the element's group

	@icon_name string: (optional)The icon to be displayed next to the action's name in the right click pop up menu.

	@parent_icon_name string: (optional)The icon to be displayed next to the action's parent name in the right click pop up menu. Use the ':' character to create an hierarchy of action icons.

	@returns boolean: Returns true if the action was created, false otherwise.

	"""

def OutputClarity(filename, mode):

	"""

	OutputClarity outputs a the mesh as a file formatted for Clarity solver.


	@filename string: The name of the output file; must include the full path to 
	the file.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: what set at the last execution)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def GetCurrentInputProductTreeSettings():

	"""

	Returns an object of type "base.InputProductTreeSettings" initialized from the ANSA defaults.


	@returns object: Returns an object of type "base.InputProductTreeSettings".

	"""

def VolumeFractionAssistant(solids, shells, fill_internal, accuracy, create_inivol_fraction, material):

	"""

	Calculates the volume fraction values for the input solids intersected by the input shells.


	@solids object: A list of solids for which the volume fraction will be computed.

	@shells object: A list of shells (or solids) that intersect the solids.

	@fill_internal boolean: (optional)Option for the location of the volume fraction (default = True).

	@accuracy string: (optional)The accuracy of the calculation: 'low', 'medium', 'high' or 'highest' (default = 'medium').

	@create_inivol_fraction boolean: (optional)Option to create initial conditions, type = volume fraction (default = True).

	@material object: (optional)The material to be used by volume fraction entities (required if create_inivol_fraction = True).

	@returns object: If create_inivol_fraction = True, the function will return a list of the created volume fraction entities.
	If create_inivol_fraction = False, the return value will be a dictionary with the solids as keys and the calculated volume fraction values as data.

	"""

def SetPerspectiveCamera(aspect_ratio, fov, near, far):

	"""

	Creates a new perspective ANSA camera


	@aspect_ratio float: The ratio width/height of the screen

	@fov float: The field of view in degrees

	@near float: The near plane

	@far float: The far plane

	"""

def CameraLookAt(eye, focus, up):

	"""

	Creates a new view of the current camera


	@eye object: a 3d vector for location of the camera

	@focus object: a 3d vector for the focus point

	@up object: the up 3d vector

	"""

def SetParallelCamera(zoom_factor, z_size):

	"""

	Creates a new parallel ANSA camera


	@zoom_factor float: The zoom of camera

	@z_size float: The depth of camera frustum

	"""

def GetModelContainerAdapter(container, content):

	"""

	Returns the Adapter entity that adapts Content to Container, if exists.


	@container object: A reference to the Model Browser Container entity.

	@content object: A reference to the content entity that is adapted in the container entity

	@returns object: Returns the Adapter ANSA entity, in case the Content ANSA entity is adapted in 
	the Container ANSA entity, or None otherwise.

	"""

def CameraZoom(x, y, factor):

	"""

	Zooming in/out of a given point


	@x integer: the x pixel

	@y integer: the y pixel

	@factor float: for parallel camera: a value in (0, 1) causes zoom in, 
	                     a value in (-1, 0) causes zoom out, 
	                     0 has no effect 
	for perspective camera : positive for zoom in, 
	                         negative for zoom out 
	                         (the value has no effect)

	"""

def RunReducedRepresentation(reduced_model, solver, custom_solver_command):

	"""

	This function runs a specified solver executable in order to solve the generated file of the reduced representation.


	@reduced_model object: The reduced_model whose generated file will be solved.

	@solver string: (optional)Specified solver to run the reduced representation.
	Accepted values:
	- "epilysis_out_of_ansa"
	- "nastran"
	- "meta_as_solver"
	- "custom"
	Default "epilysis_out_of_ansa"

	@custom_solver_command string: (optional)Specifies the custom solver executable.
	Must be defined if solver is "custom".

	@returns boolean: Returns True on success, or False on failure.

	"""

def ConvertAbaqusStepmanagerToLoadcase(stepmanager):

	"""

	This function converts a Step Manager to a Loadcase Setup Assistant.


	@stepmanager object: A Step Manager entity

	"""

def ViewsSaveViews(path):

	"""

	Exports ANSA views to file.


	@path string: The file path of the exported views

	"""

def ViewsLoadViews(path):

	"""

	Imports ANSA views from file.


	@path string: The views file.

	"""

def ViewsApplyView(name):

	"""

	Apply an already create view with the same name as the parameter


	@name string: The name of the view

	"""

def CreateCouplingFile(fs_coupling, coupling_file, solver, search_dist, proj_dist):

	"""

	This function creates a coupling file (.pch) for an FS COUPLING entity.


	@fs_coupling object: An FS COUPLING entity.

	@coupling_file string: The path where the coupling file (.pch) will be created.

	@solver string: (optional)Specified solver to create the coupling file (.pch)
	Accepted values:
	- "meta"
	- "nastran"
	- "epilysis_out_of_ansa"
	- "epilysis_in_ansa"
	- "press_equilibrium"
	Default: "meta"

	@search_dist float: (optional)In case solver is "press_equilibrium", this argument determines
	the height of the fluid search box as a percentage of the minimum
	solid edge length.
	Default: 100%

	@proj_dist float: (optional)In case solver is "press_equilibrium", this argument determines
	the approximate projection distance of a structural node to the
	fluid elements as a percentage between minimum, average and maximum
	potential distance values calculated with the search boxes algorithm
	in first step.
	Default: 50%

	@returns boolean: Returns True on success, or False on failure.

	"""

def MeanFieldHomogenizationCondCal(filename, kxx_target, kyy_target, kzz_target, enable_aspect_ratio, enable_max_weight, enable_max_cost, enable_max_spec_heat):

	"""

	Performs microstructure calibration with respect to the inclusions volume fraction and/or aspect ratio to achieve target thermal conductivity properties


	@filename string: The filename of the xml with the microstructure data

	@kxx_target float: The target thermal conductivity at x-direction

	@kyy_target float: The target thermal conductivity at y-direction

	@kzz_target float: The target thermal conductivity at z-direction

	@enable_aspect_ratio boolean: (optional)Use aspect ratio as design variables

	@enable_max_weight boolean: (optional)Use maximum weight as constraint of the optimization

	@enable_max_cost boolean: (optional)Use maximum cost as constraint of the optimization

	@enable_max_spec_heat boolean: (optional)Use maximum specific heat as constraint of the optimization

	@returns object: Returns an object with the optimization results(List with volume fractions, 
	list with aspect ratios, optimization status, error between achieved and target properties)
	-ret.OptVf
	-ret.OptAR
	-ret.OptStatus
	-ret.OptError

	"""

def ConvertRBE3RefGridToIndependent(entities, ignore_dp_check):

	"""
	Deprecated since version 20.1.0.

	Converts reference grids of an RBE3 entity or a list of RBE3 entities to independent by selecting
	specific grids and their components and setting the UM fields of RBE3 card.


	@entities object: An object or a list of objects of ANSA RBE3 entities whose 
	reference grids are to be converted to independent.

	@ignore_dp_check boolean: (optional)Defines whether the selection process of the RBE3 UM values
	includes all components of grids or only the independent ones.
	(Default: False).

	@returns object: Returns a dictionary containing the keys 'converted' and 'not converted'. Each of these keys has as
	value a list with objects of RBE3 entities which converted successfully or not respectively.

	"""

	import warnings; warnings.warn("Deprecated since version 20.1.0.", DeprecationWarning)

def Extrude2DTo3D(num_layers, element_length, delete_bcs):

	"""

	The Extrude2DTo3D function will extrude rows of volume elements from a planar shell mesh and automatically create shell PIDs that correspond to the 2D boundary conditions.


	@num_layers integer: Number of layers to be generated.

	@element_length float: The height of the elements in every layer.

	@delete_bcs boolean: (optional)Flag that indicates if the initial 2D boundary conditions 
	will be deleted. (Default: True)

	@returns integer: Returns 0 on success, non zero on error, where:
	
	0: Sucess
	1: Failure: The mesh can not be extruded if solid elements exist!
	2: Failure: No shell elements found!
	3: Failure: Mesh nodes are not co-planar!
	4: Failure: The mesh can not be extruded if polygons exist!

	"""

def RemoveMaterialDatabase(deck, path):

	"""

	Remove paths from ANSA.defaults Material Database


	@deck object: The  deck to remove paths from. Use 'all' if the removal should implemented in all decks.

	@path string: The path that will be removed from the deck (or all decks if 'all' is used in deck). 'all' to remove all paths in selected deck (or all decks)

	@returns integer: Always return 0.

	"""

def InputSU2(filename, nodes_id, elements_id, properties_id, model_action, unit_system, cfd_light_mode):

	"""

	The InputSU2 function imports an SU2 model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off".
	If it is set to "on", ANSA will use the light volume representation,
	which is more suitable for CFD meshes.
	(Default: "off")

	@returns integer: Returns 1 on success and 0 on failure

	"""

def OutputSU2(filename, mode, unit_system, scale):

	"""

	The OutputSU2 function outputs an SU2 format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the output 
	will be scaled from the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: "1.0")

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def DeleteViolatingVolumeElements(zones_number):

	"""

	Calculates the off volume elements of the database according to the active quality criteria and deletes them.
	In addition, it automatically creates shell mesh to cover the remaining free facets.
	


	@zones_number integer: (optional)Number of neighboring zones around violating elements.
	(Default: zones_number=0)

	@returns object: Returns a list containing the created shell properties.

	"""

def FreezeElements(deck, entity, selection):

	"""

	Freezes elements


	@deck integer: The deck constant.

	@entity string: A string that describes the type of the entity.
	"0" if a list of entities of different types has been selected.

	@selection object: -"all" if user selects to freeze all elements of defined entity type
	-"visible" if user selects to freeze only visible elements of defined entity type
	- a list of all the elements to be frozen

	@returns boolean: Always returns True.

	"""

def UnFreezeElements(deck, entity, selection):

	"""

	Unfreezes elements


	@deck integer: The deck constant.

	@entity string: A string that describes the type of the entity.
	"0" if a list of entities of different types has been selected.

	@selection object: -"all" if user selects to unfreeze all elements of defined entity type
	-"visible" if user selects to unfreeze only visible elements of defined entity type
	- a list of all the elements to be unfrozen

	@returns boolean: Always returns True.

	"""

def ConvertIncludeToModule(include):

	"""

	Converts an Include entity to a MODULE. 


	@include object: The include entity to be converted.

	@returns boolean: If the function returns True, the given INCLUDE was either already a MODULE or was
	converted successfully to one. If the function returns False, an error was 
	encountered.

	"""

def CurvesCreateFillet(curve1, curve2, input_value):

	"""

	This script function creates a tangential circle arc curve, between two
	input curve segments or CONS, by defining willing radius.


	@curve1 object: A curve, the first Curve or CONS that the arc trace will pass through.

	@curve2 object: A curve, the second Curve or CONS that the arc trace will pass through.

	@input_value float: The radius of the created arc trace.

	@returns object: Returns a list containing the resulted circle arc curve and the input curve segments in case of success, otherwise None.

	"""

def CompressUserDefinedAttributes():

	"""

	This function performs the compression of user attributes according to the compression rules that are currently defined as ANSA.defaults parameters.


	@returns integer: Returns the number of deleted attributes.

	"""

def GroupAdjacentCurveChains(curves, angle, clear, produce_middle_curves,connect_middle_curves, produce_cross_curves):

	"""

	This script function identifies closed group curve chains, taking into consideration angle threshold. The resulted curve chain pairs may be used to define 3D-curves along its middle distance.


	@curves object: (optional)This is a list with 3d-Curves, Connection lines, Cross Section Curves.
	Also accepts a string with value 'visible' or a string with value 'all' . 
	If it is called with 'visible', it works with all the visible entities concerning the 
	above types . If it is called with 'all', it works with all the entities.
	If nothing is passed it works with the visible.

	@angle float: (optional)The angle threshold defining consecutive 3d-curve segments. Above this value
	algorithm defines a chain so that may be used fo middle curve creation.
	If nothing passed, default value is 45. degrees.

	@clear boolean: (optional)If True can be used to delete identical curves in order to be left with unique ones.
	Default value is True If nothing passed .

	@produce_middle_curves boolean: (optional)If True creates curve chain along identified middle pair chains.
	If nothing is passed default value is True.

	@connect_middle_curves object: (optional)A list with two float variables defining nodes matching distance in the first place 
	and angle in the second respectively. If list is given, then script function will 
	merge the created curves, according to the input values, else curves per 
	segment will be created.

	@produce_cross_curves boolean: (optional)If True automatically identifies curves may belong to Cross Section and creates cross section entities with the respective cross curve chain pairs.
	If nothing passed default value is False.

	@returns object: If produce_middle_curves named argument equals to True, returns a list of tuples, containing average thick value distance in the first place and a list with the created middle curves, else if produce_middle_curves equals to False returns a list of tuples, containing average thick value distance in the first place and a list with two lists containing the pair curve chains.
	If produce_cross_curves named argument equals to True, returns a dictionary, which len equals to the number of identified Cross Sections. Key equals to the created Cross Section, while value contains a list with tuples, where each tuple contains average thick value distance in the first place and a list containing identified curve chain pair, with lists, which len varying from 1 to 3, containing identified chains. First list equals to first chain, second list to second chain and if produce_middle_curves is True third list equals with the created middle curves. 
	Returns None if nothing can be identified.

	"""

def CreateUserDefinedAction(entity_type, name, script, function, restriction_function, icon, overloads):

	"""

	This function creates a user action in Model Browser for a specific Model Browser Container.


	@entity_type string: The ANSA keyword of the entities the user action affects.
	Currently only Model Browser container entities are supported.

	@name string: The user action name.

	@script string: The path to the python script the user action will execute.

	@function string: The function name in the python script the user action will execute.

	@restriction_function string: (optional)The script function that will run to determine if the action should be available for an ANSA entity.

	@icon string: (optional)The icon to use for the user action.

	@overloads string: (optional)The hard coded action that this user action overloads, e.g., 'Save in DM'.

	@returns boolean: Returns 'True' on success, 'False' on failure.

	"""

def CrossSectionInfo(cross_section, filename, text_format):

	"""

	This function saves a cross-sections info report in a file.


	@cross_section object: Accepted values: A cross section, or a list of cross section entities, "all", "visible", 0.
	If set to 0 or "all", runs for all cross sections of the database.
	If set to "visible," runs for visible cross sections.

	@filename string: The path and the filename to be saved.

	@text_format string: Accepted values: 'HTML', 'TEXT', 'CSV' or 'PDF'.

	@returns integer: Returns 0 on success, or 1 on failure.

	"""

def LaminateConvertToSandwich(deck, property, core_layers, core_rows_num, paste_shells, merge_method, merge_t_tol, merge_theta_tol, ret_node_pairs, ret_node_bricks, ret_facet_pairs):

	"""

	This function changes laminate properties to sandwich structures.
	The result is a shell laminate at the bottom, a solid laminate in the middle (solid core)
	and a shell laminate at the top.


	@deck integer: NASTRAN, LSDYNA, PAMCRASH, ABAQUS, RADIOSS, ANSYS, PERMAS or OPTISTRUCT

	@property object: A laminate property or a list of laminate properties.

	@core_layers object: A layer or a list of layers which will be the solid core of the sandwich structure.
	A layer is a tuple (property, sequence_pos, layer_pos).

	@core_rows_num integer: (optional)An integer which is the number of rows per core layer that will be created,
	or a dictionary with key a tuple (property, sequence_pos, layer_pos),
	and value an integer which is the number of rows per core layer that will be created.
	(Default: 1)

	@paste_shells boolean: (optional)A boolean value which if set to True all the shells will be pasted on the solid core.

	@merge_method string: (optional)Method by which the layers of different properties will be merged.
	One of "by_tolerances", "by_gplyid", "by_layer_name".
	Required only for multiple properties.

	@merge_t_tol float: (optional)Thickness tolerance by which the layers of different properties
	will be merged. Required for merge_method = "by_tolerances".

	@merge_theta_tol float: (optional)Theta tolerance by which the layers of different properties
	will be merged. Required for merge_method = "by_tolerances".

	@ret_node_pairs boolean: (optional)If set to True, interface.node_pairs is a list of tuples with 2 nodes.
	If set to False, interface.node_pairs is None.
	(Default: False)

	@ret_node_bricks boolean: (optional)If set to True, interface.node_bricks is a list of tuples with 6 or 8 nodes.
	If set to False, interface.node_bricks is None.
	(Default: False)

	@ret_facet_pairs boolean: (optional)If set to True, interface.facet_pairs is a list of tuples with 2 facets or shells.
	If set to False, interface.facet_pairs is None.
	(Default: False)

	@returns object: Returns None on failure.
	
	An object on success with the following members:
	layers_data: A list of layer_data objects with data about the initial and final layer.
	bottom_interface: An object with data about the interface between the bottom shell laminate and the solid laminate.
	top_interface: An object with data about the interface between the top shell laminate and the solid laminate.
	
	The object layer_data has the following members:
	laminate: the final laminate property
	sequence_pos: the final sequence index
	layer_pos: the final layer index
	init_laminate: the initial laminate property
	init_sequence_pos: the initial sequence index
	init_layer_pos: the initial layer index
	
	The objects bottom_interface and top_interface have the following members:
	node_pairs: A list of tuples with 2 nodes (bottom and top). These may be used to create beams.
	node_bricks: A list of tuples with 6 or 8 nodes (penta or hexa). These may be used to create cohesives.
	facet_pairs: A list of tuples with 2 facets or shells (bottom and top). These may be used to create contacts.

	"""

def GetConfigurationsFromParts(parts):

	"""

	Get all configurations that a part("ANSAPART") belongs to.


	@parts object: A list of "ANSAPART"

	@returns object: Returns a dictionary with part to a list of Configurations that part belongs to.

	"""

def CreateModule(deck, solver_id, is_global):

	"""

	Creates a new MODULE entity. 


	@deck constant: A deck constant. Accepted values are ansa.constants.NASTRAN and ansa.constants.PAMCRASH.

	@solver_id integer: (optional)The MODULE's solver id.

	@is_global boolean: (optional)Defines whether the created MODULE will be a GLOBAL MODULE. Valid only if deck is ansa.constants.PAMCRASH.

	@returns object: The created MODULE.

	"""

def AddToModule(module, entities):

	"""

	Adds a collection of entities to a MODULE.


	@module object: The MODULE where the collection of entities will be added.

	@entities object: The collection of entities to add to the MODULE.

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise.

	"""

def BoundaryPrescribedFinalGeometryFill(deck, boundary, nodes):

	"""

	Fills a BOUNDARY_PRESCRIBED_FINAL_GEOMETRY entity with nodes of the final geometry.


	@deck integer: LSDYNA

	@boundary object: The BOUNDARY_PRESCRIBED_FINAL_GEOMETRY entity that will be filled with nodes.

	@nodes object: A list with the nodes.

	@returns: It returns 0 if the boundary is filled, 1 otherwise.

	"""

def SetPartVersion(parts, version, apply_to_all_instances):

	"""

	This function sets the version value to an ANSAPART or a list of ANSAPARTs.
	For the case of multi-instanciated parts, if the option 'apply_to_all_instances' 
	is False, the new version will be applied only to the input parts and not to 
	their instances. This way, multi-version instances can be created.
	


	@parts object: A single part or a list of parts.

	@version string: The version value.

	@apply_to_all_instances boolean: (optional)For the case of multi-instanciated parts, this flag determines whether the 
	new version value will be applied to all part instances with the same version or not. 
	Default value: True

	@returns boolean: Returns always True.

	"""

def OpenEntityCard(deck, entity):

	"""

	Opens the GUI card of the given entity


	@deck integer: The entity's deck

	@entity object: The entity for which to open the card

	"""

def SaveTranslatorsSettings(filepath):

	"""

	Writes a defaults file of the translators settings at filepath. If filepath is not
	given, the defaults file will be written in .BETA directory according to which 
	layout ANSA was launched (e.g. translators.defaults, CFD_translators.defaults).
	If the file already exists, it will be overwritten.
	This function is not supported under VR mode.


	@filepath string: (optional)The full path of the defaults file to be saved.

	@returns boolean: 1 if save was succesfull, 0 otherwise.

	"""

def ModifyInitialEntitiesDefinition(deck, entity, fields):

	"""

	The ModifyInitialEntitiesDefinition function modifies definition fields of Initial Stress and Initial Strain entities.
	Such fields are the following:
	deck: LS_DYNA:
	        entity type: INITIAL_STRESS_SHELL:
	                fields: "NTHICK", "NHISV", "NTENSR"
	        entity type: INITIAL_STRESS_TSHELL:
	                fields: "NTHICK", "NHISV"
	        entity type: INITIAL_STRESS_BEAM:
	                fields: "NPTS", "NHISV"
	        entity type: INITIAL_STRESS_SOLID:
	                fields: "NHISV"
	        entity type: INITIAL_STRAIN_SHELL:
	                fields: "NTHICK"
	deck: RADIOSS:
	        entity type: INITIAL_EPSP_F_SHELL:
	                fields: "NTHICK"
	        entity type: INITIAL_STRAIN_SHELL:
	                fields: "NTHICK"
	        entity type: INITIAL_STRESS_SHELL:
	                fields: "NTHICK", "NVARS"
	        
	
	
	
	


	@deck integer: The deck

	@entity object: The "Initial Stress" or "Initial Strain" entity of which the fields will be modified

	@fields object: Can be a list, tuple or dictionary.
	In case of dictionary, it must contain pairs of 'field name' - 'value'.
	In case of list or tuple, it must contain consecutive entry pairs of 'field name' - 'value'.
	
	As 'field name', there can be any of the fields specified above, depending on the type of the "Initial" entity and the deck.

	@returns integer: Returns the number of the given fields that were not modified.

	"""

def Extreme():

	"""

	Leaves visible only the elements that violate the quality criteria that are set in the Quality Criteria - Presentation Parameters window.


	@returns integer: The function always returns 0.

	"""

def ConvertEpilysisH5ToVMAP(h5_filename, filename):

	"""

	Converts epilysis hdf5 results to VMAP file with specified filename


	@h5_filename string: The filename with Epilysis results in h5 format

	@filename string: The filename of the VMAP file to be created

	"""

def SaveMaterialDatabase(deck, path, output_format):

	"""

	Save Material Database to a file for the specified deck.


	@deck integer: The deck for which you want to save the material database.

	@path string: The name of the output file.

	@output_format string: (optional)The output format for the deck specified. Accepts the exact values of the graphic equivalent output format during save of the material database if it exists.

	@returns integer: Always returns 0.

	"""

def RemoveFromBCSet(bcset, entities):

	"""

	Removes an entity or a list containing entities, from a BCSet


	@bcset object: A reference to a bcset

	@entities object: A reference or a list of references of ansa entities

	@returns integer: Returns 0 if invalid arguments were specified, 1 otherwise

	"""

def MaterialCalibrationSet(fields, deck):

	"""

	Sets the values for the material calibration, as a dictionary with key the labels as shown in 
	Material calibration window.


	@fields object: A dictionary with keys the labels of the fields as shown in material calibration window

	@deck integer: The deck where the calibration will be performed

	@returns integer: Always returns zero

	"""

def MaterialCalibrationSet():

	"""

	Calibrates the material parameters according to given experimental curve


	@returns float: Returns the error between the experimental curve and the calibrated material

	"""

def MaterialCalibrationMakeMaterial(deck):

	"""

	Generates the material entity for the specified deck according to the calibrated values


	@deck integer: The deck to generate the material

	@returns object: The generated material entity

	"""

def AbqStepGetOutputRequestIdentifyingKeys(output_request):

	"""

	Returns a list of the identifying keys of the requested Output Request.


	@output_request object: A reference to the output request.

	@returns object: It returns a list containing all the identifying keys of the selected output request.

	"""

def RenumberMBContainers(mbcontainers):

	"""

	This function applies the numbering rules of the model browser containers that are given as input.


	@mbcontainers object: A list containing the Model Browser Containers whose numbering rules will be applied.

	@returns boolean: Returns "True" if all entities of the Model Browser Container are correctly renumbered. Returns "False" if some entities do not belong to the numbering rule's range.

	"""

def AutoCreateAlignEntities(shells, faces, distance_limit, distance_limit_as_percentage, thickness_limit, thickness_limit_as_percentage):

	"""

	Creates align entities on shells using the input faces.
	It needs a list of (argument name, argument value) pairs.


	@shells object: Shells where the align entities are created

	@faces object: Faces used to create align entities

	@distance_limit float: (optional)The distance tolerance for nodes to be valid in an align entity. Default value is 5%.

	@distance_limit_as_percentage boolean: (optional)If set to true the distance limit is used a percentage of thickness. Default value is True.

	@thickness_limit float: (optional)A thickness tolerance for nodes to be valid in an align entity. Default value is 10%.

	@thickness_limit_as_percentage boolean: (optional)If set to True the thickness limit is used as a percentage. Default value is True.

	@returns: Returns nothing.

	"""

def AirbagXrefFill(airbag, nodes):

	"""

	Fills an AIRBAG_XREF entity with XREF_NODES.
	In case that there are XREF_NODES that applied on the same node, call MarkDuplicateXref


	@airbag object: The AIRBAG_XREF entity that will be filled with nodes

	@nodes object: A list with nodes

	"""

def InputMarc(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, merge_parts, header, comment_input_general_comments, comment_input_name_comment, comment_input_connection, comment_input_parts_groups, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, coords_id, comment_input_attributes, perform_material_synchronization, comment_input_ids, comment_input_laminates,comment_input_fe_perimeters, paste_nodes_by_id, new_include, read_only, comment_input_inline_include):

	"""

	The InputMarc function imports a Marc model file in ANSA.


	@filename: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset","nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset","nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off".
	(Default: "off")

	@tolerance_paste_nodes_by_name string: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: "0.0")

	@merge_parts string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "skip", "merge", "new"
	(Default: "merge")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off".
	(Default: "on")

	@perform_material_synchronization string: (optional)"on" or "off". If left blank, the current ANSA defaults value is assumed.

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is enabled, it returns a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def OutputMarc(filename, mode, write_comments, output_element_thickness, output_numbering_rules, output_parts_in_xml, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_colors, comment_output_general_comments, comment_output_info, comment_output_misc, comment_output_lock_views, model_check, comment_output_annotations, comment_output_attributes, comment_output_ids, comment_output_laminates, comment_output_fe_perimeters, advanced_options, comment_output_inline_include, include_output_mode, output_only_main_file, disregard_includes, update_include_fname, output_all_same_directory, use_relative_name_for_readonly_includes, create_include_output_directory):

	"""

	This function outputs a Marc format file like the FILE>OUTPUT>MARC functionality.


	@filename string: (optional)The name of the output file.

	@mode string: (optional)"all", "model", "visible" or "custom_mbcontainer".
	mode="custom_mbcontainer" can be used only 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "as_v_11_2_4", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@output_element_thickness string: (optional)"off", "at_element_card", "as distribution" or "at_property_card".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_misc string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@model_check string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_fe_perimeters string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: One of dw, wo, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElement, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, UContacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "on")

	@disregard_includes string: (optional)"on" or "off".
	(Default: "on")

	@update_include_fname string: (optional)"on" or "off".
	(Default: "on")

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "on")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: "on")

	@create_include_output_directory string: (optional)"on" or "off".
	(Default: "on")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def FlangesCompatibleIdentify(faces, distance, angle_tolerance, minimum_overlap, allow_same_property):

	"""

	Function FlangesCompatibleIdentify() given a number of input faces it identitfies pairs of face areas that are flanges.


	@faces object: (optional)A list with ANSA FACE entities (suppliance of this
	argument is optional, default = visible faces).

	@distance float: (optional)Maximum search distance (suppliance
	of this argument is optional, default value = 1.0).

	@angle_tolerance float: (optional)Maximum angle between angles (suppliance
	of this argument is optional, default value = 10.0).

	@minimum_overlap float: (optional)Minimum overlap (%) between faces in flange (suppliance
	of this argument is optional, minimum_overlap = 5.0).

	@allow_same_property boolean: (optional)A boolean (i.e., 'True' or 'False') which 
	signifies whether search should take into account faces of the property ID (suppliance of this argument is optional,
	default value = 'False').

	@returns object: A dictionary where in each element the key represents the flange's ID and the value consists of two lists that represent the two face areas of the flange.

	"""

def InputVMAP(filename, model_action):

	"""

	The InputVMAP function imports a VMAP model file in ANSA.


	@filename string: The path to the filename to import.

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns object: Returns 1 on success and 0 on failure.

	"""

def OutputVMAP(filename, mode):

	"""

	This function outputs a VMAP format file like the FILE>OUTPUT>VMAP functionality.


	@filename string: The name of the output file.

	@mode string: (optional)"all", "model", "visible"

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def InjectionMoldingApply(injection_moldings):

	"""

	Runs the analysis of the specified injection molding entity or entities.


	@injection_moldings object: A reference or a list of references to injection molding entities.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def SavePreviewImage(entity, filename, width, height):

	"""

	Saves the preview image of a MB Container or a Feature Entity as a png image.


	@entity object: The entity to save the preview image.

	@filename string: The file path of the created png image.

	@width integer: (optional)The width of the created image.

	@height integer: (optional)The height of the created image.

	@returns boolean: Returns True if the image is saved successfully, False otherwise.

	"""

def InjectionMoldingGetResults(injection_molding, fields, use_inn):

	"""

	Get the results of an already applied injection molding entity.


	@injection_molding object: A reference to an injection molding entity.

	@fields object: A list of the fields to retrieve results.
	
	Available fields are:
	
	orientation_tensor (dictionary): A dictionary with the shells as keys and the respective orientation tensors as values.
	weld_line_nodes (list): A list of the nodes which form the weld lines.
	weld_line_nodes_and_meeting_angle (dictionary): A dictionary with the nodes which form the weld lines as keys and the respective flow front meeting angle as values.
	fill_time (dictionary): A dictionary with the nodes of the model as keys and the respective molding fill time as values.

	@use_inn boolean: (optional)If set to True, Invariant Node Numbering will be used to compute the shells' orientation tensor. (Default: False)

	@returns object: On success, returns a dictionary with the 'fields' values as keys.
	Otherwise, None is returned.

	"""

def SplitMultiBodyPart(part, check_in_dm, dm_path):

	"""

	Converts a part marked as 'Is Multi Body' into a group with children single body parts


	@part object: The part to split.

	@check_in_dm boolean: (optional)If true, check in DM for carry over single body parts and reload the latest found version if the geometric similarity is over 95%. Default value: False.

	@dm_path string: (optional)The DM path to search for carry over single body parts. If not defined, search in the current DM.

	@returns boolean: Returns True on success, False on failure.

	"""

def AbqStepInsertModelChangeParam(step, param, add, type, element, contact):

	"""

	Inserts a new parameter into a STEP's *MODEL CHANGE History Data.


	@step object: A reference to a STEP that can be acquired by a previous call to GetEntity.

	@param string: (optional)"ACTIVATE", "ADD" or "REMOVE". (Default: "ACTIVATE")

	@add string: (optional)"", "STRAIN FREE" or "WITH STRAIN". (Default: "")

	@type string: (optional)"ELEMENT" or "CONTACT". (Default: "ELEMENT")

	@element object: (optional)A list containing the sets of elements to be added to the model change.
	Required if param is not "ACTIVATE" and type is "ELEMENT".

	@contact object: (optional)A list containing the contact pairs to be added to the model change.
	Required if param is not "ACTIVATE" and type is "CONTACT".

	@returns object: Returns a reference to the created model change parameter on success and None on failure.

	"""

def AbqStepDeleteModelChangeParam(step, model_change_parameter):

	"""

	Deletes a parameter from a STEP's *MODEL CHANGE History Data.


	@step object: A reference to a STEP that can be acquired by a previous call to GetEntity.

	@model_change_parameter object: Either a reference to a model change parameter, acquired by a previous
	call to AbqStepInsertModelChangeParam, or the index of the parameter
	in the *MODEL CHANGE parameter list.

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def AbqStepUpdateModelChangeParam(step, model_change_parameter, param, add, type, element, contact):

	"""

	Updates a parameter of a STEP's *MODEL CHANGE History Data.


	@step object: A reference to a STEP that can be acquired by a previous call to GetEntity.

	@model_change_parameter object: Either a reference to a model change parameter, acquired by a previous
	call to AbqStepInsertModelChangeParam, or the index of the parameter
	in the *MODEL CHANGE parameter list.

	@param string: (optional)"ACTIVATE", "ADD" or "REMOVE". (Default: "ACTIVATE")

	@add string: (optional)"", "STRAIN FREE" or "WITH STRAIN". (Default: "")

	@type string: (optional)"ELEMENT" or "CONTACT". (Default: "ELEMENT")

	@element object: (optional)A list containing the sets of elements to be added to the model change.
	Required if param is not "ACTIVATE" and type is "ELEMENT".

	@contact object: (optional)A list containing the contact pairs to be added to the model change.
	Required if param is not "ACTIVATE" and type is "CONTACT".

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def QGraphDrawModeResults(method, method_argument):

	"""

	This function returns the non zero results of a user selected QGraph draw mode. The user selects the QGraph method and provides the method arguments ( if any ) and the non-zero results are returned in a dictionary with the element as the key and the result as the value. Please notice that this function applies on visible elements.


	@method string: The QCheck to be executed as displayed in the QGRAPH pulldown in GUI mode.

	@method_argument float: Any additional argument required by the QCheck. For the moment, only 'Curvature Radius' QCheck requires such an argument.

	@returns: This function returns NULL in case an invalid QCheck was selected, otherwise a dictionary is returned.

	"""

def MergeMultiBodyPart(group):

	"""

	Converts a group marked as 'Is Multi Body' that has been created from SplitMultiBodyPart back into a part.


	@group object: The group to merge.

	@returns boolean: Returns True on success, False on failure.

	"""

def ShowLogAnalytics(log_type):

	"""

	This function opens the last input/merge analytics window


	@log_type string: (optional)if value "merge_analytics" is provided the merge 
	analytics window will be shown instead of input analytics

	@returns: Always returns 0

	"""

def MidSurfExtrusion( min_thick, max_thick, length, elem_type, join_distance, paste_triple_len, collapse_ribs_height, faces, ret_ents,  connect_weldings, thickness_ratio, sharpen_fillets_min_radius, intersection_angle, constant_profile_ratio, thickness_step ):

	"""

	Creates mesh at the middle surface of extruded parts.


	@min_thick float: (optional)The minimum thickness of the extruded profile(s), must be > 0.
	Default value: 1

	@max_thick float: (optional)The maximum thickness of the extruded profile(s), must be >= minimum thickness.
	Default value: 5

	@length float: (optional)The target element length, must be >= minimum thickness.
	Default value: 4

	@elem_type string: (optional)The element type to be created. Accepted values: "Mixed", "Quad", "Tria", "Ortho Tria".
	Default value: "Mixed"

	@join_distance float: (optional)The minimum distance under which two double perimeters are collapsed.
	Default value: 0.5*length

	@paste_triple_len float: (optional)The minimum distance under which two triple perimeters are collapsed.
	Default value: 0.5*length

	@collapse_ribs_height float: (optional)The minimum distance under which a rib is collapsed.
	Default value: 0.5*length

	@faces object: (optional)A list of faces that comprise the solid description geometry. 
	If it is not specified then the visible faces are used instead.

	@ret_ents boolean: (optional)If set to True, a list with the created entities will be returned.
	Default value: False

	@connect_weldings boolean: (optional)If set to True, weldings are automatically connected after mesh generation.
	Default value: False

	@thickness_ratio float: (optional)The distance under which the created meshes are connected, expressed as a ratio of the local thickness.
	Default value: 1.1

	@sharpen_fillets_min_radius float: (optional)The radius under which a fillet is sharpened.
	Default value: 0(off)

	@intersection_angle float: (optional)Modifies the intersection angle limit. Accepted values: [5,45] degrees.
	Default value: 20

	@constant_profile_ratio float: (optional)The threshold value of the allowed deviation of the profile along the extrusion direction.
	If the calculated ratio is less than this value no result will be produced.
	A purely extruded part will have ratio = 1.
	A part that has been deformed (pressed, stamped or bent) after the extrusion will have ratio < 1.
	Holes and cut outs do not affect the ratio.
	The calculated ratio of the result is reported in the Part Comments section.
	Default value: 0 (the check is disabled)

	@thickness_step float: (optional)The discretization step of nodal to PID thickness conversion.
	Default value: 0(off)

	@returns object: Returns 0 on success or 1 on failure.
	If ret_ents is True it returns a list with the created entities.

	"""

def OrientAxisymmetricElements(elements, prototype_element):

	"""

	This function will change the node ordering of the given elements to comply with the prototype element. 


	@elements object: A list of axisymmetric elements. These elements will be oriented 
	by the function and should be either ELSURFACE AXISYMMETRIC or 
	MEMBRANE AXISYMMETRIC type

	@prototype_element object: An element to use as prototype. It must belong to the given elements list.

	@returns object: Returns a list containing references to the elements that were unable to be oriented according to the given prototype element.
	If no elements have failed, it returns 0.

	"""

def SetPickAreaAngle(angle):

	"""

	Sets the area angle for the base.constants.AREA_ANGLE_SELECTION PickMethod


	@angle integer: The new area angle in degrees

	"""

def SetPickLineAngle(angle):

	"""

	Sets the area angle for the base.constants.LINE_ANGLE_SELECTION PickMethod


	@angle integer: The new line angle in degrees

	"""

def MarkDuplicateXref():

	"""

	Checks all XREF_NODE entities of the model and marks the ones that are applied on the same node, so as not to lose their initial position


	"""

def InputUGRID(filename, nodes_id, elements_id, properties_id, model_action, file_format, endianness, precision, unit_system, cfd_light_mode):

	"""

	The InputUGRID function imports a UGRID model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@file_format string: (optional)Accepted values: "ascii" or "c-binary".
	(Default: "c-binary")

	@endianness string: (optional)Accepted values: "big-endian" or "little-endian".
	(Default: "big-endian")

	@precision string: (optional)Accepted values: "float" or "double".
	(Default: "double")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit from which the input 
	will be scaled to the existing ANSA length unit setting. 
	If left blank, no scaling occurs.

	@cfd_light_mode string: (optional)Accepted values: "on" or "off".
	If it is set to "on", ANSA will use the light volume representation,
	which is more suitable for CFD meshes.
	(Default: "off")

	@returns integer: Returns 1 on success and 0 on failure

	"""

def OutputUGRID(filename, mode, file_format, endianness, precision, unit_system, scale):

	"""

	This function outputs a UGRID format file.


	@filename string: The name of the output file; must include the full path.

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@file_format string: (optional)Accepted values: "ascii" or "c-binary".
	(Default: "c-binary")

	@endianness string: (optional)Accepted values: "big-endian" or "little-endian".
	(Default: "big-endian")

	@precision string: (optional)Accepted values: "float" or "double".
	(Default: "double")

	@unit_system object: (optional)A UnitSystem object.
	Dictates the length unit to which the
	output will be scaled from the existing
	ANSA length unit setting. 
	If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments
	are defined, the latter will override the first.

	@returns integer: Returns 1 on success and 0 on failure.

	"""

def GetSolidsFromBeamSection(beams, deck, element_length):

	"""

	This function creates solid elements in the form of specific beam cross sections.


	@beams object: An object or a list of beam objects, "all", "visible", 0.
	If set to 0 or "all", runs for all compatible elements of the database.
	If set to "visible," runs for all compatible elements which are visible.

	@deck integer: (optional)Deck in which function is run.

	@element_length float: (optional)Element length. In case this length is greater than maximum element length, that is estimated from the function, maximum element length is used.

	@returns: Returns a list that contains all created solids or an empty list if no solids could be created.

	"""

def InputImpetus(filename, nodes_id, elements_id, properties_id, materials_id, sets_id, read_comments, merge_sets_by_name, paste_nodes_by_name, tolerance_paste_nodes_by_name, new_include, merge_parts, header, read_only, create_parameters, comment_input_general_comments, comment_input_name_comment, comment_input_inline_include, comment_input_connection, comment_input_parts_groups, comment_input_gebs, comment_input_kinetics, comment_input_cross_sections, comment_input_results_map, comment_input_colors, comment_input_numb_rules, comment_input_misc, comment_input_lock_views, model_action, comment_input_annotations, coords_id, comment_input_attributes, perform_material_synchronization, comment_input_alc_points, comment_input_alc_points_mode, comment_input_ids, comment_input_laminates, comment_input_connections_user_defined_geometry, comment_input_fe_perimeters, comment_input_features, comment_input_mbcontainers, paste_nodes_by_id, eos_id, functions_id):

	"""

	The InputImpetus function imports an Impetus command file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" 
	or "offset-freeid".
	(Default: "offset-freeid")

	@properties_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@materials_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@sets_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@read_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_sets_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@paste_nodes_by_name string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@tolerance_paste_nodes_by_name float: (optional)Used by paste_nodes_by_name and paste_nodes_by_id
	(Default: 0.0)

	@new_include string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@merge_parts string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@header string: (optional)Accepted values: "overwrite", "merge" or "skip"
	(Default: "overwrite")

	@read_only string: (optional)Accepted values: "wp", "all" or "none".
	(Default: "wp")

	@create_parameters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_input_general_comments string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_name_comment string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_inline_include string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connection string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_parts_groups string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_gebs string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_kinetics string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_cross_sections string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_results_map string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_colors string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_numb_rules string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_misc string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_lock_views string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	(Default: "merge_model")

	@comment_input_annotations string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@coords_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new".
	(Default: "offset")

	@comment_input_attributes string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@perform_material_synchronization string: (optional)Accepted values: "on" or "off". 
	If left blank, the current ANSA defaults value is assumed.

	@comment_input_alc_points string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_alc_points_mode string: (optional)Accepted values: "alc_points", "lc_points" ,"a_points"
	(Default: "alc_points")

	@comment_input_ids string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_laminates string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be input from ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_input_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_features string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@comment_input_mbcontainers string: (optional)Accepted values: "on" or "off". 
	(Default: "on")

	@paste_nodes_by_id string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@eos_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@functions_id string: (optional)Accepted values: "offset", "nooffset", "keep-old" or "keep-new" 
	(Default: "offset")

	@returns object: Returns 1 on success and 0 on failure. If the "new_include" argument is defined, 
	it returns a reference to a new INCLUDE containing all the newly imported entities or None on failure.

	"""

def OutputImpetus(filename, mode, write_comments, format, enddata, disregard_includes, apply_subcontainer_rules, lf_mode, output_numbering_rules, include_output_mode, output_only_main_file, output_parts_in_xml, update_include_fname, output_parameter_keywords, output_all_same_directory, use_relative_name_for_readonly_includes, comment_output_name_comment, comment_output_parts_groups, comment_output_connections, comment_output_gebs, comment_output_colors, comment_output_kinetics, comment_output_cross_sections, comment_output_results_map, comment_output_general_comments, comment_output_info, comment_output_field_labels, comment_output_inline_include, comment_output_lock_views, advanced_options, include, configuration, comment_output_annotations, comment_output_attributes, create_include_output_directory, comment_output_alc_points, enable_alc_aux_file, comment_output_alc_points_mode, comment_output_ids, comment_output_laminates, comment_output_connections_user_defined_geometry, comment_output_fe_perimeters, comment_output_features):

	"""

	This function outputs an Impetus format command file like the FILE>OUTPUT>IMPETUS functionality.


	@filename string: (optional)The name of the output file. Must reference the full path 
	to the file.

	@mode string: (optional)"all" , "model", "visible" or "custom_mbcontainer".
	The mode "custom_mbcontainer" can only be used 
	along with the mbcontainer argument.
	(Default: what set at the last execution)

	@write_comments string: (optional)"on", "above_key", "none", 
	"off" or "at_eof".
	(Default: what set at the last execution)

	@format string: (optional)"6.0"
	(Default: what set at the last execution)

	@enddata string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@disregard_includes string: (optional)"on" or "off".
	(Default: "off")

	@apply_subcontainer_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@lf_mode string: (optional)"system native", "unix" or "dos".
	(Default: what set at the last execution)

	@output_numbering_rules string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@include_output_mode string: (optional)"contents" or "references".
	(Default: what set at the last execution)

	@output_only_main_file string: (optional)"on" or "off".
	(Default: "off")

	@output_parts_in_xml string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@update_include_fname string: (optional)"on" or "off". Corresponds to the "Update Include 
	ReferenceFile" option of the Output Parameters 
	of the GUI function.
	(Default: "off")

	@output_parameter_keywords string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@output_all_same_directory string: (optional)"on" or "off".
	(Default: "off")

	@use_relative_name_for_readonly_includes string: (optional)"on" or "off".
	(Default: what set at the last execution)

	@comment_output_name_comment string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_parts_groups string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_gebs string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_colors string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_kinetics string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_cross_sections string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_results_map string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_general_comments string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_info string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_field_labels string: (optional)"on" or "off".
	(Default: "off")

	@comment_output_inline_include string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_lock_views string: (optional)"on" or "off".
	(Default: "off")

	@advanced_options string: (optional)One of w, dw, followed by Header, UHeader, Nodes, UNodes,
	Elements, UElements, Properties, UProperties,
	Materials, UMaterials, Sets, USets, Contacts, UContacts.
	Separate the needed keywords with blanks, e.g "dw Properties Materials".

	@include object: (optional)The reference to the include entity.
	Should not be used along with "configuration".

	@configuration object: (optional)The reference to the configuration entity.
	Should not be used along with "include" argument.
	Outputs either an inactive configuration when no other.

	@comment_output_annotations string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_attributes string: (optional)"on" or "off".
	(Default: "on")

	@create_include_output_directory string: (optional)"on" or "off". Create non-existent include output
	 directories.
	(Default: "off")

	@comment_output_alc_points string: (optional)"on" or "off".
	(Default: "on")

	@enable_alc_aux_file string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_alc_points_mode string: (optional)Sets whether a, lc or both types will be written
	"alc_points", "lc_points" or "a_points"
	(Default: "alc_points")

	@comment_output_ids string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_laminates string: (optional)"on" or "off".
	(Default: "on")

	@comment_output_connections_user_defined_geometry string: (optional)This argument controls whether the stored search area of GEBs with User Defined Area search and Connections with User Defined Geometry search will be output into ANSA comments. Accepted values: "on" or "off". (Default: "off")

	@comment_output_fe_perimeters string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@comment_output_features string: (optional)Accepted values: "on" or "off". 
	(Default: "off")

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def SaveViolatingVolumeElements(filename, representation, zones_number):

	"""

	Calculates the violating volume elements of the database according to the active quality criteria and saves them in a seperate database.
	
	


	@filename string: The name of the new file; must include the full path.

	@representation string: (optional)Option to save the violating volume elements or their COGs
	as points. Accepted values: "elements" or "3dpoints".
	(Default: entity_type="elements")

	@zones_number integer: (optional)Number of neighboring zones around violating elements.
	(Default: zones_number=0)

	@returns integer: Returns 0 if the file has been successfully saved and 1 otherwise.

	"""

def CopyAnsaModel(model):

	"""

	The function creates a duplicate of the ANSA model it gets passed as an
	argument.


	@model object: The ANSA model to duplicate

	@returns object: Returns the newly created ANSA model on success, None otherwise.

	"""

def SetMaterialMapping(source_deck, target_deck, mapping):

	"""

	This function allows the user to change the Mapping Material type.


	@source_deck integer: source deck

	@target_deck integer: target deck

	@mapping object: A dictionary containing {source deck material name: target deck material name} pairs.

	"""

def GetActiveConfigurations(subsystem):

	"""

	Get all active Configurations.


	@subsystem object: (optional)a Model Browser container of type ANSA_SUBSYSTEM.
	If Subsystem provided, the function returns the active 
	Configuration whose parts belong to this Subsystem.

	@returns object: Returns a list with active Configurations.

	"""

def GetModelContainerInstances(mbcontainer):

	"""

	Returns a list of all instances of a Model Browser Container


	@mbcontainer object: The Model Browser Container that will be used as source to
	fetch instances

	@returns object: A list of all instances of a Model Browser Container

	"""

def CopyEntitiesToAnsaModel(model, entities, copy_container_contents):

	"""

	Copies entities from the active Ansa model to another Ansa model.


	@model object: The Ansa model to copy entities to.

	@entities object: A python list containing the entities to be copied.

	@returns object: Returns a list of the newly created clones of the source entities. Each entity 
	clone has the same position within the returned list as its source entity had in
	the original "entities" list. If a source entity could not be copied to the 
	destination model, None will be present at the corresponding position of the
	returned list.

	"""

def OutputRavenCFD(filename, mode, file_format, unit_system, scale):

	"""

	The OutputRavenCFD function outputs a RavenCFD format file (.grd) and the corresponding bc file (.bc).


	@filename string: The name of the output file(s); must include the full path

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@file_format string: (optional)"formatted" or "unformatted" (fortran binary). 
	(Default: "unformatted")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the
	output will be scaled from the existing ANSA length unit 
	setting. If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: 1.0)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def CreateIsoperimeters(shells, thickness_step, base_value, cut_mesh, expand_level):

	"""

	This function will create FE perimeters according to the average shell's nodal 
	thickness and to the given thickness step.


	@shells object: A list containing the shells to be processed.

	@thickness_step float: The step that will be used to create thickness groups.

	@base_value float: (optional)The base value that will be used to create thickness groups.

	@cut_mesh boolean: (optional)Option for cutting mesh at thickness changes.

	@expand_level integer: (optional)The number of expand levels to improve the mesh around the edges where mesh will be cut.

	@returns integer: This function always returns 1

	"""

def InputMedHdf5(filename, nodes_id, elements_id, model_action):

	"""

	The InputMedHdf5 function imports a med-hdf5 model file in ANSA.


	@filename string: The path to the filename to import.

	@nodes_id string: Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@elements_id string: (optional)Accepted values: "offset", "nooffset", "keep-old", "keep-new" or 
	"offset-freeid".
	(Default: "offset-freeid")

	@model_action string: (optional)Accepted values: "overwrite_model", "merge_model", 
	"new_model_in_active_window", "new_model_in_new_window" or 
	"new_model_in_enabled_windows".
	 (Default: "merge_model")

	@returns: Returns 1 on success and 0 on failure.

	"""

def OutputMedHdf5(filename, mode):

	"""

	This function outputs a med-hdf5 format file.


	@filename string: The name of the output file. must reference the full path 
	to the file.

	@mode string: (optional)"all", "model", "visible"

	@returns: Returns 1 on success, 0 otherwise.

	"""

def GetFastenerMPCNodes(fastener):

	"""

	Abaqus' Fasteners create internal MPCs in order to attach to surfaces and connect them. This function returns the nodes of these MPCs. 


	@fastener object: The Fastener entity

	@returns object: The function returns a dictionary with the following properties:
	key   : a reference node of the fastener (there may be more than one, depending on the way the fastener is defined)
	value : a list of lists. The first list contains as many secondary lists as are surfaces in the fastener. Each secondary         list contains the MPC nodes corresponding to that surface.

	"""

def ImpactorApply(impactor):

	"""

	The function applies the transformation of an IMPACTOR entity.


	@impactor object: The IMPACTOR entity.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def ImpactorReset(impactor):

	"""

	The function resets the transformation of an IMPACTOR entity.


	@impactor object: The IMPACTOR entity.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def LoadBaseModulesBasedOnConnectivity(entities):

	"""

	if DM schema supports feature intermodular_connectivity_links
	the function will load:
	        - Interface Representations for some Regular Subsystems and Full Representations for some others, 
	          depending on the compatibility of connection information with the Subsystem geometry
	        - Full Representations for all Connecting Subsystems
	        - Actual Representation for Library Items of type Loadcase_Header and Target_Points


	@entities object: A list with model browser containers (modules)
	
	A model browser container can be:
	- ANSA_SUBSYSTEM
	- ANSA_LIBRARY_ITEM
	- ANSA_SIM_MODEL_ADAPTER
	- ANSA_LOADCASE_ADAPTER

	@returns object: return a dictionary with entities that failed to be loaded per representation type.
	
	The following are the keys of the dictionary
	- INVALID, entities not supported by function
	- FULL, failed entities to be loaded with full representation
	- INTERFACE, failed entities to be loaded with interface representation

	"""

def OutputCobaltCFD(filename, mode, file_format, unit_system, scale):

	"""

	The OutputCobaltCFD function outputs a CobaltCFD format file (.grd) and the corresponding bc file (.bc).


	@filename string: The name of the output file(s); must include the full path

	@mode string: (optional)"all" or "model" or "visible".
	(Default: "all")

	@file_format string: (optional)"formatted" or "unformatted" (fortran binary). 
	(Default: "unformatted")

	@unit_system object: (optional)A UnitSystem object. Dictates the length unit to which the
	output will be scaled from the existing ANSA length unit 
	setting. If left blank, no scaling occurs.

	@scale float: (optional)A float number for scaling the mesh (scale factor).
	If both scale and unit_system arguments are defined, 
	the later will override the first.
	(Default: 1.0)

	@returns integer: Returns 1 on success, 0 otherwise.

	"""

def InjectionMoldingApplyOrientation(injection_molding):

	"""

	Transfers the element orientations, calculated from the analysis, to the model.


	@injection_molding object: A reference to an injection molding entity.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def FacesModifyJoinFaces(cons):

	"""

	This function joins two faces.


	@cons object: The common cons of the faces that will be joined.

	"""

def GetDMIGMatrix(dmig):

	"""

	Creates an object containing DMIG entries in a sparse matrix array representation.


	@dmig object: A reference to a DMIG entity.

	@returns object: Returns an object containing the following:
	ret.row_nodes :(list)A list with tupple entries containing pairs of node-dof
	                for each row index.
	ret.col_nodes :(list)A list with tupple entries containing pairs of node-dof
	                for each column index.
	ret.r         :(list)A list with the integer indeces of rows, where non zero
	                values are located.
	ret.c         :(list)A list with the integer indeces of columns, where non zero
	                values are located.
	ret.d         :(list)A list with the non zero complex values located at
	                indeces (r,c)

	"""

def SetDMIGMatrix(dmig, dmig_matrix):

	"""

	Sets or changes values of a DMIG entity.


	@dmig object: A reference to a DMIG entity.

	@dmig_matrix object: An object containing the following:
	dmig_matrix.row_nodes :(list)A list with tupple entries containing pairs of node-dof for each row index.
	dmig_matrix.col_nodes :(list)A list with tupple entries containing pairs of node-dof for each column index.
	dmig_matrix.r         :(list)A list with the integer indeces of rows, where non zero values are located.
	dmig_matrix.c         :(list)A list with the integer indeces of columns, where non zero values are located.
	dmig_matrix.d         :(list)A list with the non zero complex values located at indeces (r,c)

	@returns integer: Returns 1 on success, 0 on error.

	"""

def CreateDMIGMatrix(dmig_matrix):

	"""

	Creates a DMIG entity that contains the provided dmig matrix entries.


	@dmig_matrix object: An object containing the following:
	dmig_matrix.row_nodes :(list)A list with tupple entries containing pairs of node-dof for each row index.
	dmig_matrix.col_nodes :(list)A list with tupple entries containing pairs of node-dof for each column index.
	dmig_matrix.r         :(list)A list with the integer indeces of rows, where non zero values are located.
	dmig_matrix.c         :(list)A list with the integer indeces of columns, where non zero values are located.
	dmig_matrix.d         :(list)A list with the non zero complex values located at indeces (r,c)

	@returns object: Returns a reference to the DMIG entity created, None if invalid arguments were specified or an error occurred.

	"""

class Entity:

	"""

	Ansa entities are exported to python as objects of type ansa.base.Entity.
	Such objects are: 
	-Returned by functions.
	-Can be created.

	"""


	_id = None
	"""
	Returns the Ansa Entity Id, internal implementation detail.

	"""

	_name = None
	"""
	Returns the Ansa Entity Name, internal implementation detail.

	"""

	_edge_index = None
	"""
	The objects edge index (if available). Optional argument for the Entity constructor.

	"""

	_comment = None
	"""
	Returns the Ansa Entity Comment, internal implementation detail.

	"""

	position = None
	"""
	Directly get and set global x,y,z coordinates for point-like Entities. Supported entities:
	GRIDs, MORPH POINTs, CONNECTION:SpotWeld_Points, CONNECTION:GumDrops
	CONNECTION:Bolts, CONNECTION:Robscans, CONNECTION:Points
	TARGET POINTs, POINTs, CENTERs, HOT POINTs, CONNECTOR ENTITY,  
	GENERIC_ENTITIES_BUILDER, GEB_BC, GEB_OR, GEB_MT
	GEB_SB, GEB_GN, A_POINT, LC_POINT.

	"""

	_bname = None
	"""
	The entity's name in byte representation.

	"""

	_bcomment = None
	"""
	The entity's comment in byte representation.

	"""

	def __init__(deck, id, type, facet, edge_index):

		"""

		Entity object constructor.


		@deck integer: The selected deck.

		@id integer: The id of the entity.

		@type string: The type of the entity.

		@facet integer: (optional)If a facet is required, the respective solid facet.

		@edge_index integer: (optional)If an element edge is required, the respective edge (starting with 1).

		@returns object: Returns the created Entity object.

		"""


	def ansa_type(deck):

		"""

		Asks the object for its ANSA type.


		@deck constant: The ANSA deck.

		@returns string: A string stating the ANSA type.

		"""


	def card_fields(deck):

		"""

		Asks the object to return a list with the names of all the active card fields of the object's NASTRAN card.


		@deck constant: The deck constant.

		@returns object: Returns a list with the NASTRAN card fields of an entity in the specified deck.

		"""


	def is_usable():

		"""

		Checks if the object refers to a usable ANSA entity.


		@returns boolean: Returns True if the Entity is usable. False otherwise.

		"""


	def get_entity_values(deck, fields):

		"""

		Get values from the entity using the edit card's field names. This method works similarly with base.GetEntityCardValues. This method returns directly the entity objects for the fields that reference Entity objects.


		@deck integer: The selected deck.

		@fields object: A list of card field labels to extract the values from.

		@returns object: Returns a Dictionary with the requested labels as keys and the retrieved values as the dictionary's values.If the function fails to find the requested fields the dictionary's value will be empty.For the fields that reference Entity object the return dictionary encapsulates these objects

		"""


	def set_entity_values(deck, fields, items, debug):

		"""

		Set or change values of the entity using its Edit Card Fields.


		@deck integer: The deck type.

		@fields object: A dictionary with keys the name of the ANSA card 
		labels and values the desired card field values
		fields dictionary you can also use as a pair:
		
		__table_curves : Curves willing to insert into a table.
		__table_values : The Rate values that will be used 
		for the above curves.

		@items object: (optional)A pair of lists, one that contains curves and another that contains x values.
		Only for use with TABLE entities
		(e.g. [ [curve1, curve2, ...], [x1, x2, ...] ])

		@debug constant: (optional)If debug is set to ansa.constants.REPORT_ALL returns a tuple that has two items:
		        an integer that values 0 on success, non zero on error
		and     a dictionary that holds any errors / warnings found. This dictionary has as keys the fields that were used upon calling the function and lead to errors / warnings. The data for each field is a dictionary with two keys:
		                'type' that holds the words 'error' or 'warning' as data.
		                'message' that holds the error message generated by this field.
		                
		If debug is ansa.constants.REPORT_SILENCE returns a tuple that has two items:
		        an integer that values 0 on success, non zero on error and an empty dictionary
		
		If not given ony an integer will be returned.

		@returns object: When debug argument is not given: Returns 0 on success, non zero on error.If debug argument is given: Returns a tuple with an integer as before and a dictionary with errors.

		"""

class Fmvss226:

	"""

	Class for the creation of an FMVSS226 loadcase.

	"""


	front_frame = None
	"""
	Front Frame surface Set.

	"""

	rear_frame = None
	"""
	Rear Frame surface Set.

	"""

	front_glazing = None
	"""
	Front Glazing surface Set.

	"""

	rear_glazing = None
	"""
	Rear Glazing surface Set.

	"""

	dlo_offset = None
	"""
	Day Light Opening Offset. (Default: 25)

	"""

	headform = None
	"""
	Headform elements Set.

	"""

	all_glazings = None
	"""
	All Glazing surfaces Set.

	"""

	cid = None
	"""
	Headform Coordinate.

	"""

	move_back = None
	"""
	Move back distance of headform after positioning.

	"""

	apply_rules = None
	"""
	Apply Reduction Rules. (Default: 1)

	"""

	target_point_id = None
	"""
	Target Point Entity.

	"""

	third_row_frame = None
	"""
	Third Row Frame surface Set.

	"""

	third_row_glazing = None
	"""
	Third Row Glazing surface Set.

	"""

	def create_load_cases(master_filename, files_prefix_name, output_path, transf_filename, meta_filename, velocity, dyna_trsfm_mode, headform_include, targets_set, write_out_set, use_point_names, relative_name_includes, files_extension):

		"""

		Initializes the FMVSS226 functionality for multi-positioning of the headform and creation of the load cases.


		@master_filename string: (optional)Full path name of master file that contains the
		include hierarchy.

		@files_prefix_name string: (optional)Prefix of include files that will be created. 
		Default name is "FMVSS226_Shot".

		@output_path string: (optional)Output directory.

		@transf_filename string: (optional)Name of the Transformation csv file that will be created. 
		Default name is "FMVSS226_TransfList.csv".

		@meta_filename string: (optional)Name of the Meta file that will be created. 
		Default name is "FMVSS226_MetaList.csv".

		@velocity float: (optional)Velocity of headform. If a value is defined 
		previously in target point's card, then the 
		function disregards this one.

		@dyna_trsfm_mode string: (optional)Values supported "NODE_TRANSFORM", 
		"INCLUDE_TRANSFORM". 
		Default is "NODE_TRANSFORM". 
		It works for LSDYNA only.

		@headform_include object: (optional)Include of the Fmvss226 Headform. Only if
		DYNA_TRSFM_MODE is "INCLUDE_TRANSFORM".

		@targets_set object: (optional)Set that contains the target points for the 
		creation of the load cases. If this is not  defined 
		the function works on all database's target points.

		@write_out_set string: (optional)Values supported "ON", "OFF". If this flag is on 
		the definition of headform set will be written out 
		in the include file.

		@use_point_names string: (optional)Values supported "ON", "OFF" If this flag is on 
		the created master files and directories will get 
		target point's name.

		@relative_name_includes boolean: (optional)Use relative names for includes. This will enable
		the copy of referenced includes that are contained
		in master file, in each target point's directoty. Default value is False

		@files_extension string: (optional)The preferred extension of all the include files that
		will be created (e.g .inc). If left blank the default extension
		of the current deck, will be used.

		"""


	def position():

		"""

		This functions position the Headform according to the values set during initialization.The horizontal impact angle is defined from the corresponding field of the target point entity.


		"""


	def create_target_points():

		"""

		This method calculates all target points and secondary entities for the FMVSS226 - Ejection Mitigation regulation.


		"""

class Fmvss201U:

	"""

	Class that handles all the FMVSS201U functionality.

	"""


	front_sgrp = None
	"""
	Front Seating Reference Point. A list with (x,y,z) coordinates is required.

	"""

	rear_sgrp = None
	"""
	Rear Seating Reference Point. A list with (x,y,z) coordinates is required.

	"""

	distance_m = None
	"""
	Horizontal travel distance of the adjustable front seat in the test vehicle.

	"""

	int_surfaces = None
	"""
	Internal Surfaces Set.

	"""

	ext_surfaces = None
	"""
	External Surfaces Set.

	"""

	a_pillar = None
	"""
	A-Pillar Surfaces Set.

	"""

	b_pillar = None
	"""
	B-Pillar Surfaces Set.

	"""

	other_pillar = None
	"""
	Other Pillar Surfaces Set.

	"""

	rear_pillar = None
	"""
	Rear Pillar Surfaces Set.

	"""

	ip_points = None
	"""
	A set that contains the highest point at the intersection of the Instrument Panel and the A-Pillar. If the set contains elements or geometry, the tool will calculate the intersection with the A-Pillar automatically.

	"""

	windscreen = None
	"""
	Windscreen Surfaces Set.

	"""

	int_roof = None
	"""
	Interior Roof Surfaces Set.

	"""

	seatbelt_anchors = None
	"""
	Seatbelt Anchor Nodes Set.

	"""

	side_openings = None
	"""
	Frame elements of Side Doors or DLO Set.

	"""

	front_opening_points = None
	"""
	Highest Nodes of forwardmost Door Opening and lowest Nodes of 
	forwardmost DLO Set.

	"""

	rear_opening = None
	"""
	Frame elements of Rear Door or DLO Set.

	"""

	rear_opening_points = None
	"""
	Highest Nodes of Door Opening and lowest Nodes of DLO forward of 
	the Other Pillar Set.

	"""

	sun_roof = None
	"""
	Sun Roof Opening Surfaces Set.

	"""

	roll_bar = None
	"""
	Roll Bar Surfaces Set.

	"""

	stiffener = None
	"""
	Stiffener Surfaces Set.

	"""

	sliding_opening = None
	"""
	Nodes that define the widest Sliding Door Opening Set.

	"""

	fmh = None
	"""
	FMH Set.

	"""

	fiz = None
	"""
	FIZ Set.

	"""

	trim = None
	"""
	TRIM Set.

	"""

	fmh_coord = None
	"""
	FMH Coordinate.

	"""

	fiz_node = None
	"""
	FIZ Node.

	"""

	glass_surface = None
	"""
	Glass Surface.

	"""

	max_divergence_distance = None
	"""
	Maximum divergenece between contact and target points.
	(Default: 2.0)

	"""

	max_target_point_movement = None
	"""
	Maximum distance between initial and final position 
	of target point (Conservative Positioning).
	(Default: 200)

	"""

	place_target_to_contact = None
	"""
	Places the TARGET_POINT to contact point after positioning.
	(Default: 0)

	"""

	ignore_property_thick = None
	"""
	Positioning algorithm ignores property thickness.

	"""

	repeat_with_other_fiz_nodes = None
	"""
	Repeats positioning with other FIZ nodes in case of failure.
	(Default: 1)

	"""

	ur_front_point = None
	"""
	Front point of the upper roof zone. A list with (x,y,z) coordinates is required.

	"""

	ur_rear_point = None
	"""
	Rear point of the upper roof zone. A list with (x,y,z) coordinates is required.

	"""

	respect_initial_x_coordinate = None
	"""
	Preserves the initial x-coordinate of the initial position of TARGET_POINT, 
	during Conservative positioning.

	"""

	use_dist_to_hard_parts = None
	"""
	Use FIZ Node distance to hard parts (along the head's X-axis) to find optimum horizontal angle. If set, the optimization is recalculated until the most optimized FIZ Node is found.

	"""

	move_back = None
	"""
	The distance that the headform will be moved back from the selected target point.

	"""

	reposition_step = None
	"""
	Sampling step when relocating the target point, in case the contact point is not adjacent to the target point.

	"""

	reposition_max_r = None
	"""
	Maximum relocation distance of the target point.

	"""

	hard_parts = None
	"""
	Hard Parts Set ID.

	"""

	exhaustive_relocation = None
	"""
	0: Relocation finds the valid Target Point closest to the original Target Point.
	1: Relocation finds all valid Target Points inside the reposition_max_r radius.

	"""

	autodetect_trim = None
	"""
	0: TRIM surface has to be defined using the 'trim' member to specify a set.
	1: TRIM surface is the property closest to the Target Point ('trim' member is disregarded).

	"""

	max_local_dist = None
	"""
	Maximum local distances (X, Y) between the central lowest FIZ Node and the Contact Point. A list with (X, Y) distanfes is required.

	"""

	limit_local_d = None
	"""
	0: Disregard max_local_dist values.
	1: Respect max_local_dist values when evaluating the final solution.

	"""

	animation_save = None
	"""
	0: Do not save animation files.
	non-zero: Save animation files.

	"""

	animation_views = None
	"""
	List of integers, one for each available animation view.
	0: Do not create an animation file for the corresponding view
	1: Create an animation file for the corresponding view
	e.g. (1, 0, 1) to save animation files of the Front - Aft and the Headform - Target Point views.
	
	Ordered available animation views:
	1. Front - Aft
	2. Left - Right
	3. Headform - Target Point

	"""

	animation_path = None
	"""
	The output path of the animation files.

	"""

	bleed_through = None
	"""
	Whether to display "bleed through" info (1) or not (0).

	"""

	bleed_through_max_width = None
	"""
	The maximum "bleed through" width that's considered valid. Any width values greater than this will be considered erroneous.

	"""

	respect_thick_contact_point = None
	"""
	Whether to calculate the Contact Point on the mid-surface of TRIM (false) or offseted from it based on its thickness (true).

	"""

	vertical_step = None
	"""
	The vertical angle step used during auto vertical positioning.

	"""

	rename_positioned_targets = None
	"""
	Whether to rename the auto-saved positioned target points or not. The rename follows the pattern: "original_name_H.angle_V.angle_YYYY_MM_DD"

	"""

	def create_target_points():

		"""

		This method calculates all target points and secondary entities for the FMVSS201U regulation.


		"""


	def position(target_point, mode, save_position, expand_target_point, save_before_rebound):

		"""

		This method positions the headform on the given target point.


		@target_point object: The target point entity reference, or a list of target point entities.

		@mode string: (optional)'auto_horizontal'or 'auto_vertical' or 'full_positioning' 
		or reset'.

		@save_position boolean: (optional)True or False for saving the positioning information 
		in the target point card.

		@expand_target_point boolean: (optional)If True, the Target Point will be relocated in order to achieve an almost zero distance to the Contact Point.

		@save_before_rebound boolean: (optional)If True, the position just before vertical rebound will be saved in a new Target Point.

		"""


	def create_load_cases(master_filename, files_prefix_name, output_path, transf_filename, meta_filename, velocity, dyna_trsfm_mode, headform, headform_include, targets_set, write_out_set, use_point_names, files_extension):

		"""

		This method sets the various parameters of the FMVSS201 function to create the load cases of previous defined saved positions through target point entities.


		@master_filename string: (optional)Full path name of master file that contains 
		the include hierarchy.

		@files_prefix_name string: (optional)Prefix of include files that will be created. 
		Default name is "FMH_Shot".

		@output_path string: (optional)Output directory.

		@transf_filename string: (optional)Name of transformations list file that will 
		be created. Default name is 
		"FMH_TransfList.csv".

		@meta_filename string: (optional)Name of the Meta file that will be created. 
		Default name is "FMH_MetaList.csv".

		@velocity float: (optional)Velocity of headform. If a value is defined 
		previously in target point's card, then the 
		function disregards this one.

		@dyna_trsfm_mode string: (optional)Values supported "NODE_TRANSFORM", 
		"INCLUDE_TRANSFORM". Default is 
		"NODE_TRANSFORM". It works for 
		LSDYNA only.

		@headform object: (optional)Set of the Free Motion Headform.

		@headform_include object: (optional)Include of the Free Motion Headform. Only 
		if DYNA_TRSFM_MODE is 
		"INCLUDE_TRANSFORM".

		@targets_set object: (optional)Set that contains the target points for the 
		creation of the load cases. If this is not defined 
		the function works on all database's target points.

		@write_out_set boolean: (optional)If this flag is enabled the definition of FMH set will be written out in the include file.

		@use_point_names boolean: (optional)Use the target points names for naming the created 
		include files. Default value is False.

		@files_extension string: (optional)Define the preferred extension of all the include files that will be created (e.g .key). If left blank the default
		extension of the current deck, will be used.

		"""


	def create_stochastic_circles(target_point, part, circles, points_per_circle, circle_radius, specific_angle):

		"""

		This method creates uniform or not target points around a central target point.


		@target_point object: The target point entity reference.

		@part object: (optional)Part for adding the new target point entities.

		@circles integer: (optional)Number of concentic circles.
		(Default: 1)

		@points_per_circle integer: (optional)Number of uniform points on each circle.
		(Default: 8)

		@circle_radius float: (optional)Radius increment for each circle.
		(Default: 5)

		@specific_angle float: (optional)Specific angle for single target point creation. 
		If this parameter is defined then only a single 
		point is created.

		"""


	def match_fiz_with_target_point(target_point):

		"""

		This method moves the Headform according to the input values set duringthe objects' initialization and H.ANGLE and V.ANGLE fields of thetarget_point entity that is given as argument.Actually it matches thedefined FIZ node with the target point at the angles that mentioned above.No depenetration is performed, so it is recommended to call theFMVSS201ValidatePosition afterwards.


		@target_point object: The target point entity reference.

		"""


	def move_to_saved_position(target_point):

		"""

		This method moves the headform to a previous saved position through target point entity.


		@target_point object: This method moves the headform to a previous 
		saved position through target point entity.

		"""


	def save_position(target_point, new_position):

		"""

		This method saves the headform position and data throughthe target point entity.If target_name is blank the current position is saved, otherwise it saves as a new position (target point).


		@target_point object: (optional)The target point entity reference.

		@new_position string: (optional)The new position name.

		"""


	def validate_position(check_vertical):

		"""

		This method checks if the vertical angle is within the limits of the regulation.


		@check_vertical boolean: (optional)True or False. Checks the vertical angle 
		violation according the vertical angle limits 
		that were previously defined in the current 
		target point entity.

		"""


	def manual_move(translate, translate_vec, translate_increment, axis, rotate_vertical, rotate_horizontal):

		"""

		This method performs manual move operations of the headform.


		@translate object: (optional)Translate along a vector. A list of (x,y,z).

		@translate_vec object: (optional)Translate along a unit vector. A list of (x,y,z).

		@translate_increment float: (optional)Translation increment.

		@axis string: (optional)"local" or "global".

		@rotate_vertical float: (optional)Angle of vertical rotation.

		@rotate_horizontal float: (optional)Angle of horizontal rotation.

		"""


	def minimize_contact_distance(target_point):

		"""

		This function translates the headform to minimize the contact distance from the target point, according to the values set in object's initialization. It is recommended to call it after manual rotations of the headform.


		@target_point object: The target point entity reference.

		"""


	def get_lowest_central_fiz_node():

		"""

		This method finds the lowest central node of the Forehead Impact Zone.


		"""

class CheckDescription:


	name = None
	"""
	The check's name, which should be unique among checks, and is mandatory.

	"""

	exec_action = None
	"""
	A two-member tuple of strings that contains the name of the function to be executed
	for this check, as well as the module path that this function is contained. This function
	has a specific signature. See CUSTOM_CHECK_EXEC_FUNCTION for details.
	CUSTOM_CHECK_EXEC_FUNCTION(entities, params)
	Arguments:
	entities    list    The entities on which the check is being applied.
	params   dict   A dictionary containing as keys the parameters of the check and as 
	values the corrpesponding values of the parameters with which the check is being applied.
	Return:
	The function should create and return the result items of the Check, which are 
	represented as objects of the class base.CheckReport.

	"""

	fix_action = None
	"""
	A two-member tuple of strings that contains the name of the fix function to be executed
	for this check, as well as the module path where it is contained. This function
	has a specific signature. See CUSTOM_CHECK_FIX_FUNCTION for details.
	CUSTOM_CHECK_FIX_FUNCTION(issues)
	The function to be called when the automatic fix option of the check is used, 
	e.g when applying Fix from the context menu of the Checks Manager 
	or when running issue.try_fix() from within a script.
	Arguments:
	issues    list    The issues of the Checks Manager where the fix action is being applied.
	Return:
	The return value of the function has to be one of the following:
	-base.Check.FIX_APPLIED
	Denotes that the fix has been applied succesfully.
	-base.Check.FIX_CANCELED
	Denotes that the fix hasn't been applied succesfully.
	-base.Check.FIX_APPLIED_REQUEST_RERUN
	Triggers the automatic rerun of the check.

	"""

	deck = None
	"""
	A deck specifier (e.g ansa.constants.NASTRAN, ansa.constants.LSDYNA, etc).
	(Default: NASTRAN)

	"""

	requested_types = None
	"""
	A sequence of strings, whose values can be either deck types (e.g CBAR, CQUAD4 etc) 
	or general entity keywords (e.g. __PROPERTIES__, __ELEMENTS__ etc). 
	This sequence defines the entities that will be gathered to be checked by this 
	user-defined check.
	Accepted general entity keywords are:
	"__PROPERTIES__", 
	"__MATERIALS__",
	"__ELEMENTS__",
	"__MBCONTAINERS__",
	"__ALL_ENTITIES__",
	"__CONNECTIONS__",
	"__KINEMATIC__",
	"__KINETIC__",
	"__FEATURES__",
	"__COORD_SYSTEMS__" and
	"__CONNECTION_TEMPLATES__"

	"""

	info = None
	"""
	The description of the check.

	"""

	def __init__(name, exec_action, fix_action, deck, requested_types, info):

		"""

		Object constructor method.


		@name string: The check's name, which should be unique among
		checks and is mandatory.

		@exec_action object: A two-member tuple of strings that contains the name of the function to be executed
		for this check, as well as the module path that this function is contained. This function
		has a specific signature. See CUSTOM_CHECK_EXEC_FUNCTION for details.
		CUSTOM_CHECK_EXEC_FUNCTION(entities, params)
		Arguments:
		entities    list    The entities on which the check is being applied.
		params   dict   A dictionary containing as keys the parameters of the check and as 
		values the corrpesponding values of the parameters with which the check is being applied.
		Return:
		The function should create and return the result items of the Check, which are 
		represented as objects of the class base.CheckReport.

		@fix_action object: (optional)A two-member tuple of strings that contains the name of the fix function to be executed
		for this check, as well as the module path where it is contained. This function
		has a specific signature. See CUSTOM_CHECK_FIX_FUNCTION for details.
		CUSTOM_CHECK_FIX_FUNCTION(issues)
		The function to be called when the automatic fix option of the check is used, 
		e.g when applying Fix from the context menu of the Checks Manager 
		or when running issue.try_fix() from within a script.
		Arguments:
		issues    list    The issues of the Checks Manager where the fix action is being applied.
		Return:
		The return value of the function has to be one of the following:
		-base.Check.FIX_APPLIED
		Denotes that the fix has been applied succesfully.
		-base.Check.FIX_CANCELED
		Denotes that the fix hasn't been applied succesfully.
		-base.Check.FIX_APPLIED_REQUEST_RERUN
		Triggers the automatic rerun of the check.

		@deck constant: The deck specifier (e.g ansa.constants.NASTRAN,
		ansa.constants.LSDYNA, etc). (Default: NASTRAN)

		@requested_types object: A sequence of strings, whose values can either be
		deck types (e.g. CBAR, CQUAD4 etc) or general entity
		keywords (e.g __PROPERTIES__ , __ELEMENTS__ etc)

		@info string: The description of the Check.

		@returns object: Returns a CheckDescription object.

		"""


	def add_float_param(name, value):

		"""

		Method to add a float parameter.


		@name string: The name of the parameter.

		@value float: The value of the parameter.

		"""


	def add_int_param(name, value):

		"""

		Method to add an int parameter.


		@name string: The name of the parameter.

		@value integer: The value of the parameter.

		"""


	def add_bool_param(name, value):

		"""

		Method to add a boolean parameter.


		@name string: The name of the parameter.

		@value boolean: The value of the parameter.

		"""


	def add_str_param(name, value):

		"""

		Method to add a string parameter.


		@name string: The name of the parameter.

		@value string: The value of the parameter.

		"""


	def save(save, file, append):

		"""


		@save object: A list of descriptions to a given file.

		@file string: (optional)The file path. If `file' is not given, the descriptions are
		saved in the default storage location.

		@append boolean: (optional)Activating this flag allows to append the list of check
		descriptions to the selected file. (default = False)

		"""

class CheckReport():

	"""

	A CheckReport object contains information about the results of a check run.
	It roughly corresponds to an item of the Checks Results list in ANSA, however,
	it can be used in a no-gui mode. Currently, the CheckReport class should be created
	only in conjunction with the user defined checks functionality, and should not be used
	as a standalone class. Objects of type CheckReport are also created from the script
	function ansa.base.ExecuteCheckTemplate() and also when executing stand-alone
	checks (e.g checks.general.Length(), checks.mesh.SharpEdges(), etc).

	"""


	description = None
	"""
	Same as `type` for header items. Will return the issue's description
	message if instance is an `issue`.

	"""

	entities = None
	"""
	A list with the entities given during creation of the issue. Will return
	an empty list if instance is header item.

	"""

	has_fix = None
	"""
	Read/Write member. If is True, a Fix option will be enabled
	at right clicking on Results List.

	"""

	is_fixed = None
	"""
	Read/Write member. If is True, its corresponding item will be
	removed from Results List, when `update()` is called.

	"""

	issues = None
	"""
	A list will all children issues.

	"""

	status = None
	"""
	Allowed values: "ok", "error", or "warning".

	"""

	type = None
	"""
	If instance is a header, returns the `type` used for the
	construction of this instance. Else, it returns its status
	("OK", "Error", "Warning").

	"""

	parent = None
	"""
	A CheckReport object. Used to place the created CheckReport under an already existing one (as a child entry in a tree list).

	"""

	def __init__(type):

		"""

		Object construction method. Creates a header report item (a top level item in Check Results List).A header report item can have many children items, known as `issues` for this header.


		@type string: If instance is a header, returns the `type` used for
		the construction of this instance. Else, it returns its
		status ("OK", "Error", "Warning").

		@returns object: Returns a CheckReport object.

		"""


	def notify(reports):

		"""

		This class method "reports" all issues to the Checks Manager's Result List.It should be used only by user-defined checks.


		@reports object: A sequence of CheckReport instances.

		"""


	def update():

		"""

		updates the items' status in Check Results List. For example, if anyCheckReport is marked as fixed, the `update` function will have itremoved from the list. In nogui mode, this function has no effect.


		"""


	def add_issue(status, entities, description, has_fix):

		"""

		Creates an issue CheckReport with the given status, description and entities. Note, that further arguments can be provided, which will create the respective attributes on the CheckReport object.


		@status string: Allowed values: ok", "error", or "warning".

		@entities object: A list with the entities given during creation of the issue.
		Will return an empty list if instance is header item.

		@description string: Same as `type` for header items. Will return the
		issue's description message if instance is an `issue`.

		@has_fix boolean: (optional)If set to True, the Auto Fix option will be enabled at right clicking on Results List.

		@returns object: Returns None.

		"""


	def try_fix(request_gui, issues):

		"""

		If an issue is a header, this function will try to fix all issues of this header. 


		@request_gui boolean: (optional)If False (default value), then no window will appear for
		user interaction during the fix process. Otherwise, and
		depending on the issue, a window may appear if the
		script is not running in a no-gui mode.

		@issues object: (optional)An optional sequence of children CheckReport objects.
		If given, then only those issues will be fixed. By default,
		all issues will be fixed.

		@returns object: Return None.This function will throw an exception (RuntimeError) if a fix is not available, or it was called for a non-header CheckReport object (e.g an issue of a header).

		"""

class CollectNewModelEntities():

	"""

	Monitors and collects new entities created or imported into the model.

	"""


	def __init__(deck, filter_types):

		"""

		The object's construction method.


		@deck constant: (optional)The deck constant.

		@filter_types object: (optional)A list of ANSA entity types ie SECTION_SHELL.

		@returns object: Returns a CollectNewModelEntities object.

		"""


	def report():

		"""

		This method returns all the created/imported entities from the object initialization to the report() method calling.


		@returns object: A list with all the collect ANSA entities.

		"""


	def model():

		"""

		This method returns the model that was current when the object was initialized.


		@returns object: The mobel object.

		"""

class MassBalanceOp():

	"""

	Class for Mass balance operation.

	"""


	entities = None
	"""
	The entities where the mass balance will done.

	"""

	initial_cog = None
	"""
	Initial center of gravity. A list with the x,y,z coordinates of the center of gravity.

	"""

	initial_inertia = None
	"""
	Initial inertia list. The inertias are given by a sequence in the following 
	order: Ixx, Iyy, Izz, Ixy, Ixz, Iyz.

	"""

	initial_mass = None
	"""
	Initial mass of the model.

	"""

	desired_cog = None
	"""
	Target center of gravity.

	"""

	desired_inertia = None
	"""
	Target inertia.

	"""

	desired_mass = None
	"""
	Target mass.

	"""

	def __init__(initial_cog, initial_inertia, initial_mass, desired_cog, desired_inertia, desired_mass):

		"""

		Object construction method.


		@initial_cog object: Initial center of gravity.

		@initial_inertia object: Initial inertia.

		@initial_mass float: Initial mass.

		@desired_cog float: Target center of gravity.

		@desired_inertia object: Target inertia.

		@desired_mass float: Target mass.

		@returns object: Returns a MassBalanceOp object.

		"""


	def execute():

		"""

		Executes the mass balance operation.


		@returns object: Returns a MassBalanceResults type Object.

		"""

class MassBalanceResults():


	final_cog = None
	"""
	The final center of gravity (read only).

	"""

	final_inertia = None
	"""
	The final inertia tensor (wrt the final cog) (read only).

	"""

	final_mass = None
	"""
	The final mass reached after the mass balance operation (read only).

	"""

	masses = None
	"""
	Dictionary with keys node references and values mass values (read only).

	"""

	def create_masses():

		"""

		This method creates CONM2 masses on the nodes contained in themasses dictionary of the instance.


		"""

class ASeatbelt():

	"""

	A class that handles all the SeatBelt functionality.

	"""


	seatbelt = None
	"""
	A predefined seatbelt entity.  If this is not set at initialization,
	a new one will be created.

	"""

	create_contact = None
	"""
	Flag for creating a contact entity.

	"""

	contact_id = None
	"""
	The predefined contact that will be updated after the 
	creation of a seatbelt. If it is not set and the create_contact
	flag is not zero, a default contact will be created.

	"""

	disable_parts2wrap = None
	"""
	Flag for disabling parts2wrap item of a seatbelt entity.
	If it is equal to True then the function will run on visible parts.

	"""

	auto_recreate = None
	"""
	Flag for auto-recreating the seatbelt after dummy articulation.

	"""

	use_real_thickness = None
	"""
	Flag for using the real property thickness of the model for
	calculating the seatbelt components offset.

	"""

	real_thick_factor = None
	"""
	Factor for multiplying the calculated real thickness of the model.

	"""

	nodal_rbody_on_set = None
	"""
	Flag for creating Nodal Rigid Body Constraints on Sets / Groups instead of individual Nodes.

	"""

	apply_constant_width = None
	"""
	Flag for keeping the width of the belt contant, whereever is this possible.

	"""

	smooth = None
	"""
	Flag for smoothing the created shell elements.

	"""

	unfold = None
	"""
	Flag for not folding the belt sections on the parts to wrap.

	"""

	keep_id_range = None
	"""
	Keep the id ranges of previous created or auto-detected elements on recreate.

	"""

	is_3point = None
	"""
	If seatbelt argument is not defined, the auto-created entity will be a 3-point seatbelt.

	"""

	mat_orient = None
	"""
	'PSI' (default) or 'MCID' for the material orentation of the created shells.

	"""

	def add_component(name):

		"""

		This method adds a new children component to the seatbelt object.


		@name string: (optional)The name of the new component.

		"""


	def delete_all_elements():

		"""

		This method deletes all the contents of a seatbelt object.


		"""


	def reset_all_paths():

		"""

		This method deletes all the contents of a seatbelt object.


		"""


	def container():

		"""

		This method returns in a list all the contained elements of aseatbelt object.


		"""


	def fill_parts_to_wrap(parts):

		"""

		This method adds an entity or a list of entities in parts2wrap itemof a seatbelt object.


		@parts object: Ansa entity or a list of ansa entities to be added.

		"""


	def create_all_components(interactive_edit, keep_anchor_entities):

		"""

		This method creates and recreates all the seatbelt components of theseatbelt object.


		@interactive_edit boolean: (optional)Flag for enabling the interactive edit of each  component.
		It works only in gui mode. Default value is False.

		@keep_anchor_entities boolean: (optional)Flag for keeping the previously created anchor entities (e.g sliprings, retractors e.t.c) after recreation of the whole seatbelt.

		"""


	def delete_component(component, delete_elements):

		"""

		This method deletes a seatbelt component.


		@component object: The name or index of the component.

		@delete_elements boolean: (optional)Flag to delete the component's elements also.

		"""


	def delete_component_elements(component):

		"""

		This method deletes the created elements of a seatbelt component.


		@component object: The name or index of the component.

		"""


	def delete_component_points(component):

		"""

		This method deletes selected points of a seatbelt component.


		@component object: The name or index of the component.

		"""


	def reset_component_path(component):

		"""

		This method resets the saved path of a specific seatbelt component.


		@component object: The name or index of the component.

		"""


	def component_container(component):

		"""

		This method returns in a list all the contained elements of a seatbeltcomponent.


		@component object: The name or index of the component.

		"""


	def set_component_parameters(component, points_prefix, generic_type, starting_elements, starting_length, starting_anchor, elem_property_1d, rds_nstrand_property, start_elem_property_2d, main_elements, el_length, offset, num_of_shells, entry_vec, exit_vec, shells_property, ending_elements, ending_length, ending_anchor, end_elem_property_2d, num_to_extend, create_trias_at_end, create_trias_at_start, is_frozen, dyna_cross_sect_dist, load_limiter_length, pretensioner_length, connecting_elem_at_start, connecting_elem_at_end, start_spring4_property, start_spring12_property, start_spring13_property, end_spring4_property, end_spring12_property, end_spring13_property, start_pretensioner_length, dyna_cross_sect_dist_2, create_stiffener_springs, stiffener_spring_property, is_membrane, start_retractor_elem_num, end_retractor_elem_num):

		"""

		This method sets the creation parameters of a seatbelt component.


		@component object: The name or index of the component.

		@points_prefix string: (optional)The prefix of name that will be set at the selected path
		points of the seatbelt component.

		@generic_type string: (optional)"1D", "2D". The generic type of the seatbelt component.
		The 1D type can create only 1D elements and the 2D
		type can create both 1D and 2D elements.

		@starting_elements string: (optional)The type of starting elements that will be created.
		LS-DYNA: "1D_BELT", "2D_BELT", "NONE".
		PAM-CRASH: "BARS", "BELTS", "NONE".
		ABAQUS: "CONNECTOR", "TRUSS", "NONE".
		RADIOSS: "TRUSS", "NSTRAND", "SPRING 4", "SPRING 13", "LOAD LIMITER", "NONE".

		@starting_length float: (optional)The total length of component's starting part.

		@starting_anchor string: (optional)The type of starting anchor entity that will be created.
		"SLIPRING", "RETRACTOR", "PRETENSIONER"(LS-DYNA), "FIXED", "NONE".
		RADIOSS: "PRETENSIONER", "PULLEY", "PULLEY & SPRING 4", "FIXED", "NONE"

		@elem_property_1d object: (optional)The 1D elements property. If not set, a default
		property will be created.

		@rds_nstrand_property object: (optional)The Radioss Nstrand elements property. 
		If not set, a default property will be created.

		@start_elem_property_2d object: (optional)The Ls-Dyna 2D seatbelt elements property.
		If not set, a default property will be created.

		@main_elements integer: (optional)One of "SHELLS", "QUADS", "TRIAS" or "2D_BELT".
		The type of elements that will be created at the main
		part. If not set regular shells will be created. The option
		"2D_BELT" stands only for Ls-Dyna deck.

		@el_length float: (optional)The length of all elements that will be created.

		@offset float: (optional)Offset of seatbelt elements from the parts that will be
		wrapped.

		@num_of_shells integer: (optional)The number of 2D elements that will be created at the
		width of the seat belt.

		@entry_vec object: (optional)Entry vector. The starting part's width direction will be
		alligned with this vector. A list(x, y, z) is required.

		@exit_vec object: (optional)Exit vector. The ending part's width direction will be
		alligned with this vector. A list(x, y, z) is required.

		@shells_property object: (optional)The 2D elements property.If not set, a default
		property will be created.

		@ending_elements string: (optional)The type of ending elements that will be created.
		LS-DYNA: "1D_BELT", "2D_BELT", "NONE".
		PAM-CRASH: "BARS", "BELTS", "NONE".
		ABAQUS: "CONNECTOR", "TRUSS", "NONE".
		RADIOSS: "TRUSS", "NSTRAND", "SPRING 4", "SPRING 13", "LOAD LIMITER", "NONE".

		@ending_length float: (optional)The total length of component's ending part.

		@ending_anchor string: (optional)The type of ending anchor entity that will be created.
		"SLIPRING", "RETRACTOR", "PRETENSIONER"
		(LS-DYNA), "FIXED", "NONE".
		RADIOSS: "PRETENSIONER", "PULLEY", "PULLEY & SPRING 4", "FIXED", "NONE"

		@end_elem_property_2d object: (optional)The Ls-Dyna 2D seatbelt elements property.
		If not set, a default property will be created.83

		@num_to_extend integer: (optional)The number of Ls-Dyna 1D seatbelt elements that will
		extend 1D starting and ending part.

		@create_trias_at_end boolean: (optional)Create trias at end of the starting part of the component
		(instead of rigid body line elements).

		@create_trias_at_start boolean: (optional)Create trias at start of the ending part of the component
		(instead of rigid body line elements).

		@is_frozen boolean: (optional)Freeze/unfreeze component.

		@dyna_cross_sect_dist float: (optional)The Cross Section Distance of the component. It is
		measured approximately from the Starting point
		of the component and across its centerline.

		@load_limiter_length float: (optional)The distance of Load Limiter set node from Node 2
		of Cylindrical Joint. Radioss only.

		@pretensioner_length float: (optional)Length of Ending Pretensioner at global X-direction.
		Radioss only.

		@connecting_elem_at_start string: (optional)Type of elements that connect the shells part with 
		the starting linear part of the component. 
		Valid only for Radioss.
		Available options" "RIGID BODY", "TRIAS", "SPRINGS 13".

		@connecting_elem_at_end string: (optional)Type of elements that connect the shells part with 
		the ending linear part of the component. 
		Valid only for Radioss.
		Available options" "RIGID BODY", "TRIAS", "SPRINGS 13".

		@start_spring4_property object: (optional)Property of the starting Radioss TYPE4 Springs .
		If not set, a default property will be created.

		@start_spring12_property object: (optional)Property of the starting Radioss TYPE12 Springs .
		If not set, a default property will be created.

		@start_spring13_property object: (optional)Property of the starting Radioss TYPE13 Springs .
		If not set, a default property will be created.

		@end_spring4_property object: (optional)Property of the ending  Radioss TYPE4 Springs .
		If not set, a default property will be created.

		@end_spring12_property object: (optional)Property of the ending  Radioss TYPE12 Springs .
		If not set, a default property will be created.

		@end_spring13_property object: (optional)Property of the ending  Radioss TYPE12 Springs .
		If not set, a default property will be created.

		@start_pretensioner_length float: (optional)Length of Starting Pretensioner at global X-direction.
		Radioss only.

		@dyna_cross_sect_dist_2 float: (optional)Create a *DATABASE_CROSS_SECTION entity
		approximately at this distance83, measured from the ending
		point of the component's main part.

		@create_stiffener_springs boolean: (optional)Create springs along the width of the seatbelt in order
		to give stiffness to the component.

		@stiffener_spring_property object: (optional)Property of the springs that will be created along the width of the component. If not set , a default property will be created.

		@is_membrane boolean: (optional)Create PAM-CRASH membrane elements at the main part of the component.

		@start_retractor_elem_num integer: (optional)Number of additional collapsed seatbelt elements to be created inside the starting retractor.

		@end_retractor_elem_num integer: (optional)Number of additional collapsed seatbelt elements to be created inside the ending retractor.

		"""


	def set_component_points(component, nodes):

		"""

		This method sets the path points of a seatbelt component.


		@component object: The name or index of the component.

		@nodes object: List of nodes that will be used as path points.

		"""


	def calculate_component_length(component):

		"""

		This method calculates the total length of a created seatbelt component.


		@component object: The name or index of the component.

		"""


	def create_component(component, interactive_edit, keep_anchor_entities):

		"""

		This method creates - recreates a seatbelt component.


		@component object: The name or index of the component.

		@interactive_edit boolean: (optional)Flag for enabling the interactive edit of the component.
		It works only in gui mode. Default value is False.

		@keep_anchor_entities boolean: (optional)Flag for keeping the previously created anchor entities (e.g sliprings, retractors e.t.c) after recreation of the component.

		"""


	def show_window():

		"""

		This method pops up the SeatBelt Manager window for the specific seatbelt.


		"""


	def set_known_points(component, nodes):

		"""

		This function sets as known a number of nodes that were previouslyset as component points of the component.


		@component object: The name or the index of the seatbelt component.

		@nodes object: A list of nodes that are going to be set as known.

		"""


	def change_path_point(component, node_name, new_node, new_node_name):

		"""

		It changes a path point of a seatbelt component.


		@component object: The name or the index of the seatbelt component.

		@node_name string: The name of the path point that is going to be replaced.

		@new_node object: The node that will be set as a path point.

		@new_node_name string: (optional)In case a name for the new node is set, the previous
		node will keep its name. Otherwise the new node
		will take the name of the previous node (node_name).

		@returns integer: Returns 1 in success 0 in failure.

		"""


	def get_components():

		"""

		Returns the names of the components of the seatbelt entity.


		@returns object: It returns a list with the names of the seatbelt components.

		"""


	def get_points_of_component(component, return_names):

		"""

		Returns the nodes or the names of the path nodes of a seatbelt component.


		@component object: The name or the index of the seatbelt component.

		@return_names boolean: (optional)If it is enabled the function will return the names of the path
		points, otherwise it will return the path nodes (if they exist). Default value is false.

		@returns object: Returns a list with the path nodes or the names of the path pointsif the return_names argument is set to true.

		"""


	def tension_component(component, edge, crop, smooth_elements, force, direction_auto, direction, friction_coefficient, try_to_keep_vector, recreate, fix_edge_shells):

		"""

		Applies tensioning on a component's start or end.


		@component object: Integer (1-based index) or string (name) of the seatbelt's component to be tensioned.

		@edge string: 'Start' or 'End' to pull from the component's start or end respectively.

		@crop boolean: (optional)If True, the component over the original Seatbelt point will be cropped. Default = True.

		@smooth_elements boolean: (optional)If True, elements will be smoothed after the tensioning is performed. Default = False.

		@force float: (optional)The force to be applied when pulling. A number in (0, 100]. Default = 10.

		@direction_auto boolean: (optional)If True, the pulling direction will be automatically computed. Default = True.

		@direction object: (optional)Vector of pulling direction. If direction_auto is True, this is not used. Default: none.

		@friction_coefficient float: (optional)The friction coefficient. Default = 0.

		@try_to_keep_vector boolean: (optional)If True, try to keep vectors. Default = False.

		@recreate boolean: (optional)If true, after tensioning, the seatbelt component will be recreated along the tensioned centerline.

		@fix_edge_shells boolean: (optional)If true, any cropped shells will be kept square.

		@returns integer: 1

		"""

class CheckTemplate():

	"""

	The CheckTemplate class encapsulates the behaviour of check templates in Checks Manager.

	"""


	name = None
	"""
	Gets the template's name (readonly).

	"""

	def read_templates(file, check_definitions):

		"""

		Reads templates from a given file.


		@file string: (optional)The file path. If it is not given, the templates
		will be read from BETA_HOME. If no templates are
		found in BETA_HOME, the function will try to read
		templates from ANSA_HOME, if any. If the file
		contains also user-defined checks.

		@check_definitions string: It should be a path to the user-defined check definitions
		that are used in the template file.

		@returns object: Returns a dictionary with keys strings and values the corresponding CheckTemplate objects.

		"""


	def execute(make_current):

		"""

		For a given CheckTemplate object, 'run' will execute the template. After the template execution, the function returns an object whose type is '_CheckTemplateExecutionResults', that contains the following members:errors: the number of errors reported from the template executionwarnings: the number of warnings reported from the template executionok: the number of checks that executed with no errors or warningsreports: A sequence of `CheckReport' objects. Each `CheckReport' object corresponds to a header (top-level) item in the Check List. 


		@make_current boolean: (optional)When True, it is ensured that the Checks Manager displays the results of the given template. To be used in scripts where more than one templates are executed.

		@returns object: Returns a _CheckTemplateExecutionResults object.

		"""


	def run():

		"""

		Deprecated. Use the "execute" method instead, that works in the same way.


		"""


	def checks():

		"""

		Returns a list of all the template's checks. 


		@returns object: A list of all the template's checks.

		"""

class Check():

	"""

	A Check is the type of object created from the many functions that create ANSA
	checks. All these functions are in ansa.base.checks module. You should never
	create a Check object directly through its constructor. For example, to create
	a Penetration Distance Range check, you can use the following code snippet:
	
	pen_distance_range = checks.penetration.DistanceRange()
	
	A Check, depending on the function used to create it, may have attributes to be
	set. For example, the Length check contains a lower_limit and an upper_limit
	attribute. After setting the attributes, you can run a check, by calling the
	method execute, e.g
	
	pen_distance_range.execute()

	"""


	EXEC_ON_ALL = None
	"""
	Defines the execution mode. The execution mode resembles 
	the "Execute on" column in Checks Manages.

	"""

	EXEC_ON_VIS = None
	"""
	Defines the execution mode. The execution mode resembles 
	the "Execute on" column in Checks Manager.

	"""

	EXEC_ON_MODEL = None
	"""
	Defines the execution mode. The execution mode resembles 
	the "Execute on" column in Checks Manager.

	"""

	EXEC_ON_SELECTED = None
	"""
	Defines the execution mode. A sequence of ANSA entities should be also given.

	"""

	REPORT_ALWAYS = None
	"""
	Defines when the Checks List should appear. With this option 
	the Checks List appears always.

	"""

	REPORT_IF_ERROR = None
	"""
	Defines when the Checks List should appear. With this option 
	the Checks List appears if errors or warnings exist.

	"""

	REPORT_NONE = None
	"""
	Defines when the Checks List (the list with the reported issues) should appear. 
	With this option the Checks List never appears.

	"""

	KEEP_OLD = None
	"""
	Defines whether old items in Checks List Should be purged or not.

	"""

	CLEAR_OLD = None
	"""
	Defines whether old items in Checks List should be purged or not.

	"""

	def execute(exec_mode, entities, report, history):

		"""

		Executes the check.


		@exec_mode constant: (optional)The execution mode, which can be
		Check.EXEC_ON_ALL(default),
		Check.EXEC_ON_VIS, Check.EXEC_ON_MODEL,
		Check.EXEC_ON_SELECTED. The execution
		mode resembles the "Execute on" column in Checks
		Manager.

		@entities object: (optional)A sequence of ANSA entities to be considered by the
		check. This sequence is only considered if `exec_mode'
		is Check.EXEC_ON_SELECTED.

		@report constant: (optional)Define when should the Checks List (the list with the reported issues)
		should appear. There are three (3) options. Use Check.REPORT_NONE so that 
		the Checks List never appears, Check.REPORT_IF_ERROR to show the 
		Checks List only if errors or warnings exist, 
		and Check.REPORT_ALWAYS (default) to always show the list.

		@history constant: (optional)An optional argument that defines whether old items in Checks List 
		should be purged or not. The accepted values are Check.CLEAR_OLD, 
		to clear the old check results, if any, and Check.KEEP_OLD (default).

		@returns object: Returns a list of CheckReport objects.

		"""

class PedSafety():

	"""

	Class that handles the Pedestrian Tool functionality.

	"""


	external_parts = None
	"""
	External Parts Set.

	"""

	windscreen = None
	"""
	Windscreen Set.

	"""

	ground_1 = None
	"""
	First Ground Point. An array that contains the (x,y,z) coordinates of the point.

	"""

	apply_reg = None
	"""
	Apply marking of regulation or protocol ("EURONCAP_GRID", "EUPHASE_1",
	"EUPHASE_2" or "GTR-9/UN-R 127", "JNCAP", "TRIAS_63", "EURONCAP_OLD",
	"EURONCAP_GRID_V7", "KNCAP_GRID",
	"CNCAP_GRID", "ANCAP_GRID", "EURONCAP_2022", "CNCAP_2022", 
	"GTR9/UN-R 127(Proposal)"). Order matches the corresponding options of the GUI tool.

	"""

	test_type = None
	"""
	The type of test device ("HEADFORM", "LEGFORM" or "BOTH").

	"""

	bonnet = None
	"""
	Bonnet Set.

	"""

	bumper = None
	"""
	Bumper Set. For Legform marking.

	"""

	bumper_beam = None
	"""
	Bumper Beam Set. For Legform marking of EURONCAP_GRID protocol.

	"""

	wiper_blades = None
	"""
	Wiper Blades Set. For xxxNCAP_GRID only.

	"""

	upper_legform_2015 = None
	"""
	Apply the EuroNCAP 2015 proposal for Upper Legform.
	Default value is False.

	"""

	inclined_ground = None
	"""
	Use inclined ground according ground_point_1 and ground_point_2.
	Default value is False.

	"""

	ground_2 = None
	"""
	Second Ground Point. A tupple containing the (x,y,z) coordinates of the point.

	"""

	lbrl_angle = None
	"""
	Lower bumper reference line angle.
	Default value is 25 degrees.

	"""

	ubrl_angle = None
	"""
	Upper bumper reference line angle.
	Default value is 20 degrees.

	"""

	bc_angle = None
	"""
	Bumper corner angle.
	Default value is 60 degrees.

	"""

	blerl_angle = None
	"""
	Bonnet leading edge angle.
	Default value is 50 degrees.

	"""

	blerl_height = None
	"""
	Bonnet leading edge height.
	Default value is 600 mm.Improve BLE Marking in case of large gap between bonnet and front fascia

	"""

	bsrl_angle = None
	"""
	Bonnet side reference line angle.
	Default value is 45 degrees.

	"""

	adult_radius = None
	"""
	Adult headform radius.
	Default value is 82.5 mm.

	"""

	child_radius = None
	"""
	Child headform radius.
	Default value is 82.5 mm.

	"""

	disregard_dist = None
	"""
	Disregard distance from side lines. For xxxNCAP_GRID only.
	Default value is 50 mm.

	"""

	stepsize = None
	"""
	Resolution of lines.
	Default value is 50 mm.

	"""

	gridsize = None
	"""
	Grid size of xxxNCAP_GRID.
	Default value is 100 mm.

	"""

	wad_project_limit = None
	"""
	The projection of the flexible tape's edge on the car's surface,
	will not be performed for WADs less than this value.
	Default value is 0 mm.

	"""

	delete_excluded = None
	"""
	The excluded points according the sides lines or corners will be deleted. 
	If is False the excluded points will not be deleted and will be marked as 'EXCLUDED'. 
	For xxxNCAP_GRID only.
	Default value is True.

	"""

	smooth_curves = None
	"""
	Smooth created curves for stepsize values less than 20mm.
	Default values is False.

	"""

	different_pids = None
	"""
	Create a different PID for each curve in conv2line_elements.
	Default value is False.

	"""

	boundaries_only = None
	"""
	Create only the lines of xxxNCAP_GRID.
	Default value is False.

	"""

	wads_euroncap_grid = None
	"""
	An array that contains the Wrap Around Distances.
	Default values are (1000, 1500, 1700, 2100, 775, 930).

	"""

	wads_euphase_1 = None
	"""
	An array that contains the Wrap Around Distances.
	Default values are (1000, 2100).

	"""

	wads_euphase_2 = None
	"""
	An array that contains the Wrap Around Distances.
	Default values are (1000, 1700, 2100).

	"""

	wads_jncap = None
	"""
	An array that contains the Wrap Around Distances.
	Default values are (1000, 1175, 1350, 1525, 1700, 1900, 2100).

	"""

	wads_trias_63 = None
	"""
	An array that contains the Wrap Around Distances.
	Default values are (1000, 1700, 2100).

	"""

	wads_euroncap_old = None
	"""
	An array that contains the Wrap Around Distances.
	Default values are (1000, 1250, 1500, 1700, 1800, 2100).

	"""

	bc_matching_dist = None
	"""
	BLE and BSRL matching distance for Bonnet Corner Points calculation.
	Default value is 1mm.

	"""

	raster_zone = None
	"""
	The marked zone that raster will be applied ("ADULT", "CHILD" or "BOTH").
	Default value is "ADULT".

	"""

	raster_length = None
	"""
	Length of raster's box.
	Default value is 80 mm.

	"""

	paste_tol = None
	"""
	Paste tolerance between raster points and boundary lines.
	Default value is 20 mm.

	"""

	follow_all_lines = None
	"""
	Target points will be created at all lines, not only at those on boundaries.
	Default value is False.

	"""

	critical_mode = None
	"""
	Detect critical points at corresponding areas ("HEADFORM" or "LEGFORM").
	Default value is "HEADFORM". The "LEGFORM" mode concerns the Lower Legform lines.

	"""

	hard_parts_head = None
	"""
	Hard Parts Set for "HEADFORM" mode.

	"""

	hard_parts_leg = None
	"""
	Hard Parts Set for lower "LEGFORM" mode.

	"""

	impact_angle_head = None
	"""
	Impact angle for "HEADFORM" mode.
	Default value is 30 degrees.

	"""

	impact_angle_leg = None
	"""
	Impact angle for "LEGFORM" mode.
	Default value is 0 degrees.

	"""

	critical_zone = None
	"""
	The corresponding zone for critical points detection ("ADULT", "CHILD" or "BOTH").
	For "HEADFORM" mode.

	"""

	points_per_area = None
	"""
	The number of points that will be detected in each area.
	Default value is 1.

	"""

	points_distance = None
	"""
	The minimum desired distance between two consecutive critical points in each
	area. Default value is 50 mm.

	"""

	max_distance = None
	"""
	The maximum distance from Hard Parts that the target points will be disregarded.
	Default value is blank.

	"""

	search_step = None
	"""
	Searching step in X and Y local directions of each area.
	Default value is 10 mm.

	"""

	ble_points = None
	"""
	The number of target points that will be calculated in each BLE segment.
	Default value is 4.

	"""

	device = None
	"""
	The Set of test device that will be positioned.

	"""

	device_type = None
	"""
	The type of test device ("HEADFORM" or "LEGFORM").
	Default value is "HEADFORM".

	"""

	coord_sys = None
	"""
	The Coordinate System that is located at the center of the test device.

	"""

	lower_leg_z_level = None
	"""
	The lowest Z-level at impact position of Lower Legform.
	Default value is blank.

	"""

	rotate_back_inclined = None
	"""
	Rotate back the created entities when Ground type is 'Inclined'. 
	Default value is False.

	"""

	wad_tapes_to_ble = None
	"""
	Create WAD tapes from Ground to BLE for covering possible gaps (e.g grills).
	 Default value is False.

	"""

	wad_tapes_y_limits = None
	"""
	An array that contains the Y-coordinate limits of WAD tapes on the right 
	and on the left side of the car. Default values are (blank, blank).

	"""

	forward_angle_limit = None
	"""
	If the vehicle's Forward Angle is greater than this value then horizontal
	projection will be performed. For xxxNCAP_GRID (version >= 8.1.0).
	Default values is 60 degrees.

	"""

	ec_proposal = None
	"""
	Enable proposal of the EC to GRSP - December 2014. For EU_PHASE2.
	Default value is False.

	"""

	bc_gauge_limits = None
	"""
	An array that contains the EC proposal Gauge lower and upper limit. 
	For EU_PHASE2 and ec_proposal = True.
	Default values are (75, 1001).

	"""

	use_cid_for_lowest_point = None
	"""
	If the 'lower_leg_z_level' is not blank then the legform lowest point will be
	defined from the 'coord_sys'. Otherwise the 'position' method will compute 
	the lowest point from the impactor's nodes.
	Default value is False.

	"""

	geom_points_curves = None
	"""
	Create 3D points on target points, and curves between them.
	Default value is False.

	"""

	custom_legform_targets = None
	"""
	The mark() function will create additional legform target points
	at user defined Y coordinates of WAD 775(or BLE) and UBRL.
	The Y coordinates must be set by variables custom_upper_leg_points
	and custom_lower_leg_points.
	Default value is false.

	"""

	custom_upper_leg_points = None
	"""
	The Y-coordinates of Upper legform additional points that will be created.
	They should be given in comma separated format (e.g 80, 160, -80, -160 e.t.c)
	Default value is blank. It applies only if the custom_legform_points = True.

	"""

	custom_lower_leg_points = None
	"""
	The Y-coordinates of Lower legform additional points that will be created.
	They should be given in comma separated format (e.g 80, 160, -80, -160 e.t.c)
	Default value is blank. It applies only if the custom_legform_points = True.

	"""

	rename_inclined_targets = None
	"""
	Add post-fix '_Inclined_Angle' at Target Points names when
	Ground Type is 'Inclined'.
	Default value is true.

	"""

	consider_inclination = None
	"""
	The inclination angle calculated from 'ground_1', 'ground_2' points will be taken 
	into account, during the positioning of the impactor.
	Default value is false.

	"""

	min_energy = None
	"""
	No Upper Legform Test required if the Impact Energy is calculated less than 
	this value.
	Default value is 160.

	"""

	max_energy = None
	"""
	If the Impact Energy is calculated greater than this value, then this value is used.
	Default value is 457.

	"""

	nominal_mass = None
	"""
	The Impact Energy is calculated using this value and the Nominal Impact Velocity.
	Default value is 7.4.

	"""

	test_mass = None
	"""
	The Test Velocity is calculated using this value and the Nominal Impact Energy.
	Default value is 10.5.

	"""

	vel_factor_1 = None
	"""
	Factor 'Vo' in formula: Vc = Vo * cos(k * angle), for calculating the Nominal 
	Impact Velocity.
	Default value is 40.

	"""

	vel_factor_2 = None
	"""
	Factor 'k' in formula: Vc = Vo * cos(k * angle), for calculating the Nominal 
	Impact Velocity.
	Default value is 1.2.

	"""

	max_ibh = None
	"""
	Maximum Bumper Beam Height. Default value is 520.

	"""

	proj_distance = None
	"""
	Maximum Bumper Beam Project Distance for calculating the qualifying Height.
	Default value is 10.

	"""

	targets_near_wad_tol = None
	"""
	Distance to the WAD Lines for excluding target points that are out of impact area.
	Default value is 2.

	"""

	deployed_bonnet = None
	"""
	The set that contains the parts of the bonnet in the deployed position (for Active Bonnets).
	In case of xxxNCAP positioning this set should be used in combination with External Parts set.

	"""

	auto_calc_rot_point = None
	"""
	Automatic calculation of ground rotation point at the intersection of the line that is defined
	by the two points (ground_1, ground_2) and the vertical plane that is tangent to the most 
	forward point of the External Parts. Default is False.

	"""

	a_pillars = None
	"""
	A set that contains the A-Pillars. It will be used for NCAP calculation of target points.

	"""

	gtr_bumper_lines_offset = None
	"""
	Offset longitudinal Bumper Lines along global Y-axis and towards the centerline of the vehicle.
	Default value is 42.

	"""

	bc_gauge_edges_tol = None
	"""
	Tolerance for checking if the contact point is on the lower or upper edge of the Gauge. Default value is 1.0.

	"""

	bsrl_stepsize = None
	"""
	Separate step size for the BSRL calculation. If it is not defined the generic Step Size will be used. Default value is blank.

	"""

	mark_on_prop_thickness = None
	"""
	In case of FE-models the Property Thickness will be taken into account during marking. For getting correct results the external surfaces must have uniform orientation. Default value is False.

	"""

	fill_z_level = None
	"""
	Fill Z-level value in Lower Leg Target points according impactor type. Accepted values : 
	"No value", "Flex-PLI", "a-PLI". Default value is "No value".

	"""

	mark_from_zero_y = None
	"""
	Mark vehicle starting from Y=0.0. In case the car is not symmetric on left and right side this option will ensure that marking will start from 0.0. If the car is not positioned on Y=0.0  this option should be disabled. Default value if True.

	"""

	calculate_targets_wad = None
	"""
	Calculate WAD of target points during marking. Default value is False.

	"""

	def mark():

		"""

		This method marks the vehicle according the marking members of the object.


		"""


	def conv2line_elements():

		"""

		This method convert all created curves in line elements.


		"""


	def create_wad_line(length, name):

		"""

		This method creates a custom WAD line.


		@length float: The Wrap Around Distance of the custom line.

		@name string: The desired name of the custom line.

		@returns object: Returns an ANSA CURVE Entity.

		"""


	def create_raster():

		"""

		This method creates a raster of target points according the rastermembers of the object.


		"""


	def detect_critical_points():

		"""

		This method detects the critical points according the criticaltarget points members of the object.


		"""


	def create_ble_points(y_coord):

		"""

		This method creates target points on Bonnet Leading Edge linethat is created from mark() function.


		@y_coord float: (optional)Optional argument for creating a single target point at
		a specific Y coordinate of the BLE line.

		@returns object: Returns a list that contains the created target points.

		"""


	def position(target_xyz, impact_angle, move_back, positioning_type, get_all_contact_points, undo, target_entity):

		"""

		This method positions the test device according the given arguments andthe positioning members of the object.


		@target_xyz object: An array that contains the (x, y, z) coordinates of the
		target point.

		@impact_angle float: (optional)The impact angle. The default value is 30 degrees if the
		'device_type' is "HEADFORM" and 0 degrees if the
		'device_type' is "LEGFORM".

		@move_back float: (optional)The distance from target point that the test item will be
		moved back. Default value is 0 mm.

		@positioning_type string: (optional)The positioning point type ("TARGET", "CONTACT",
		"TEST"). Default value is "TARGET".

		@get_all_contact_points boolean: (optional)The method will also calculate the contact point
		coordinates for all the other positioning types,
		besides the one that is selected.
		Default value is False.

		@undo boolean: (optional)Repositions the test device at its initial position.
		Default value is False.

		@target_entity object: (optional)The target point entity if it exists, for using its inside
		information for positioning customization.

		@returns object: Returns an array a[] of 26 entries that define the transformation in an LS_DYNA way and also contains other information of the positioning.Specifically rotate through an angle a[6], about a line with direction cosines a[0], a[1] and a[2], passing throughthe point a[3], a[4] and a[5].Translation vector is a[7],a[8] and a[9].The function also returns the coordinates of the true target point at a[10], a[11] and a[12], thecoordinates of the contact point for the current positioning mode at a[13], a[14] and a[15],the coordinates of the contact point if thepositioning mode was Target Point at a[16], a[17] and a[18], the coordinates of the contact point if the positioning mode was ContactPoint at a[19], a[20] and a[21],the coordinates of the contact point if the positioning mode was Test Point at a[22], a[23] and a[24], and theresult of the positioning at a[25]. If a[25] is equal to 1 then the positioning was successfull otherwise will be equal to zero.

		"""


	def create_load_cases(targets_set, positioning_type, impact_angle, move_back, master_filename, files_prefix_name, output_path, transf_filename, meta_filename, velocity, dyna_trsfm_mode, device_include, write_out_set, use_point_names, relative_name_includes, files_extension, write_velocity, do_not_create_files, vel_referring_cid):

		"""

		This method positions the device at multiple target points and createsthe load cases according the current Deck and the given arguments.


		@targets_set object: (optional)Set that contains the target points for the creation of
		the load cases. If this is not defined the function works
		on all database's Ansa target points.

		@positioning_type string: (optional)The positioning point type ("TARGET", "CONTACT",
		"TEST"). Default value is "TARGET".

		@impact_angle float: (optional)The impact angle. The default value is 30 degrees if the
		'device_type' is "HEADFORM" and 0 degrees if the
		'device_type' is "LEGFORM".

		@move_back float: (optional)The distance from target point that the test item will be
		moved back. Default value is 0 mm.

		@master_filename string: (optional)Full path name of master file that contains the include
		hierarchy.

		@files_prefix_name string: (optional)Prefix of include files that will be created. Default name is
		"Ped_Shot".

		@output_path string: (optional)Output directory.

		@transf_filename string: (optional)The name of transformations list file that will be created.
		Default name is "Ped_TransfList.csv".

		@meta_filename string: (optional)The name of the Meta file that will be created.
		Default name is "FMVSS226_MetaList.csv".

		@velocity float: (optional)Velocity of the test device. If a value is defined previously
		in target point's card then the function disregards this
		one. Default value is blank.

		@dyna_trsfm_mode string: (optional)The type of Transformation Keywords in LS-DYNA
		("NODE_TRANSFORM", "INCLUDE_TRANSFORM").
		Default is "NODE_TRANSFORM".

		@device_include object: (optional)Include of the test device. Only if dyna_trsfm_mode is
		"INCLUDE_TRANSFORM".

		@write_out_set boolean: (optional)The definition of the device set will be written out in the
		include file. Default value is True.

		@use_point_names boolean: (optional)Use target point names for naming the created include
		files. Default value is False.

		@relative_name_includes boolean: (optional)Use relative names for includes. This will enable
		the copy of referenced includes that are contained
		in master file, in each target point's directoty. Default value is False.

		@files_extension string: (optional)The preferred extension of all the include files that                                  will be created (e.g .inc). If left blank the default extension of the current deck, will be used.

		@write_velocity boolean: (optional)Enable or Disable the output of velocity keywords.
		Default value is False.

		@do_not_create_files boolean: (optional)Enable or disable the option to perform the positioning and
		store the information inside Target Point entities, without
		creating any files. Default value is False.

		@vel_referring_cid boolean: (optional)Option for creating the Initial Velocity keywords with reference to impactor's Coordinate System (CID). Default value is False. Valid only in LS-DYNA, RADIOSS.

		"""


	def create_wad_raster(front_wad, rear_wad, length_x, length_y, left_curve, right_curve, front_curve, rear_curve, exclude_wad, project_vert, create_on_boundaries, is_windscreen):

		"""

		This method creates a WAD based raster. Regarding thelength_x it will create multiple wad curves and along those curves it will distribute points according the length y.


		@front_wad float: The initial WAD. According this all the intermediate
		wad curves will be created.

		@rear_wad float: The final WAD. According this all the intermediate
		wad curves will be created.

		@length_x float: The step size for creating the intermediate wad curves.

		@length_y float: The step size measured along global Y direction for distributing the target points.

		@left_curve object: The left boundary curve. For trimming the intermediate
		wad curves.

		@right_curve object: The right boundary curve. For trimming the intermediate
		wad curves.

		@front_curve object: (optional)The first curve that defines the frontal reference line of raster.

		@rear_curve object: (optional)The last  curve that defines the rear reference line of raster.

		@exclude_wad float: (optional)Exclude from target points creation a wad that exists between the front and rear.

		@project_vert boolean: (optional)Select if the created target points will be vertically projected on External Parts. Default is True.

		@create_on_boundaries boolean: (optional)Enable/Disable creation of target points on boundary curves. Default value is True.

		@is_windscreen boolean: (optional)Enable this flag in case the raster will be applied on Windscreen impact zone. Default value is False.

		@returns object: A list containing the created target points.

		"""


	def show_window(car_marking_tab, target_points_tab, positioning_tab):

		"""

		This method launches the Pedestrian tool's window.


		@car_marking_tab boolean: (optional)Show or not the 'Car Marking' tab. Default value is True.

		@target_points_tab boolean: (optional)Show or not the 'Target Points' tab. Default value is True.

		@positioning_tab boolean: (optional)Show or not the 'Positioning' tab. Default value is True.

		@returns boolean: Returns True in success.

		"""


	def calculate_wad_of_targets(targets):

		"""

		This method calculates the Wrap Around Distance of a list of target points. The 'external_parts' set and the 'ground_1' must have been defined in the main object.


		@targets object: A list of target points.

		@returns object: It returns a dictionary that have as keys the target point entities and as data the WAD values.

		"""


	def get_targets_inside_zone(zone_curve, targets, tolerance):

		"""

		This method checks which targets points inside the given list lie inside the zone defined by the given closed curve.


		@zone_curve object: The curve which defines the zone (e.g the Windscreen Green/Exclusion Zone curve).

		@targets object: A list that contains the target points that will be checked.

		@tolerance float: (optional)Distance tolerance. Default value is zero.

		@returns object: Returns a list that contains the target points that lie inside the zone.

		"""

class TankTool():

	"""

	TankTool is an object that provides the whole funcitonality of the ANSA Tank module.
	It can be used via script in both GUI and no-GUI mode.
	It does not alter in any way the drawing of the model when used.

	"""


	_is_thickness_constant = None
	"""
	Depicts if the TankTool object is set to be used with a constant thickness or not.

	"""

	_constant_thickness_value = None
	"""
	The constant thickness selected for all the TankTool processes.

	"""

	_variable_thickness_filename = None
	"""
	The file name that holds all the data for the variable thickness 
	to be used for all the TankTool processes.

	"""

	_surface_definition_type = None
	"""
	A code to control whether the TankTool will be defined to operate 
	on the Outer, Middle or Inner surface of the tank.
	It can take three different values defined as :
	-ansa.base.TankTool.INNER_SURFACE
	-ansa.base.TankTool.MIDDLE_SURFACE
	-ansa.base.TankTool.OUTER_SURFACE

	"""

	def __init__(surface_definition, is_thickness_constant, constant_thickness_value, variable_thickness_filename):

		"""

		Object Constructor Method.


		@surface_definition constant: Defines whether the TankTool will use the 
		Outer, Middle or Inner surface of the Tank.
		Can take three values:
		-ansa.base.TankTool.OUTER_SURFACE.
		-ansa.base.TankTool.MIDDLE_SURFACE.
		-ansa.base.TankTool.INNER_SURFACE.

		@is_thickness_constant boolean: Define whether to use a constant thickness 
		or a variable one.

		@constant_thickness_value float: (optional)The thickness that will be used through out the 
		model for TankTool purposes.
		Must be used when is_thickness_constant is set 
		to True.

		@variable_thickness_filename string: (optional)The full path and file name of the file that holds 
		the variable thickness data that will be used through 
		out the model for TankTool purposes.
		Must be used when is_thickness_constant is set to False.

		@returns object: Returns a new TankTool object.

		"""


	def volume_level(max_volume):

		"""

		The method that will calculate the liquid height when filling at specified volume. It will also calculate the cut curves that mark the specified volume's liquid height.This method is deprecated. Use the volume_levels method.


		@max_volume float: The desired volume of liquid inside the tank.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""


	def volume_to_height(number_of_steps):

		"""

		A method in order to cut the model in different height levels based on a given number of steps.


		@number_of_steps integer: The needed number of steps. (Maximum 50)

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""


	def volume_to_step(volume_step):

		"""

		A method to cut the tank in different levels from the bottom up in given volume steps.This method is deprecated. Use the volume_levels method.


		@volume_step float: The step the method will use to cut the model.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""


	def step_to_volume(number_of_steps):

		"""

		A methid to cut the tank in different levels of volume depending on a given number of steps.


		@number_of_steps integer: The number of the desired steps.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""


	def volume_min_max(min_volume, volume_step, max_volume):

		"""

		Method to cut the tank from a minimum volume level to a maximum volume level cutting in between at different levels depending on a given step.This method is deprecated. Use the volume_levels method.


		@min_volume float: The start volume from which we begin cutting.

		@volume_step float: The volume step we use to calculate each cut.

		@max_volume float: (optional)The maximum volume upon which we stop cutting.
		If omitted the method will try to cut all along the 
		height of the tank.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""


	def height_min_max(min_height, height_step, max_height):

		"""

		Method to cut the tank from a minimum height level to a maximum height level cutting in between at different levels depending on a given step.


		@min_height float: The start height from which we begin cutting.

		@height_step float: The volume step we use to calculate each cut.

		@max_height float: (optional)The maximum height upon which we stop cutting.
		If omitted the method will try to cut all along the tank height.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""


	def filling_points(points):

		"""

		Method to calculate the volume and height depending on filling points.


		@points object: A tuple that holds coordinates for each of the desired 
		points packaged into tuples.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), point (tuple holding the three coordinates of the filling point), type ("Filling").Returns None on failure.

		"""


	def suction_points(points):

		"""

		Method to create suction points and calculate the height and the volume on the level of these points. 


		@points object: A tuple that holds coordinates for each of the desired 
		points packaged into tuples.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), point (tuple holding the three coordinates of the filling point), type ("Suction").Returns None on failure.

		"""


	def five_positions(points, rot_x, rot_y, volume):

		"""

		Method to calculate cuts using one or more suction points and a volume.In each combination 5 cuts are calculated by rotating the cut at:zero degrees, +rot_x, -rot_x, +rot_y, -rot_y.Whereas rot_x a given angle at the  X'X tank axisand rot y a given angle at the Y'Y tank axis.


		@points object: A tuple that holds coordinates for each of the desired 
		suction points, packaged into tuples.

		@rot_x object: An angle in degrees, to calculate rotation around 
		the X'X axis.

		@rot_y object: An angle in degrees, to calculate rotation around 
		the Y'Y axis.

		@volume float: The volume with which the variable cuts will be calculated.

		@returns object: Returns a Tuple of tuples.These tuples represent a suction point. Each one of these tuples contain a series of dictionaries. Each of these dictionaries corresponds to a cut and have: a 'curves' keywhich holds as data a list of curvesand a 'data' object with the followingfields: rest_volume (float), liquid_trapped (float), total_rest_volume (float), angle_type (string ('Flat', '+XX', '-XX', '+YY or '-YY')), angle_value (float), point (Tuple that holds the coordinates of the corresponding point), type, "Five Positions Suction".Returns PyNone on failure.

		"""


	def gravity_center(material_density, liquid_density, steps):

		"""

		Method to calculate center of gravity on different levels of the tank.These levels are calculated to correspond to a given number of steps.The CoG calculation is done on specific tank material density and liquid density, vlaues that must be provided by the user.


		@material_density float: (optional)The tank material density.
		If omitted a density of 1,0 (one) is used.

		@liquid_density float: (optional)The liquid material density.
		If omitted a density of 1,0 (one) is used.

		@steps integer: (optional)The desired number of steps.
		If omitted 10 steps are implied.

		@returns object: Returns a Tuple of tuples. These tuples represent a cut of the modelon a particular height, volume or point. Each one of these tuplescontain a series of dictionaries.Each of these dictionaries have: a'curves' key which holds as data a list of curvesand a 'data'tuple thatholds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), liquid_weight (float), liquid_COG (Tuple that holds the coordinates of the liquid center of gravity), combined_COG (Tuple that holds the coordinates of the combined center of gravity), type ("Gravity").Returns PyNone on failure.

		"""


	def SPH(deck, liquid_volume, sph_radius, sph_property, part):

		"""

		A method in order to create SPH elements that will fill the tank up to a given volume.


		@deck constant: The desired deck.
		Should use the decks coding as it is inside
		ansa.base.constants. e.g. ansa.constants.ABAQUS.

		@liquid_volume float: The desired volume height.

		@sph_radius float: The SPH element radius.

		@sph_property object: A property object (e.g. a PARTICLE SECTION object) to
		 be used by the SPH element.

		@part object: (optional)A part object in which the newly created SPH element will be set.
		If omitted the element will be set inside the current part.

		@returns object: Returns an object holding the created SPH element on success, or None on failure.

		"""


	def tilt(original_position, rot_x, rot_y, rot_z):

		"""

		Method to tilt the tank around the X, Y and Z axes.


		@original_position boolean: Flag to return the tank to each original position.
		Set to False in order to enter a new tilt.

		@rot_x float: (optional)Tilt angle (degrees) around X'X axis.
		Only fuctional if original_position = False.

		@rot_y float: (optional)Tilt angle (degrees) around Y'Y axis.
		Only fuctional if original_position = False.

		@rot_z float: (optional)Tilt angle (degrees) around Z'Z axis.
		Only fuctional if original_position = False.

		@returns object: Always return None.

		"""


	def tank_info(filename):

		"""

		Method to export last functions calculation to Html report.


		@filename string: (optional)The full filename for the report to be saved.
		If omitted an on screen Html report will be shown. 
		(If GUI mode is on)

		@returns object: Always returns None.

		"""


	def volume_levels(min_volume, max_volume, volume_step, first_level):

		"""

		Method to cut the tank from a minimum volume level to a maximum volume level cutting in between at different levels depending on a given step. Also will calculate the liquid height when filling at specified volume.


		@min_volume float: The start volume from which we begin cutting.

		@max_volume float: The maximum volume upon which we stop cutting.
		If omitted the method will try to cut all along the 
		height of the tank.

		@volume_step float: The volume step we use to calculate each cut.

		@first_level float: The desired volume of liquid inside the tank.

		@returns: Returns a Tuple of tuples. These tuples represent a cut of the model on a particular height, volume or point. Each one of these tuples contain aseries of dictionaries. Each of these dictionaries have a 'curves' key that holds as data a list of curves and a 'data' tuple that holds objects with the following fields: liquid_volume (float), wall_volume (float), wall_surface (float), height (float), type ("Height").Returns None on failure.

		"""

class Options():

	"""

	Modifies the various options in the 'Kinetic Options' window of 'Simulator'.
	It can be created only through initialization of Simulator object. It can be
	accessed in order to modify its members, but no modification of the object itself
	is permitted (exception is thrown). A reference to it can be created in order
	to change options. See EXAMPLE.
	Each member of the class is prefixed with the corresponding tab's name.

	"""


	general_disregard_forces_motions = None
	"""
	Disregard Forces and Motions during the KIN_CONFIG simulation modes 
	'By Actuator Joint', 'By Matching Points' and 'Interactive'.

	"""

	general_derivative_method = None
	"""
	Method for Derivative's evaluation 'NUMERICAL', 'SYMBOLIC'.

	"""

	general_auto_fix_joints = None
	"""
	Auto check and fix joints.

	"""

	general_flexible_joint_tol = None
	"""
	Flexible joint tolerance (>=0).

	"""

	general_flexible_body_tol = None
	"""
	Flexible body tolerance (>=0).

	"""

	general_tolj = None
	"""
	Relative tolerance for redundant constraints.

	"""

	general_body_euler_tol = None
	"""
	Euler angle singularity tolerance [DEG 0-90].

	"""

	general_tol_distance = None
	"""
	Collision Parameters - Distance tolerance for contact points clean up (mm).

	"""

	general_max_contact_points = None
	"""
	Collision Parameters - Maximum number of contact points per manifold.

	"""

	dynamics_alpha = None
	"""
	Coefficient for HHT Integrator (-1/3 <= alpha <= 0) or WBZ-ALPHA Integrator (alpha <= 0)

	"""

	dynamics_hmax = None
	"""
	Maximum time step size allowed.

	"""

	dynamics_hmin = None
	"""
	Minimum time step size allowed (hmin < hinit & hmin < hmax).

	"""

	dynamics_hinit = None
	"""
	Initial time step size (hinit < hmax).

	"""

	dynamics_error = None
	"""
	Relative and absolute local integration tolerance.

	"""

	dynamics_tolf = None
	"""
	Error tolerance for forces.

	"""

	dynamics_maxiter = None
	"""
	Maximum number of iterations allowed.

	"""

	dynamics_extrapolation = None
	"""
	Extrapolation.

	"""

	kinematics_hinit = None
	"""
	Initial step size.

	"""

	kinematics_hmin = None
	"""
	Minimum step size allowed (hmin < hinit).

	"""

	kinematics_tolx = None
	"""
	Error tolerance for displacements.

	"""

	kinematics_tolf = None
	"""
	Error tolerance for forces.

	"""

	kinematics_tolg = None
	"""
	Relative tolerance for spurious converge.

	"""

	kinematics_maxiter = None
	"""
	Maximum number of iterations allowed.

	"""

	kinematics_line_search_method = None
	"""
	Method of Line Search 'CUBICAL', 'LINEAR', 'LINEAR_MODIFIED'.

	"""

	contacts_integrator_type = None
	"""
	Type of Integrator: 'Constant Step Size', 'Adjustment Step Size'.

	"""

	contacts_hinit = None
	"""
	Step size allowed (for constant type).

	"""

	contacts_hmax = None
	"""
	Maximum step size allowed (for adjustment type).

	"""

	contacts_hmin = None
	"""
	Minimum step size allowed (for adjustment type).

	"""

	contacts_coordinate_projection = None
	"""
	Apply Coordinate Projection on Bilateral Constraint space (for both types).

	"""

	contacts_nmax = None
	"""
	Value of maximium integration order allowed for smooth extrapolation. 
	Valid values: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21.
	(Smooth Extrapolation Parameters - Adjustment Type)

	"""

	contacts_atol = None
	"""
	Absolute tolerance for stepsize adjustement and extrapolation.
	(Smooth Extrapolation Parameters - Adjustment Type)

	"""

	contacts_rtol = None
	"""
	Relative tolerance for stepsize adjustement and extrapolation.
	(Smooth Extrapolation Parameters - Adjustment Type)

	"""

	contacts_lcp_solver_type = None
	"""
	Type of Linear Complementarity Solver 'JORprox', 'SORprox'.
	( Linear Complementarity Parameters - for both types)

	"""

	contacts_lcp_maxiter = None
	"""
	Maximum number of iterations allowed.
	(Linear Complementarity Parameters - for both types)

	"""

	contacts_lcp_atol = None
	"""
	Absolute tolerance. (Linear Complementarity Parameters - for both types)

	"""

	contacts_lcp_rtol = None
	"""
	Relative tolerance. (Linear Complementarity Parameters - for both types)

	"""

	contacts_lcp_gtol = None
	"""
	Gradient tolerance for spurious convergence.
	(Linear Complementarity Parameters - for both types)

	"""

	ic_wi = None
	"""
	Weight factor.

	"""

	ic_maxerror = None
	"""
	Max anchor error.

	"""

	ic_maxiter = None
	"""
	Maximum number of iteration allowed.

	"""

	ic_tolx = None
	"""
	Error tolerance for displacements.

	"""

	ic_tolf = None
	"""
	Error tolerance for forces.

	"""

	ic_tolg = None
	"""
	Error tolerance for spurious converge.

	"""

	ic_line_search_method = None
	"""
	Method of Linear Search 'CUBICAL', 'LINEAR', 'LINEAR_MODIFIED'.

	"""

	steq_maxiter = None
	"""
	Maximum number of iterations allowed.

	"""

	steq_tolx = None
	"""
	Error tolerance for displacements.

	"""

	steq_tolf = None
	"""
	Error tolerance for forces.

	"""

	steq_tolg = None
	"""
	Error tolerance for spurious converge.

	"""

	steq_stability = None
	"""
	Fraction of the mass and damping matrices 
	(added to the equilibrium jacobian matrix).

	"""

	steq_tlimit = None
	"""
	Specifies the maximum translational increment allowed per iteration (mm).

	"""

	steq_alimit = None
	"""
	Specifies the maximum angular increment allowed per iteration (mm).

	"""

	steq_line_search_method = None
	"""
	Method of Linear Search 'CUBICAL', 'LINEAR', 'LINEAR_MODIFIED'.

	"""

	ic_stability = None
	"""
	Fraction of the mass and damping matrices 
	(added to the equilibrium jacobian matrix).

	"""

	ic_tlimit = None
	"""
	Specifies the maximum translational increment allowed while testing trial solutions during a solution step (mm).

	"""

	ic_alimit = None
	"""
	Specifies the maximum angular increment allowed while testing trial solutions during a solution step (deg).

	"""

	dynamics_tolx = None
	"""
	Error tolerance for corrections

	"""

	dynamics_max_depth = None
	"""
	Max depth tolerance for soft contact detection (mm)

	"""

	dynamics_min_time_step = None
	"""
	Mim time-step threshold for soft contact detection (mm)

	"""

	dynamics_ndamp = None
	"""
	Coefficient for Newmark Integrator (ndamp <= 0) or Generalized-Alpha Integrator (0 <= ndamp <= 1)

	"""

	dynamics_integrator_type = None
	"""
	Type of Integrator: 'HHT-I3', 'Newmark-Beta', 'WBZ-Alpha', 'Generalized-Alpha', 'NSTIFF'

	"""
class DrawMode():

	"""

	The DrawMode object creates a custom drawing style in order to alter the view of the model. It affects Shells or Solid Facets.
	
	Each DrawMode is defined by its name and can hold multiple drawing categories. Each category consists of Shells or Solid
	Facets entities, along with a name and a color. A widget is created in the ANSA drawing area, in order to control the
	visibility and interact with categories. The created DrawMode appears in the Draw Mode button of the Drawing Styles 
	toolbar, as USER along with its name. It can be enabled/disabled manually just like the native Draw Modes.
	
	The programmer may create DrawModes and allow the control to return to ANSA. The application will continue to draw using 
	the last DrawMode created or enabled. If the User performs a File>New action, all DrawModes are deleted.

	"""


	_name = None
	"""
	The name of the DrawMode.

	"""

	def enable():

		"""

		Enable the DrawMode. The model is drawn with the categories and colors of the propgrammer.


		@returns object: Always returns None.

		"""


	def disable():

		"""

		Disable the DrawMode. The model is now drawn with the previous draw mode (ENT, PID, MID ...)


		@returns object: Always returns None.

		"""


	def show_legend():

		"""

		Show the legend of the DrawMode. The legend shows the categories of the DrawMode.


		@returns object: Always returns None.

		"""


	def hide_legend():

		"""

		Hide the legend of the DrawMode. The legend shows the categories of the DrawMode.


		@returns object: Always returns None.

		"""


	def add_category(entities, label, color):

		"""

		Add a category to the DrawMode.


		@entities object: An iterable with the entities to be added in the category.

		@label string: The name of the category. This will appear in the legend widget.

		@color integer: The color of the category. It must be in hex RGBA format e.g. 0xFF000000 for Red color.
		Transparency is not supported.

		@returns integer: Returns the index of the added category.

		"""


	def remove_category(index):

		"""

		Remove a category from the DrawMode.


		@index integer: The index of the category to be removed. Note that by removing a category, 
		previous indexes to other categories in the DrawMode will be invalidated.

		@returns integer: Returns 0 on success or 1 otherwise.

		"""


	def update(index, entities, label, color, visible):

		"""

		Update the entities, label, color or visibility of a category of the DrawMode.


		@index integer: The index of the category to be updated.

		@entities object: (optional)An iterable with the new entities of the category. The entities 
		previously contained in the category are removed.

		@label string: (optional)The new name of the category.

		@color integer: (optional)The new color of the category. It must be in hex RGBA format 
		e.g. 0xFF000000 for Red color. Transparency is not supported.

		@visible boolean: (optional)Show/Hide the category. When hidden, the elements in the category 
		will be drawn as if they belonged to no category.

		@returns integer: Returns 0 on success or 1 otherwise.

		"""


	def categories():

		"""

		The total number of the categories of the DrawMode.


		@returns integer: Returns the total number of the categories.

		"""


	def category_info(index):

		"""

		It returns the entities, color, label and visibility of the category.


		@index integer: The index of the category to get info.

		@returns object: It returns a dictionary with keys 'entities', 'color', 'label' and 'visibile' of the category or None in case of failure.

		"""


	def delete():

		"""

		Delete the DrawMode. When a DrawMode is deleted, the application will revert to the previous drawing style.


		@returns object: Always returns None.

		"""


	def __init__(name, icon):

		"""

		DrawMode object constructor.


		@name string: The name of the DrawMode. If you call the constructor with a name 
		that already exists the existing object will be returned.

		@icon string: (optional)The path for the icon to be displayed next to the DrawMode name 
		in the Draw Mode button popup. By default a USR icon will be displayed.

		@returns object: Returns the created DrawMode object.

		"""

class Canvas():

	"""

	A Canvas object allows you to draw primitives on the GL area.
	
	Available artifacts are:
	* point
	* line, stippled line
	* label
	* arrow
	* triangle, quad
	* sphere, cube and cylinder.
	
	Points and some arrows are not affected by the view's zoom.
	
	It is also possible to draw lines, triangles, cones and labels that will not be affected by the view's zoom.
	Those primitives are named as symbols. Before drawing a symbol the symbol_origin must be set. symbol_origin 
	is the point from which the scale will take place.
	
	The programmer may create Canvas and allow the control to return to ANSA. A Canvas cannot be modified.
	If the User performs a File>New action, all Canvas are deleted.

	"""


	_name = None
	"""
	The name of the Canvas.

	"""

	def show():

		"""

		Show the Canvas. All Canvas primitives will be drawn on GL area.


		@returns object: Always returns None.

		"""


	def hide():

		"""

		Hide the Canvas. All Canvas primitives will become invisible.


		@returns object: Always returns None.

		"""


	def delete():

		"""

		Delete the Canvas.


		@returns object: Always returns None.

		"""


	def set_color(color):

		"""

		Set the color for the primitives that will follow.


		@color integer: It must be in hex RGBA format e.g. 0xFF000000 for Red color.

		@returns object: Always returns None.

		"""


	def point_size(size):

		"""

		Set the size of the points that will follow.


		@size integer: The size of the points.

		@returns object: Always returns None.

		"""


	def point(x, y, z, type):

		"""

		Draw a point.


		@x float: The x coordinate.

		@y float: The y coordinate.

		@z float: The z coordinate.

		@type string: (optional)Available types are 'square', 'square_hollow', 'cross', 
		'circle', 'circle_hollow', 'diamond', 'diamond_hollow', 
		'hexa_hollow' (default = 'square').

		@returns object: Always returns None.

		"""


	def line_width(width):

		"""

		The width of the lines that will follow.


		@width integer: The width of the lines.

		@returns object: Always returns None.

		"""


	def line(start, end):

		"""

		Draw a line.


		@start object: A tuple with (x, y, z) coordinates of the line's starting point.

		@end object: A tuple with (x, y, z) coordinates of the line's ending point.

		@returns object: Always returns None.

		"""


	def stippled_line(start, end):

		"""

		Draw a stippled line.


		@start object: A tuple with (x, y, z) coordinates of the stippled line's starting point.

		@end object: A tuple with (x, y, z) coordinates of the stippled line's ending point.

		@returns object: Always returns None.

		"""


	def arrow(start, end, line_width, size_of_tip, pos_of_tip, type):

		"""

		Draw an arrow.


		@start object: A tuple with (x, y, z) coordinates of the arrow's starting point.

		@end object: A tuple with (x, y, z) coordinates of the arrow's ending point.

		@line_width integer: (optional)Width of the arrow. (Default: 1)

		@size_of_tip float: (optional)Size of the tip (0 < size_of_tip < 1). (Default: 0.16)

		@pos_of_tip float: (optional)Position of the tip (0 < pos_of_tip < 1). (Default: 0.7)

		@type integer: (optional)0: Default arrow.
		1: Dynamic scale with fixed start.
		2: Dynamic scale with fixed end.

		@returns object: Always returns None.

		"""


	def triangle(p1, p2, p3, shade):

		"""

		Draw a triangle.


		@p1 object: A tuple with (x, y, z) coordinates of the triangle's 1st point.

		@p2 object: A tuple with (x, y, z) coordinates of the triangle's 2nd point.

		@p3 object: A tuple with (x, y, z) coordinates of the triangle's 3rd point.

		@shade boolean: (optional)Add shade to the triangle. (Default: True)

		@returns object: Always returns None.

		"""


	def quad(p1, p2, p3, p4, shade):

		"""

		Draw a quad.


		@p1 object: A tuple with (x, y, z) coordinates of the quad's 1st point.

		@p2 object: A tuple with (x, y, z) coordinates of the quad's 2nd point.

		@p3 object: A tuple with (x, y, z) coordinates of the quad's 3rd point.

		@p4 object: A tuple with (x, y, z) coordinates of the quad's 4th point.

		@shade boolean: (optional)Add shade to the quad. (Default: True)

		@returns object: Always returns None.

		"""


	def sphere(center, radius, shade):

		"""

		Draw a sphere.


		@center object: A tuple with (x, y, z) coordinates of the sphere's center.

		@radius float: Sphere's radius.

		@shade boolean: (optional)Add shade to the sphere. (Default: True)

		@returns object: Always returns None.

		"""


	def cylinder(origin, direction, radius, height, shade):

		"""

		Draw a cylinder.


		@origin object: A tuple with (x, y, z) coordinates of the cylinder's origin, 
		the center of the bottom circle.

		@direction object: A tuple with (x, y, z) coordinates of the cylinder's direction.

		@radius float: Cylinder's radius.

		@height float: Cylinder's height.

		@shade boolean: (optional)Add shade to the cylinder. (Default: True)

		@returns object: Always returns None.

		"""


	def cube(p1, p2, p3, p4, p5, p6, p7, p8, shade):

		"""

		Draw a cube.


		@p1 object: A tuple with (x, y, z) coordinates of the cube's 1st point.

		@p2 object: A tuple with (x, y, z) coordinates of the cube's 2nd point.

		@p3 object: A tuple with (x, y, z) coordinates of the cube's 3rd point.

		@p4 object: A tuple with (x, y, z) coordinates of the cube's 4th point.

		@p5 object: A tuple with (x, y, z) coordinates of the cube's 5th point.

		@p6 object: A tuple with (x, y, z) coordinates of the cube's 6th point.

		@p7 object: A tuple with (x, y, z) coordinates of the cube's 7th point.

		@p8 object: A tuple with (x, y, z) coordinates of the cube's 8th point.

		@shade boolean: (optional)Add shade to the cube. (Default: True)

		@returns object: Always returns None.

		"""


	def symbol_origin(x, y, z):

		"""

		The point where scaling will take place for the symbols to follow.


		@x float: The x coordinate.

		@y float: The y coordinate.

		@z float: The z coordinate.

		@returns object: Always returns None.

		"""


	def symbol_line(start, end):

		"""

		Draw a line which is dynamically scaled.


		@start object: A tuple with (x, y, z) coordinates of the symbol line's starting point.

		@end object: A tuple with (x, y, z) coordinates of the symbol line's ending point.

		@returns object: Always returns None.

		"""


	def symbol_triangle(p1, p2, p3):

		"""

		Draw a triangle which is dynamically scaled.


		@p1 object: A tuple with (x, y, z) coordinates of the triangle's 1st point.

		@p2 object: A tuple with (x, y, z) coordinates of the triangle's 2nd point.

		@p3 object: A tuple with (x, y, z) coordinates of the triangle's 3rd point.

		@returns object: Always returns None.

		"""


	def symbol_cone(start, end, radius):

		"""

		Draw a cone which is dynamically scaled.


		@start object: A tuple with (x, y, z) coordinates of the cone's starting point.

		@end object: A tuple with (x, y, z) coordinates of the cone's ending point.

		@radius float: The cone's radius.

		@returns object: Always returns None.

		"""


	def symbol_label(position, text, font_size):

		"""

		Draw a label which is dynamically scaled.


		@position object: A tuple with (x, y, z) coordinates of the label.

		@text string: The label's text.

		@font_size integer: (optional)The label's pixel size

		@returns object: Always returns None.

		"""


	def __init__(name):

		"""

		Canvas object constructor.


		@name string: The name of the Canvas. If you call the constructor 
		with a name that already exists the existing object will 
		be returned.

		@returns object: Returns the created Canvas object.

		"""


	def label(position, text, font_size):

		"""

		Draw a label.


		@position object: A tuple with (x, y, z) coordinates of the label.

		@text string: The label's text.

		@font_size integer: (optional)The label's pixel size

		@returns object: Always returns None.

		"""

class Loadcase():

	"""

	A class that handles all the Loadcase Manager functionality.

	"""


	class nastran():

		def load_parameters_from_file(filename, insert_option):

			"""

			Loads parameters from file.


			@filename string: The file name.

			@insert_option string: (optional)Insert option: "merge" or "overwrite".

			"""


		def set_options(options):

			"""

			Set Nastran options.


			@options object: A dictionary with keys the name of option and values the desired field value.
			options:                                      values
			"echo_bulk_bata_selection"  string: "SORT", "UNSORT", "BOTH" or "NONE"
			"echo_print_out"                    string: "PUNCH", "FILE" or "PUNCH, FILE"
			"result_file_format"                 string: "OP2" or  "PUNCH"
			"add_mpc"                              string: "COMMON_CASE" or ALL_SUBCASES"                           
			"structural_damping_table"    entity
			"fluid_damping_table"            entity
			"resvec_enable"                     bool
			"resvec_value"                       string: "YES" or "NO"        
			"rvdof_enable"                       bool
			"rvdof_by"                              string: "SET" or "BCDOFS"  
			"rvdof_set"                             entity
			"rvdof_dof"                             integer
			"uset1_enable"                      bool 
			"uset1_by"                             string: "SET" or "BCDOFS"   
			"uset1_set"                            entity
			"uset1_dof"                            integer
			"autospc_enable"                  bool
			"autospc_apply_constraints" string: "SPC" or "MPC"
			"autospc_print_singular_table"  string: "PRINT" or "NOPRINT"
			"autospc_generate_constraints"  string: "PUNCH" or "NOPUNCH"
			"nastran_file_management_statements"  string
			"executive_control"                      string       
			"common_case"                           string
			"add_parameters_in_case_control" bool

			"""


		def get_options(options):

			"""

			Get Nastran options.


			@options object: A list with the options' names that the user wants to extract the values from.
			Available options:
			"echo_bulk_bata_selection"
			"echo_print_out"
			"result_file_format"
			"add_mpc"
			"structural_damping_table"
			"fluid_damping_table"
			"resvec_enable"
			"resvec_value"
			"rvdof_enable"
			"rvdof_by"
			"rvdof_set"
			"rvdof_dof"
			"uset1_enable"
			"uset1_by"
			"uset1_set"
			"uset1_dof"
			"autospc_enable"
			"autospc_apply_constraints"
			"autospc_print_singular_table"
			"autospc_generate_constraints"
			"nastran_file_management_statements"
			"executive_control"
			"common_case"
			"add_parameters_in_case_control"

			@returns object: Returns a dictionary with the requested options as keys and the retrieved values as the dictionary's values.

			"""


		def set_method_type(method, subcase_ids, type):

			"""

			Set Nastran method type.


			@method object: The method entity to be set with the given type.

			@subcase_ids object: A list of subcase ids, where the method will be set with the given type.

			@type string: The method type to be set:
			"STRUCTURE", "FLUID" or "BOTH".

			"""


		def get_method_type(method, subcase_id):

			"""

			Get Nastran method type.


			@method object: The method entity.

			@subcase_id integer: Subcase id.

			@returns string: Returns the method type.

			"""


		def new_step(subcase, name, title, subtitle, common):

			"""

			Add a new step in a subcase (SOL 400).


			@subcase integer: The index of the subcase in which the step will be
			added.

			@name string: (optional)Step Name.

			@title string: (optional)Step Title.

			@subtitle string: (optional)Step Subtitle.

			@common boolean: (optional)True to create common step.

			@returns integer: Returns the index of the new step.

			"""


		def delete_step(subcase, step):

			"""

			Delete a step from a subcase (SOL 400).


			@subcase integer: The index of the subcase.

			@step integer: The index of the step.

			"""


		def info_step(subcase, step, fields):

			"""

			Get information about a step of a subcase (SOL 400).


			@subcase integer: The index of the subcase.

			@step integer: The index of the step.

			@fields object: A tuple of strings. Available fields are: "name", "title",
			"subtitle".

			@returns object: A dictionary with the requested fields as keys and values.

			"""


		def modify_step(subcase, step, name, title, subtitle, active):

			"""

			Modify a step of a subcase (SOL 400).


			@subcase integer: The index of the subcase.

			@step integer: The index of the step.

			@name string: (optional)Step Name.

			@title string: (optional)Step Title.

			@subtitle string: (optional)Step Subtitle.

			@active boolean: (optional)Set step active

			"""


		def get_steps_num(subcase):

			"""

			Get the number of steps of a subcase (SOL 400).


			@subcase integer: The index of the subcase.

			@returns integer: The number of steps.

			"""


		def has_common_step(subcase):

			"""

			Check if a subcase has a common step.


			@subcase integer: The index of the subcase.

			"""


		def get_analysis(subcase, step):

			"""

			Get the analysis of a subcase.


			@subcase integer: The index of the subcase.

			@step integer: (optional)The index of the step (SOL 400).

			@returns string: The analysis keyword.

			"""


		def set_analysis(subcase, keyword, step):

			"""

			Set the analysis of a subcase.


			@subcase integer: The index of the subcase.

			@keyword string: The analysis keyword.

			@step integer: (optional)The index of the step (SOL 400).

			"""


		def set_parameters(parameters):

			"""

			Set Nastran parameters


			@parameters object: A dictionary with keys the name of parameter and values the desired field value.

			"""


		def get_parameters(parameters):

			"""

			Get Nastran parameters.


			@parameters object: (optional)A list with the parameters' names that the user wants to extract the values from.

			@returns object: Returns a dictionary with the requested parameters as keys and the retrieved values as the dictionary's values.If no parameters are provided, then the dictionary will contain all the parameters of the loadase.

			"""


		def remove_parameters(parameters):

			"""

			Remove Nastran parameters


			@parameters object: A list with the parameters' names that the user wants to remove from loadcase

			"""


	class sonate():

		def set_options(options):

			"""

			Set Sonate options.


			@options object: A dictionary with keys the name of option and values the desired field value.
			options:                             values
			"Domain"                         string: "FREQUENCY" or "TIME"
			"Cfl"                              float 
			"DeltaT"                     float
			"TsRelax"                   float
			"FastLVL"                    integer
			"InternalImpedance"     integer
			"FrequencyRange"         a list (start, stop)
			"SmoothingFactor"         float
			"MeshVerification"  bool
			"TransferFunction"   bool
			"Acoustic Mesh"                   entity
			"Ground Plane"                     entity
			"Acoustic Material"               entity
			"Structure Mesh"                  entity
			"Modal Basis"                       string: filename
			"Modal Basis Type"              string: "TRANSLATION" or "ROTATION"
			"Visualization Mesh"            entity
			"Post Frequency"        entity
			"Analysis"                             string: "Weakly Coupled", "Strongly Coupled", "Acoustic", "Blocked Pressure", "Acoustic Transient Response", or "Transient Modal superposition Weakly Coupled"

			"""


		def get_options(options):

			"""

			Get Sonate options.


			@options object: A list with the options' names that the user wants to extract the values from.
			Available options:
			"Domain"
			"Cfl"
			"DeltaT"
			"TsRelax"
			"FastLVL"
			"InternalImpedance"
			"FrequencyRange"
			"SmoothingFactor"
			"MeshVerification"
			"TransferFunction"
			"Acoustic Mesh"
			"Ground Plane"
			"Acoustic Material"
			"Structure Mesh"
			"Modal Basis"
			"Modal Basis Type"
			"Visualization Mesh"
			"Post Frequency"
			"Analysis"

			@returns object: Returns a dictionary with the requested options as keys and the retrieved values as the dictionary's values.

			"""


		def add_acoustic_panels(acoustic_panels):

			"""

			Add Sonate acoustic panels.


			@acoustic_panels object: A list of acoustic panels to be added in sonate loadcase.

			"""


		def remove_acoustic_panels(acoustic_panels):

			"""

			Remove Sonate acoustic panels.


			@acoustic_panels object: A list of acoustic panels to be removed from sonate loadcase.

			"""


		def get_acoustic_panels():

			"""

			Get Sonate acoustic panels.


			@returns object: A list of acoustic panels of sonate loadcase.

			"""


		def add_couplings(couplings):

			"""

			Add Sonate couplings.


			@couplings object: A list of couplings to be added in sonate loadcase.

			"""


		def remove_couplings(couplings):

			"""

			Remove Sonate couplings.


			@couplings object: A list of couplings to be removed from sonate loadcase.

			"""


		def get_couplings():

			"""

			Get Sonate couplings.


			@returns object: A list of couplings of sonate loadcase.

			"""


	class abaqus():

		steps = None
		"""
		A list of Abaqus Steps

		"""

		def new_step(name):

			"""

			Create an Abaqus Step


			@name string: (optional)Step name

			@returns object: The created Step

			"""


		def delete_step(step):

			"""

			Delete an Abaqus Step


			@step object: An Abaqus Step

			@returns object: Always returns None

			"""


		def get_entities():

			"""

			Get entities


			@returns object: A dictionary with key the entity and data its steps, *LOAD CASEs, or "Initial State" string

			"""


		def set_entities(entities):

			"""

			Set entities


			@entities object: A dictionary with key the entity and data its Steps, *LOAD CASEs or "Initial State" string

			"""


		def new_loadcase(step, name):

			"""

			Create a *LOAD CASE


			@step object: The step of the *LOAD CASE

			@name string: (optional)The name of the *LOAD CASE

			@returns object: The created *LOAD CASE

			"""


		def delete_loadcase(loadcase):

			"""

			Delete a *LOAD CASE


			@loadcase object: A *LOAD CASE entity

			@returns object: Always returns None

			"""


		def get_loadcases(step):

			"""

			Get *LOAD CASEs of a step


			@step object: A step entity

			@returns object: A list with the *LOAD CASEs of the specified step

			"""


		def move_step(step, new_pos):

			"""

			Move an Abaqus Step


			@step object: An Abaqus Step

			@new_pos integer: The new position of the step

			@returns object: Always returns None

			"""


	class marc():

		increments = None
		"""
		A list of Marc Increments

		"""

		def new_increment(name):

			"""

			Create a Marc Increment


			@name string: (optional)Increment name

			@returns object: The created Increment

			"""


		def copy_increment(increment):

			"""

			Copy a Marc Increment


			@increment object: The Marc Increment to copy.

			@returns object: The new Marc Increment

			"""


		def move_increment(increment, new_pos):

			"""

			Move a Marc Increment


			@increment object: The Marc Increment

			@new_pos integer: The new position of the Marc Increment

			@returns object: Always return None

			"""


		def delete_increment(increment):

			"""

			Delete a Marc Increment


			@increment object: The Marc Increment to delete

			@returns object: Always return None

			"""


		def get_entities(increment):

			"""

			Get entities of a Marc Increment


			@increment object: A Marc Increment

			@returns object: A list of tuples (entity, flag)

			"""


		def set_entities(increment, entities):

			"""

			Set entities of a Marc Increment


			@increment object: A Marc Increment

			@entities object: A list of entities or a list of tuples (entity, flag)

			@returns object: Always return None

			"""


	nastran_header = None
	"""
	Nastran Header entity.

	"""

	subcases_num = None
	"""
	Number of subcases.

	"""

	categories = None
	"""
	Categories of entities.

	"""

	has_common_subcase = None
	"""
	True if common subcase exists.

	"""

	loadcase_entity = None
	"""
	LOADCASE entity.

	"""

	def __init__(deck, entity):

		"""

		Object construction method.


		@deck integer: NASTRAN or ABAQUS

		@entity object: (optional)A Nastran Header, a Step Manager or a LOADCASE entity.
		If not given and deck is NASTRAN a new Nastran Header of type Loadcase is created.
		If not given and deck is ABAQUS a new Step Manager of type Loadcase is created.

		@returns object: Returns a Loadcase object.

		"""


	def new_subcase(name, common, title, subtitle, run_type, domain, steps_num, is_repcase, repcase_parent, subcase_id):

		"""

		Create a new subcase.


		@name string: (optional)Subcase Name.

		@common boolean: (optional)Set to True if you want to create a common subcase.

		@title string: (optional)Subcase Title.

		@subtitle string: (optional)Subcase Subtitle.

		@run_type string: (optional)Subcase Run Type.

		@domain string: (optional)Subcase Domain.

		@steps_num integer: (optional)The number of steps (SOL 400).

		@is_repcase boolean: (optional)Set to True if you want to create a REPCASE (SOL 101, 103)

		@repcase_parent integer: (optional)The subcase to which the REPCASE refers

		@subcase_id integer: (optional)Subcase id

		@returns integer: The index of the new subcase.

		"""


	def delete_subcase(subcase):

		"""

		Delete a subcase.


		@subcase integer: The index of the subcase. (0 for common subcase)

		"""


	def add_entity(entity, subcase, step):

		"""

		Add an entity to a loadcase or specific subcase.


		@entity object: The entity to add.

		@subcase integer: (optional)The index of the subcase in which the entity will be
		added (0 for common subcase). If not given, the entity
		will be added to the loadcase, but not to a specific subcase.

		@step integer: (optional)The index of the step (SOL 400).

		"""


	def remove_entity(entity, subcase, step):

		"""

		Remove an entity from the loadcase or a specific subcase.


		@entity object: The entity to remove.

		@subcase integer: (optional)The index of the subcase from which the entity will be
		removed (0 for common subcase). If not given, the entity
		will be removed from the loadcase and all subcases.

		@step integer: (optional)The index of the step (SOL 400).

		"""


	def get_entities(subcase, category, step):

		"""

		Get the entities of the loadcase or a specific subcase.


		@subcase integer: (optional)The index of a specific subcase (0 for common subcase).
		If not given, all the entities of the loadcase are returned.

		@category string: (optional)The category of the entities. Available options:
		"boundary_conditions", "output_requests",
		"modes_definition", "panels", "time_step", 
		"frequency_range", "contacts", "control_parameters".
		If not given, entities from all categories are returned.

		@step integer: (optional)The index of the step (SOL 400).

		@returns object: A list of entities.

		"""


	def modify_subcase(subcase, name, title, subtitle, run_type, domain, subcase_id, active):

		"""

		Modify a subcase.


		@subcase integer: The index of the subcase (0 for common subcase).

		@name string: (optional)Subcase Name.

		@title string: (optional)Subcase Title.

		@subtitle string: (optional)Subcase Subtitle.

		@run_type string: (optional)Subcase Run Type.

		@domain string: (optional)Subcase Domain.

		@subcase_id integer: (optional)Subcase id

		@active boolean: (optional)Set subcase active

		"""


	def info_subcase(subcase, fields):

		"""

		Get information about a subcase.


		@subcase integer: The index of the subcase (0 for common subcase).

		@fields object: A tuple of strings. Available fields are: "name", "title",
		"subtitle", "run_type", "domain", "subcase_id", "active".

		@returns object: A dictionary with the requested fields as keys and values.

		"""


	def apply():

		"""

		Apply all items used (active) by loadcase subcases.


		"""


	def save_template(filename):

		"""

		Save a loadcase template.


		@filename string: The name of the new file with which the current 
		loadcase template is going to be saved.

		@returns integer: Returns 0 if the file has been successfully saved and 1 otherwise.

		"""

class CompareTool:

	"""

	The comparison object, which is created through this class, provides access to the Compare Tool functionality through
	script. A comparison object can be created either by specifying two models to be compared or by opening the comparison
	results which are stored in an *.ansa_compare file. When the comparison object is created by specifying two models, the
	run() method should be executed to compare the defined models. In both cases, the user is able to:
	
	- launch the Compare Tool and show the comparison results list,
	- save the comparison results in an *.ansa_compare file,
	- generate a report with the identified differences in PDF, PPTX, XLSX, and CSV formats, and
	- get the matched parts (with and without diffs) of the models which have been compared.
	
	The initial values of the class members below are specified through ANSA.defaults. The "Keyword" and the "Default Value"
	in ANSA.defaults are presented for each member.

	"""


	working_directory = None
	"""
	The full path of the directory where all the files, which are
	generated throughout the comparison process, are exported. (Keyword:
	"Compare_Working_Directory" - Default Value: 'Temp' folder in the
	user's home directory).

	"""

	geometry_matching_parts_mode = None
	"""
	Defines how the parts are matched. The accepted values are:
	- 'MATCH_BASED_ON_MODULE_ID' where parts are matched by their
	Module Id, and in case of failure, they are matched by their Name,
	- 'MATCH_BASED_ON_GEOMETRY' where parts located in similar position
	are matched by their Geometry, and
	- 'MATCH_BASED_ON_ID_AND_GEOM' where parts are matched by their
	Module Id/Name, and in case of failure, they are matched by their
	Geometry.
	(Keyword: "Matching_Part_Options" - Default Value: 'MATCH_BASED_ON_ID_AND_GEOM').

	"""

	geometry_matching_distance = None
	"""
	The maximum distance between two areas in order to be considered
	as similar. (Keyword: "Geometry_Matching_Distance" - Default Value: 0.5).

	"""

	geometry_similarity_factor = None
	"""
	The threshold of the overlap (%) between two areas in order to be
	considered as identical. (Keyword: "Geometry_Matching_Similarity" -
	Default Value: 90)

	"""

	geometry_compare_skinned_with_solid = None
	"""
	defines whether a skinned representation is compared with a solid
	(3D) description (True) or two solid (3D) models are compared
	(False). (Keyword: "Geometry_Compare_Middle_With_Skin" - Default Value: True)

	"""

	geometry_compare_shell_thickness = None
	"""
	defines whether the shell thickness is considered in the geometrical
	comparison (True) or not (False). (Keyword: "Geometry_Compare_To_Thickness" - Default Value: False)

	"""

	geometry_check_bounds = None
	"""
	defines whether the bounds are checked and compared in the
	geometrical comparison (True) or not (False). (Keyword: "Geometry_Check_Bounds" - Default Value: True)

	"""

	geometry_check_single_bounds = None
	"""
	defines whether the single (red) bounds are checked and compared in
	the geometrical comparison (True) or not (False). (Keyword:
	"Geometry_Check_Single_Bounds" - Default Value: True)

	"""

	geometry_check_double_triple_bounds = None
	"""
	defines whether the double (yellow) and triple (cyan) bounds are
	checked and compared in the geometrical comparison (True) or not
	(False). (Keyword: "Geometry_Check_Double_Triple_Bounds" - Default Value: False).

	"""

	geometry_allow_different_bounds_matching = None
	"""
	defines whether different types of bounds are allowed to be matched
	(True) or not (False). (Keyword: "Geometry_Allow_Different_Bounds_Matching" - Default Value: False).

	"""

	connections_points_distance = None
	"""
	is the threshold used for the matching of connection points. It is
	calculated based on the distance between the projections of the
	connection points. (Keyword: "Connections_Matching_Distance" -
	Default Value: 10)

	"""

	connections_average_thickness_factor = None
	"""
	is the threshold used for the matching of connection points. It is
	calculated as a factor of the average thickness of the parts which
	are connected by the connection points. (Keyword: "Connections_Average_Thickness" - Default Value: 0.5)

	"""

	connections_matching_distance = None
	"""
	is the maximum distance between two connection curves or faces in
	order to be considered as similar. (Keyword: "Connections_Faces_Matching_Distance" - Default Value: 0.5)

	"""

	connections_similarity_factor = None
	"""
	is the threshold of the overlap (%) between two connection curves or
	faces in order to be considered as identical. (Keyword:
	"Connections_Matching_Similarity" - Default Value: 90)

	"""

	connections_equivalent_connectivity = None
	"""
	defines whether the connections should have equivalent connectivity
	in order to be matched (True) or not (False). (Keyword:
	"Connections_Equiv_Connectivity_check" - Default Value: False)

	"""

	connections_same_type = None
	"""
	defines whether the connections should be of the same type in order
	to be matched (True) or not (False). (Keyword: "Connections_Same_Types_check" - Default Value: False)

	"""

	report_types = None
	"""
	is a list with the types of the created report. The accepted types
	are 'PDF', 'PPTX', 'XLSX', and 'CSV'. (Keywords: "Export_PDF_Report", "Export_PPTX_Report", "Export_XLSX_Report", and "Export_CSV_Report" - Default Value: ['PDF'])

	"""

	report_filename = None
	"""
	is the name of created report. (Default Value: 'compare_report')

	"""

	report_exporting_directory = None
	"""
	is the directory where the created report and all the related files
	are exported. (Keyword: "Export_Report_Dir" - Default Value: 'Temp'
	folder in the user's home directory)

	"""

	report_visible_list = None
	"""
	defines whether only the isolated entities in the Compare Report
	list (True) or all the entities are included in the created report
	(False). (Keyword: "Export_visible_list" - Default Value: False)

	"""

	report_geometry_info = None
	"""
	defines whether the differences in parts are included in the created
	report (True) or not (False). (Keyword: "Export_geometry_in_report"
	- Default Value: True)

	"""

	report_matched_parts_no_differences = None
	"""
	defines whether the matched parts without differences are included in
	created report of type XLSX/CSV (True) or not (False). (Keyword:
	"Export_matched_parts_no_differences" - Default Value: False)

	"""

	report_unmatched_parts = None
	"""
	defines whether the differences in unmatched parts are included in
	created report (True) or not (False). (Keyword: "Export_unmatched_parts" - Default Value: False)

	"""

	report_model_images_per_diff = None
	"""
	defines the layout of the created report. The accepted values are:
	- 'PAIR_OF_PICS' the models are displayed in two separate images,
	- 'SINGLE_PIC' the models are displayed overlapped in same image,
	- 'BOTH_SINGLE_AND_PAIR' the models are displayed both in two
	separate images and overlapped in a single image,
	- 'NO_PIC' where no model images are included in the created report.
	(Keyword: "Num_of_pics_per_diff" - Default Value: 'BOTH_SINGLE_AND_PAIR')

	"""

	report_3d_model = None
	"""
	defines whether the common display of the models is presented in 3D
	(True) or in 2D (False) representation. (Keyword: "Export_MetaDB" -
	Default Value: True)

	"""

	report_part_location_in_model = None
	"""
	defines whether the images of the part's location in the model are
	included in the created report (True) or not (False). (Keyword:
	"Show_part_location_in_model" - Default Value: True)

	"""

	report_connections_info = None
	"""
	defines whether the differences in connections are included in the
	created report (True) or not (False). (Keyword: "Export_connections_in_report" - Default Value: False)

	"""

	report_unmatched_connections = None
	"""
	defines whether the differences in unmatched connections are
	included in the created report (True) or not (False). (Keyword:
	"Export_unmatched_connections" - Default Value: False)

	"""

	report_ansa_post_script = None
	"""
	is the full path of the script which is used for the creation of the
	XLSX and the CSV reports. (Keyword: "Ansa_Script_File" - Default
	Value: '$ANSA_EXEC_DIR/scripts/General/CompareReportList.pyb')

	"""

	report_meta_executable_path = None
	"""
	is the full path of the META executable which is used for the
	creation of the PDF and the PPTX reports. (Keyword: "Metapost_Command" - Default Value: The path of META executable)

	"""

	report_meta_post_arguments = None
	"""
	defines the additional command line arguments which should be passed
	to META for the compilation of the PDF and the PPTX reports.
	(Keyword: "Metapost_Arguments" - Default Value: Blank)

	"""

	report_meta_post_script = None
	"""
	is the full path of the script which is used for the creation of the
	PDF and the PPTX reports. (Keyword: "Meta_Script_File" - Default
	Value: '$ANSA_EXEC_DIR/scripts/General/CompareReport.pyb')

	"""

	report_run_meta_in_batch_mode = None
	"""
	defines whether META runs in batch mode (True) or GUI is launched
	(False) during the compilation of the PDF and PPTX reports.
	(Keyword: "Meta_Batch_Mode" - Default Value: True)

	"""

	report_keep_current_visibility_settings = None
	"""
	defines whether the current visibility settings are used (True) or
	not (False) when the pictures are taken. (Keyword: "Keep_current_visibility_settings" - Default Value: False)

	"""

	report_model_transparency = None
	"""
	is the level of transparency in the images of part's location in
	model. (Keyword: "Level_of_transparency" - Default Value: 90)

	"""

	report_image_width = None
	"""
	is the width of all the exported images. (Keyword: "Photo_width" -
	Default Value: 1024)

	"""

	report_image_height = None
	"""
	is the height of all the exported images. (Keyword: "Photo_height" -
	Default Value: 768)

	"""

	report_image_view_type = None
	"""
	defines the view type of the images in order to display as much
	geometrical differences as possible. The accepted values are
	'DEFAULT' and 'BEST'. (Keyword: "Set_export_pictures_view_type" -
	Default Value: 'DEFAULT')

	"""

	report_image_background = None
	"""
	defines the background color of the images. The accepted values are
	'WHITE', 'TRANSPARENT', and 'CURRENT'. (Keyword: "Set_export_pictures_background" - Default Value: 'WHITE')

	"""

	geometry_expand_differences_to_common_bounds = None
	"""
	defines whether geometric differences will be expanded until common bounds between Model 1 and Model 2 are found. This option improves the result of 'apply_similarities_differences' resulting in better topology. ((Keyword: "Geometry_Expand_Differences_To_Common_Bounds" - Default Value: False)

	"""

	def run(comparison_scenario):

		"""

		Execute the specified comparison scenario between the defined Model_01 and Model_02 according to the criteria specified through the comparisonobject's attributes (please check the class members which start with"geometry" and "connections" prefixes).


		@comparison_scenario string: (optional)Defines the comparison scenario which is executed. The accepted values are:
		- 'GEOMETRY' to identify the differences only in parts.
		- 'CONNECTIONS' to identify the differences only in connections.
		- 'GEOMETRY_AND_CONNECTIONS' to identify the differences only in parts and connections.
		- 'FULL_COMPARISON' to identify all the differences in the models.
		(Default Value: 'FULL_COMPARISON').

		"""


	def show_results(results_filter_name):

		"""

		Launch the Compare Tool window to display the comparison results. A pre-defined filter can be optionally set and applied on the results list.


		@results_filter_name string: (optional)The name of a pre-defined filter which is applied on the
		Compare Report list. (Keyword: "CURRENT_ADVANCED_FILTER_CONFIGURATION" - Default Value: 'Default')

		"""


	def generate_report():

		"""

		Create a report with the identified differences according to the specifications defined through the comparison object's attributes (please check the class members which start with the "report" prefix).


		"""


	def save(filename):

		"""

		Save the comparison results in an .ansa_compare file.


		@filename string: The full path of the *.ansa_compare file where the comparison results are stored.

		"""


	def get_matched_parts():

		"""

		get the matched parts/groups (with and without diffs) of the comparison process.


		@returns object: return a dictionary with keys the objects of the parts/groups which have been matched in Model_01 and values the objects of their matching parts/groups in Model_02 {'object_of_part_in_Model_01' : 'object_of_matching_part_in_Model_02'}.

		"""


	def get_part_differences(part):

		"""

		get the identified differences on a part/group.


		@part object: is the part/group where the differences have been identified.

		@returns object: returns an object of objects (one object for each category of differences). The "geometry" object includes the geometrical differences and it has the "percentage" attribute, which is the differences percentage (float) of the part, and the "entities" attribute, which is a list of lists which include the identified different faces and shells (the faces and shells are automatically organized into lists through the Connectivity Groups function). The "attributes" object is a dictionary with keys the part/group attributes where differences have been identified and values the respective part/group attribute values.

		"""


	def modify_geometrical_differences(part, entities_to_add, entities_to_remove):

		"""

		Add and/or remove entities (faces/shells) from the identified geometrical differences of a part.


		@part object: The part where the modification is applied.

		@entities_to_add object: (optional)A list with the entities (faces/shells) which should be added to the identified geometrical differences.

		@entities_to_remove object: (optional)A list with the entities (faces/shells) which should be removed from the identified geometrical differences.

		"""


	def apply_similarities_differences(parts, model, entities_to_replace, properties_to_keep, treat_target_perimeters_as_frozen, face_macro_mode, mesh_action_on_macros_release, undelete_original_faces, properties_matching, paste_red_bounds):

		"""

		Apply the identified similar or different entities from a list of parts in Model 1/2 to their matching parts in Model 2/1 respectively.


		@parts object: A list of part objects where the function is applied.

		@model string: Define if the identified similar/different entities are transferred from Model 1 ('MODEL_1') or Model 2 ('MODEL_2').

		@entities_to_replace string: Define if the similar ('SIMILAR') or the different ('DIFFERENT') entities are replaced.

		@properties_to_keep string: (optional)Define if the properties of the incoming ('KEEP_NEW') or the outgoing ('KEEP_OLD') entities are kept.

		@treat_target_perimeters_as_frozen boolean: (optional)Define if the perimeters of the Model where the similarities / differences will be applied will be frozen (True) or not (False). Default is False. Note that if set to to True and the perimeters to be pasted are incompatible, paste will fail.

		@face_macro_mode string: (optional)Available values are "FACE", "MACRO". If set to "FACE", the function will work on face level and any joined CONS will be released. If set to "MACRO", the entire macro will be applied. Default is "FACE".

		@mesh_action_on_macros_release string: (optional)Available values are "ERASE", "RECONSTRUCT", "REMESH", "KEEP". Define the action on the mesh if joined CONS need to be released. Default is "ERASE".

		@undelete_original_faces boolean: (optional)Define if outgoing Faces will be recoverable through Faces>Undelete. Default is False.

		@properties_matching string: (optional)Available values are "NAME_ID", "NAME", "ID". Define how incoming properties will be merged with outgoing. If "NAME_ID" is set, an incoming property will be merged with an outgoing if either the Name or the ID match. If "NAME" is set, merging will take place only for properties with the same Name. If "ID" is set, merging will take place only for properties with the same ID. Default is "NAME_ID".

		@paste_red_bounds boolean: (optional)If True, single Cons of Model 1 and / or Model 2 will be pasted to any matching neighbouring Cons. Default is False.

		@returns integer: Returns 0 if no entities were applied, or 1 otherwise.

		"""


	def open(filename):

		"""

		Open the comparison results which are stored in an .ansa_compare file.


		@filename string: The full path of the *.ansa_compare file where the comparison results are stored.

		@returns object: Returns a comparison object/instance.

		"""


	def __init__(model1, model2):

		"""

		CompareTool constructor


		@model1 object: The first model object to compare

		@model2 object: The second model object to compare

		"""


	def apply_mesh(parts, model):

		"""

		Copies the mesh from one Model onto the other


		@parts object: A list of part objects where the function is applied.

		@model string: Define if the mesh is transferred from Model 1 ('MODEL_1') or Model 2 ('MODEL_2').

		@returns object: A dictionary with the following keys:'source_succeeded_macros' is a list with the input meshed macros whose mess got transferred successfully, 'target_succeeded_macros'is a list with the target meshed macros that successfully received the mesh, 'source_failed_macros' is a list with the input meshed macros whose mesh failed to be transferred and 'target_failed_macros' is a list with the target macros that failed to be meshed.

		"""

class SearchByProximityTool():

	"""

	The SearchByProximityTool is a module that enables the search of items that are proximal to a list of input items,
	according to their position.
	
	The module is initialized by defining:
	1. The source items, i.e., the items whose proximal items we seek (acceptable types are: parts, groups, Subsystems, server ids, and boxes).
	2. The target items, i.e., the candidate items that will take part in the search (acceptable types are: parts, groups, Subsystems and server ids).
	3. The tolerance, i.e., the maximum allowed distance between two items in order to be considered proximal.
	
	The module returns the list of proximal items, i.e., the subset of target items that are proximal to the source items.

	"""


	tolerance = None
	"""
	(INPUT) The maximum allowed distance between two items in order to be considered 
	proximal. 'tolerance' should take positive float values.
	The default value is 0.

	"""

	source_entities = None
	"""
	(INPUT) The list of ANSA entities whose proximal items we seek. 
	Available types are: 'parts', 'groups', and 'Subsystems'. 
	The source entities position information is taken either from the current ANSA model or 
	the DM, according to the value of the flags 'should_search_in_model' and 
	'should_search_in_DM'.
	This member is optional if 'source_server_ids' or 'source_boxes' are defined.

	"""

	source_server_ids = None
	"""
	(INPUT) The list of server ids whose proximal items we seek.
	This member is optional if 'source_entities' or 'source_boxes' are defined.

	"""

	source_boxes = None
	"""
	(INPUT) The list of boxes whose proximal items we seek.
	A box is defined by its main diagonal as a list of 6 floats in the form: 
	[mixx, miny, minz, maxx, maxy, maxz].
	This member is optional if 'source_entities' or 'source_server_ids' are defined.

	"""

	target_entities = None
	"""
	(INPUT) The list of ANSA entities that will be searched.
	Available types are: parts, groups, and Subsystems.
	The target entities position information is taken either from the current ANSA model or 
	the DM, according to the value of the flags 'should_search_in_model' and 
	'should_search_in_DM'.
	This member is optional if 'target_server_ids' is defined.

	"""

	target_server_ids = None
	"""
	(INPUT) The list of server ids that will be searched.
	This member is optional if 'target_entities' is defined.

	"""

	should_search_in_model = None
	"""
	(INPUT) This flag, in combination with the flag 'should_search_in_DM' regulates if the 
	position information of the ANSA entities defined in 'source_entities' and 
	'target_entities' will be calculated from the current ANSA model or the DM.
	This flag is valid only if 'source_entities' or 'target_entities' are defined.
	The default value is True.
	See the REMARKS for mode information.

	"""

	should_search_in_dm = None
	"""
	(INPUT) This flag, in combination with the flag 'should_search_in_model' regulates if 
	the position information of the ANSA entities defined in 'source_entities' and 
	'target_entities' will be calculated from the current ANSA model or the DM.
	This flag is valid only if 'source_entities' or 'target_entities' are defined.
	The default value is False.
	See the REMARKS for mode information.

	"""

	proximal_entities = None
	"""
	(OUTPUT) A subset of the 'target_entities' that are proximal to the source data.
	'proximal_entities' are available only if 'target_entities' are defined.

	"""

	proximal_server_ids = None
	"""
	(OUTPUT) A subset of the 'target_server_ids' that are proximal to the source data.
	'proximal_server_ids' are available only if 'target_server_ids' are defined.

	"""

	error_messages = None
	"""
	(OUTPUT) The list of error messages returned by the run() method. 
	In case of no errors, it returns an empty string.

	"""

	def run():

		"""

		This method executes the SearchByProximity job.


		"""

class DBStorage():

	"""

	With the DBStorage object the user can save data in the ANSA database in a key-value manner.
	This object is accompanied by a GUI which can be found in Utilites > User Storage:Database.
	
	DBStorage is a unique object (singleton) in the program, every DBStorage instance points to the same object.

	"""


	def clear_contents():

		"""

		Clears the contents of the User Storage:Database.


		@returns object: Always returns None.

		"""


	def contains(key):

		"""

		Searches for a particular key in the User Storage:Database.


		@key string: The key that will be searched for inside the User Storage:Database.

		@returns boolean: True if the key is found else, it returns False.

		"""


	def contents():

		"""

		et all contents of the User Storage:Database.


		@returns object: Returns a dictionary object with the keys and the values that are stored inside User Storage:Database, or None if User Storage:Database is empty.

		"""


	def get(key, default):

		"""

		Retrieve the value of a particular key from the User Storage:Database.


		@key string: The key that will be retrieved from the User Storage:Database.

		@default object: (optional)A value that will be returned if the key is not found in User Storage:Database.

		@returns object: On success, returns the value that is stored under the given key. On failure returns the given value if provided. Else, returns None.

		"""


	def remove(key, default):

		"""

		Remove a particular key record from the User Storage:Database.


		@key string: The key that will be removed from the User Storage:Database.

		@default object: (optional)A value that will be returned if the key is not found in User Storage:Database.

		@returns object: On success, it returns the value that was stored under the given key. On failure, it returns the given value if provided, otherwise it raises a KeyError exception.

		"""


	def set(key, value):

		"""

		Set a new value in the User Storage:Database under a given key.


		@key string: The key that will be used to store the value inside User Storage:Database.

		@value object: The value that will be stored under the key in User Storage:Database.
		It can be:
		-string
		-int
		-double
		-bytes
		-list of Entities

		@returns object: If the key already exists in User Storage:Database returns an object that contains its prior value.Else, it returns None.

		"""

class ImportV1():

	"""

	With ImportV1 the user can import whichever FE format into ANSA in a very fast way.
	The API supports creation of Nodes, Shells and Solids (1st and 2nd order), Shell Properties and Solid Properties.

	"""


	nodes = None
	"""
	Returns a list with the created Nodes or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	shells = None
	"""
	Returns a list with the created 1st order Shells or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	shells2 = None
	"""
	Returns a list with the created 2nd order Shells or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	solids = None
	"""
	Returns a list with the created 1st order Solids or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	solids2 = None
	"""
	Returns a list with the created 2nd order Solids or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	pshells = None
	"""
	Returns a list with the created Shell Properties or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	psolids = None
	"""
	Returns a list with the created Solid Properties or None if there aren't any created.
	This member is accessible only between build() and finish().

	"""

	TRIA = None
	"""
	Denotes TRIA shell type.

	"""

	QUAD = None
	"""
	Denote Quad shell type.

	"""

	TRIA6 = None
	"""
	Denote TRIA6 shell type.

	"""

	QUAD8 = None
	"""
	Denote QUAD8 shell type.

	"""

	TETRA = None
	"""
	Denote TETRA shell type.

	"""

	PENTA = None
	"""
	Denote PENTA shell type.

	"""

	HEOP = None
	"""
	Denote HEOP shell type.

	"""

	HEXA = None
	"""
	Denote HEXA shell type.

	"""

	TETRA2 = None
	"""
	Denote TETRA2 shell type.

	"""

	PENTA2 = None
	"""
	Denote PENTA2 shell type.

	"""

	HEXA2 = None
	"""
	Denote HEXA2 shell type.

	"""

	HEOP2 = None
	"""
	Denote HEOP2 shell type.

	"""

	def start():

		"""

		Start import.


		@returns object: Always returns None.

		"""


	def create_nodes(id, x, y, z):

		"""

		Create Nodes with the read data.


		@id object: A list with the Node ids.

		@x object: A list with the x coordinates.

		@y object: A list with the y coordinates.

		@z object: A list with the z coordinates.

		@returns object: Always returns None.

		"""


	def create_shells(id, type, pid, node1, node2, node3, node4):

		"""

		Create 1st order Shells with the read data.


		@id object: A list with the Shell ids.

		@type object: A list with the Shell types.
		
		Available types are:
		-ImportV1.TRIA
		-ImportV1.QUAD

		@pid object: A list with the Shell Property ids.

		@node1 object: A list with the node1 ids.

		@node2 object: A list with the node2 ids.

		@node3 object: A list with the node3 ids.

		@node4 object: A list with the node4 ids.

		@returns object: Always returns None.

		"""


	def create_shells2(id, type, pid, node1, node2, node3, node4, node5, node6, node7, node8):

		"""

		Create 2nd order Shells with the read data.


		@id object: A list with the Shell ids.

		@type object: A list with the Shell types.
		
		Available types:
		-ImportV1.TRIA6
		-ImportV1.QUAD8

		@pid object: A list with the Shell Property ids.

		@node1 object: A list with the node1 ids.

		@node2 object: A list with the node2 ids.

		@node3 object: A list with the node3 ids.

		@node4 object: A list with the node4 ids.

		@node5 object: A list with the node5 ids.

		@node6 object: A list with the node6 ids.

		@node7 object: A list with the node7 ids.

		@node8 object: A list with the node8 ids.

		@returns object: Always returns None.

		"""


	def create_solids(id, type, pid, node1, node2, node3, node4, node5, node6, node7, node8):

		"""

		Create 1st order Solids with the read data.


		@id object: A list with the Solid ids.

		@type object: A list with the Solid types.
		
		Available types are:
		-ImportV1.TETRA
		-ImportV1.PENTA
		-ImportV1.HEOP
		-ImportV1.HEXA

		@pid object: A list with the Solid Property ids.

		@node1 object: A list with the Solid node1 ids.

		@node2 object: A list with the Solid node2 ids.

		@node3 object: A list with the Solid node3 ids.

		@node4 object: A list with the Solid node4 ids.

		@node5 object: A list with the Solid node5 ids.

		@node6 object: A list with the Solid node6 ids.

		@node7 object: A list with the Solid node7 ids.

		@node8 object: A list with the Solid node8 ids.

		@returns object: Always returns None.

		"""


	def create_solids2(id, type, pid, node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13, node14, node15, node16, node17, node18, node19, node20):

		"""

		Create 2nd order Solids with the read data.


		@id object: A list with the Solid ids.

		@type object: A list with the Solid types.
		
		Available types are:
		-ImportV1.TETRA2
		-ImportV1.PENTA2
		-ImportV1.HEOP2
		-ImportV1.HEXA2

		@pid object: A list with the Solid Property ids.

		@node1 object: A list with the node1 ids.

		@node2 object: A list with the node2 ids.

		@node3 object: A list with the node3 ids.

		@node4 object: A list with the node4 ids.

		@node5 object: A list with the node5 ids.

		@node6 object: A list with the node6 ids.

		@node7 object: A list with the node7 ids.

		@node8 object: A list with the node8 ids.

		@node9 object: A list with the node9 ids.

		@node10 object: A list with the node10 ids.

		@node11 object: A list with the node11 ids.

		@node12 object: A list with the node12 ids.

		@node13 object: A list with the node13 ids.

		@node14 object: A list with the node14 ids.

		@node15 object: A list with the node15 ids.

		@node16 object: A list with the node16 ids.

		@node17 object: A list with the node17 ids.

		@node18 object: A list with the node18 ids.

		@node19 object: A list with the node19 ids.

		@node20 object: A list with the node20 ids.

		@returns object: Always returns None.

		"""


	def create_shell_properties(id, thickness):

		"""

		Create Shell Properties with the read data.


		@id object: A list with the Shell Property ids.

		@thickness object: (optional)A list with the Shell Property thicknesses.

		@returns object: Always returns None.

		"""


	def create_solid_properties(id):

		"""

		Create Solid Properties with the read data.


		@id object: A list with the Solid Property ids.

		@returns object: Always returns None.

		"""


	def build():

		"""

		Build the model with the previously created entities.


		@returns object: Always returns None.

		"""


	def finish():

		"""

		Finish the import procedure.


		@returns object: Always returns None.

		"""

class FringeDrawMode():

	"""

	The FringeDrawMode object creates a custom fringe drawing style in order to alter the view of the model.
	It affects Shells, Solids, Solid Facets and Nodal results.
	
	Each FringeDrawMode is defined by its name and can hold a single fringe. All the created FringeDrawModes 
	appear in the Fringe button of the Drawing Styles toolbar along with their names. They can be enabled/disabled 
	manually just like the native Fringe Draw Modes. Color bar options are applied to them as well.
	
	By default the FringeDrawMode will be visible in the deck being current when created.
	To define manually the decks use FringeDrawMode.deck_visibility() method.
	
	The Fringe values will be automatically recalculated when needed e.g. a Shell is created or deleted. 
	Depending on the calculations this may not always be possible. In this case you can use the static method 
	FringeDrawMode.recalculate() to force recalculation.
	
	The programmer may create many FringeDrawModes and allow the control to return to ANSA.
	A FringeDrawMode stays alive for the whole ANSA session unless deleted by the programmer.

	"""


	_name = None
	"""
	The name of the FringeDrawMode.

	"""

	def __init__(name, icon):

		"""

		FringeDrawMode object constructor.


		@name string: The name of the FringeDrawMode. If you call the 
		constructor with a name that already exists the existing 
		object will be returned.

		@icon string: (optional)The path for the icon to be displayed next to the 
		FringeDrawMode name in the Fringe button popup.
		By default no icon will be displayed.

		@returns object: Returns the created FringeDrawMode object.

		"""


	def enable():

		"""

		Enable the FringeDrawMode. The model is drawn with the values of the programmer.


		@returns object: Always returns None.

		"""


	def disable():

		"""

		Disable the FringeDrawMode. The model is now drawn with the previous draw mode (ENT, PID, MID ...).


		@returns object: Always returns None.

		"""


	def fringe(deck, element_type, mode, draw):

		"""

		This functions supplies all the necessary data to calculate the fringe values.


		@deck constant: The deck in which the FringeDrawMode will appear.

		@element_type object: The element type whose field values will be used for the Fringe calculations.
		It can be retrieved from the title of the elements edit card, where it is 
		displayed within brackets.
		It can be either a single string or a list with strings.

		@mode string: The mode is where drawing will take place.
		Valid values are:
		-'element', to draw shells, solids or solid facets.
		-'node', to draw shells with gradient.
		-'shell_top_bottom', to draw on shells with a different color on each side.

		@draw object: A callable object. It must have implemented the __init__, 
		start, end and __call__ functions.
		
		The object must have a values dictionary member. Key 
		will be the element and data its fringe value.
		
		__init__ is the constructor. You can use it to pass data 
		from main() to be used in the calculations.
		
		start() You can use it to initialize anything you want 
		before procceeding to the calculations. The values 
		dictionary must be cleared here.
		
		__call__ The calculations for each element will be done 
		here. This function runs for every entity with type 
		element_type of the model. Here you must assign a 
		value to the element you want to be drawn.
		
		end() You can use to free your data. The values 
		dictionary must be returned here.
		
		class Draw():
		        def __init__(self, deck):
		                self.values = {}
		                self.deck = deck
		        def start(self):
		                self.values.clear()
		        def end(self):
		                return self.values
		        def __call__(self, entity):
		                self.values[entity] = entity._id % 2

		@returns object: Always returns None.

		"""


	def delete():

		"""

		Delete the FringeDrawMode. When a FringeDrawMode is deleted, the application will revert to the previous drawing style.


		@returns object: Always returns None.

		"""


	def recalculate():

		"""

		Force recalculation of the fringe bar values. This is a staticmethod it can be called either on the class (such as ansa.base.FringeDrawMode.recalculate()) or on an instance (such as ansa.base.FringeDrawMode('MyFringeDrawMode').recalculate()).


		@returns object: Always returns None.

		"""


	def deck_visibility(decks):

		"""

		Control in which decks the FringeDrawMode will be visibile.


		@decks object: Decks can be either a list with decks or 'all' to massively 
		make the FringeDrawMode visible in all decks.

		@returns object: Always returns None.

		"""

class PLMXMLFileHandlingInfo():

	"""

	The objects of this class describe how a group of files (as identified by their
	extension) will be handled during PLM XML export.

	"""


	extension = None
	"""
	File extension identifying which files these rules apply to.
	The wildcard characters * (zero or more of any character) and
	? (any character) can be used in order to express more 
	versatile extension patterns.

	"""

	dataset_type = None
	"""
	Value to insert as attribute 'type' in <DataSet> elements.

	"""

	assoc_dataset_role = None
	"""
	Value to insert as attribute 'role' in <AssociatedDataSet>
	elements.

	"""

	def __init__(extension, dataset_type, associated_dataset_role):

		"""


		@extension string

		@dataset_type string

		@associated_dataset_role string

		"""

class PLMXMLEngineSettings:

	"""

	The objects of this class hold settings of the PLMXML engine, used during exporting.

	"""


	export_user_attributes = None
	"""
	Describes if the user attributes of the exported parts
	should be included in the PLMXML file (within UserData
	elements).
	(Default value: True)

	"""

	convert_part_names = None
	"""
	Describes whether the Part names should be transformed
	during export: if the Module ID + Version appear as prefix
	(underscore as separators), then they will be trimmed from
	the Part name in the PLMXML file.
	(Default value: True)

	"""

	rename_flattened_files = None
	"""
	Describes whether the file that are flattened should be
	renamed or not.
	(Default value: True)

	"""

	skip_save = None
	"""
	Describes whether the in-memory representations of the
	output part should be saved, or files should be directly
	looked up in the current DMs.
	(Default value: False)

	"""

	skip_download = None
	"""
	Describes whether the part related files should be downloaded
	from the DM, or should be referenced in the PLMXML file without
	actually being downloaded. If this option is set, it is expected 
	that the actual files will be provided via an external mechanism.
	(Default value: False)

	"""

	fallback_file_attr = None
	"""
	Describes which entity attribute should be queried for the file
	placeholder in the PLMXML file, in case both Save / Download are
	to be skipped and the part could not be found in the DM.
	(Default value: Empty)

	"""
class FeatureHandler():

	"""

	The FeatureHandler object provides functionality to handle ANSA Features.
	It can be used via script in both GUI and no-GUI mode.

	"""


	class fasteners():

		def design_remove(features, holes, faces, create_points, create_curves):

			"""

			Removes Fasteners and treats embedded ones.


			@features object: The Fastener entities to be removed.

			@holes string: The treatment to be applied on the holes left when embedded Fasteners are removed. Available values are 'keep' and 'fill'. 'fill' creates new geometry to fill the hole completely. 'keep' preserves the hole and creates new geometry to fix the red bounds created by the detachment of the embedded Fasteners.

			@faces string: Available values are 'keep' and 'delete'. 'delete' deletes the Fastener and its contents. 'keep' preserves the Fastemer contents.

			@create_points boolean: (optional)If True, 3D points are created at the center of embedded Fastener holes. The default value is False. This option is applicable only on embedded Fasteners.

			@create_curves boolean: (optional)If True, Curves are created at the perimeters of embedded Fastener holes. The default value is False. This option is applicable only on embedded Fasteners.

			@returns object: Returns a dict with the following keys:'failed_features' contains a list of the embedded Fasteners that could not be removed.'faces' contains a dict with all the removed Fastener contents. The Fastener entity ID is set as key and a list with the Fastener faces is set as data. This dict is returned only if 'faces' option is set to 'keep'.

			"""


		def assembly_create_connection(features, connection_type):

			"""

			Creates connection points for the given Fastener entities.


			@features object: The Fastener entities to create Connection Points for.

			@connection_type string: The available values are "spotweld point", "gum drop", "bolt", "robscan", "rivet", "screw".

			@returns object: Returns a list with the created connection points, in the order of the input features.

			"""


	class similarity_detector():

		def find_similar(features, feature_type):

			"""

			This function clusters geometrically similar Stamps and Fasteners.


			@features object: A list of Fastener objects, or Stamp objects.

			@feature_type string: The type of the features provided. Accepted values: "fastener", "stamp".

			@returns object: Returns a list of lists of features (Fasteners or Stamps, depending on the feature_type argument provided). Each list of features is a cluster.

			"""


	parts = None
	"""
	A list of parts.

	"""

	def __init__(parts):

		"""

		FeatureHandler object constructor.


		@parts object: A list of parts. Accepted values are a list of parts, "all", "visible".

		@returns object: Returns the created FeatureHandler object.

		"""


	def recognize(lock_fe_perimeters):

		"""

		This function recognizes features for the parts of the object, using the global meshing parameters.


		@lock_fe_perimeters boolean: (optional)Used to declare whether existing FE perimeters of object parts will be locked during recognition or not. The default value is set to False.

		@returns object: Always returns None.

		"""


	def clear(clear_fe_perimeters):

		"""

		This function clears features for the parts of the object.


		@clear_fe_perimeters boolean: Used to declare whether FE perimeters will also be cleared or not.

		@returns object: Always returns None.

		"""


	def get_features_of_part(part):

		"""

		This function returns the features for a part of the object.


		@part object: Used to determine which part's features will be returned.

		@returns object: Returns a list of features.

		"""


	def replace_contents_of_feature(feature, contents):

		"""

		This function replaces the contents of a feature (except holes) that belongs to a part of the object.


		@feature object: The feature whose contents will be replaced.

		@contents object: A list of entities that will be the new contents of feature.

		@returns object: Always returns none.

		"""


	def update():

		"""

		Update features characteristics (e.g. after modifying their geometry some characteristics slightly change).


		@returns object: Always returns none.

		"""

class ProductTree():

	"""

	An object that holds information of the parts in the input model definition.

	"""


	def get_parsed_file():

		"""

		Returns the parsed file.


		"""


	def get_all_part_ids():

		"""

		Returns a list with the ids of all parts in the tree. If no part is found, it returns an empty list.


		"""


	def get_all_part_attribute_values(part_id):

		"""

		Returns a dictionary will all attributes of the part with id = part_id. If the part has no attributes, it returns an empty dictionary. If the part does not exist it returns None.


		@part_id string: The identifier of the part.

		"""


	def get_part_attribute_value(part_id, attribute_name):

		"""

		Returns the value of 'attribute_name' of the part with id = part_id.If the part does not exist or it does not have an attribute with this name it returns None.


		@part_id string: The identifier of the part.

		@attribute_name string: The attribute name.

		"""


	def set_part_attribute_value(part_id, attribute_name, attribute_value):

		"""

		Sets the value of a specific attribute of part with id = part_id. The attributes that can be set are "Name", "Version", "Module Id" and any user defined attribute. 


		@part_id string: The identifier of the part.

		@attribute_name string: The attribute name.

		@attribute_value string: The new attribute value.

		@returns boolean: Returns True on success, False on failure, None if no part with id = part_id exists.

		"""


	def remove_part(part_id):

		"""

		Deletes the part with id = part_id from the product tree. 


		@part_id string: The identifier of the part.

		@returns boolean: Returns True on success, False on failure.

		"""


	def create_new_part_attribute(attribute_name):

		"""

		Creates a new part user attribute with name 'attribute_name'. 


		@attribute_name string: The new attribute name.

		@returns boolean: Returns True on success, False on failure.

		"""


	def get_part_file_ids_of_part(part_id):

		"""

		Returns a list with the ids of all part files. If the part with part_id does not exist, it returns None. If the part does not have any part files it returns an empty list.


		@part_id string: The identifier of the part.

		"""


	def get_all_part_file_ids():

		"""

		Returns a list with the ids of all part files in the tree. If no part file is found, it returns an emtpy list.


		"""


	def remove_part_file(part_file_id):

		"""

		Deletes the part file with id = part_file_id from the part and the tree. 


		@part_file_id string: The identifier of the part file.

		@returns object: Returns True on success, False on failure.

		"""


	def get_all_part_file_attribute_values(part_file_id):

		"""

		Returns a dictionary will all attributes of the part file with id = part_file_id. If the part file has no attributes it returns an empty dictionary. If the part file does not exist it returns None.


		@part_file_id string: The identifier of the part file.

		"""


	def set_part_file_attribute_value(part_file_id, attribute_name, attribute_value):

		"""

		Sets the value of a specific attribute of part file with id = part_file_id. The attributes we can set are "File Name", "Transformation Matrix", "Pid Offset" and any user defined attribute. 


		@part_file_id string: The identifier of the part.

		@attribute_name string: The attribute name.

		@attribute_value string: The new attribute value.

		@returns boolean: Returns True on success, False on failure, None if no part file with id = part_file_id exists.

		"""


	def get_part_file_attribute_value(part_file_id, attribute_name):

		"""

		Returns the value of 'attribute_name' of the part file with id = part_file_id. If the part file does not exist or it does not have an attribute with this name it returns None.


		@part_file_id string: The identifier of the part file

		@attribute_name string: The attribute name

		"""


	def create_new_part_file_attribute(attribute_name):

		"""

		Creates a new part file user attribute with name 'attribute_name'. 


		@attribute_name string: The new attribute name.

		@returns boolean: Returns True on success, False on failure.

		"""


	def remove_part_attribute(attribute_name):

		"""

		Deletes the part attribute with name 'attribute_name'. 


		@attribute_name string: The attribute name to be deleted.

		@returns boolean: Returns True on success, False on failure.

		"""


	def remove_part_file_attribute(attribute_name):

		"""

		Deletes the part file attribute with name 'attribute_name'.


		@attribute_name string: The part file attribute name.

		@returns boolean: Returns True on success, False on failure.

		"""


	def get_part_instances(part_id):

		"""

		Returns a list with all instance ids of the part with id = part_id. If the part does not exist it returns None.


		@part_id string: The identifier of the part.

		"""


	def get_instance_attribute_value(instance_id, attribute_name):

		"""

		Returns the value of 'attribute_name' of the part instance with id = instance_id.If the part instance does not exist or it does not have an attribute with this name it returns None.


		@instance_id string: The identifier of the part instance.

		@attribute_name string: The attribute name.

		"""


	def set_instance_attribute_value(instance_id, attribute_name, attribute_value):

		"""

		Sets the value of a specific attribute of part instance with id = instance_id. The attributes that can be set are "Variant Condition" and any user defined attribute.


		@instance_id string: The identifier of the part instance.

		@attribute_name string: The attribute name.

		@attribute_value string: The new attribute value

		@returns boolean: Returns True on success, False on failure, None if no part instance with id = instance_id exists.

		"""


	def create_new_part_file(part_id, file_path, transformation_matrix):

		"""

		Creates a new part file with specific transformation matrix for a part.


		@part_id string: The identifier of the part.

		@file_path string: The file path of the new part file.

		@transformation_matrix object: (optional)A 4X3 list defining the transformation matrix of the part file.

		@returns string: Returns the identifier of the created part file or None if no part file was created.

		"""

class Marionette():

	"""

	Class for positioning a dummy with the help of the solver.
	
	Creates a number of loadcases (output files) to "pull" a dummy to one or more target positions, either with or without a seat.

	"""


	hpoint = None
	"""
	The Dummy's H-Point kinetic Joint.

	"""

	positions = None
	"""
	Target positions for the Dummy.

	"""

	rigid_bodies = None
	"""
	Any of the Dummy's kinetic Bodies to be treated as totally rigid.

	"""

	units = None
	"""
	The unit system used.
	
	For LsDyna one of:
	'g, mm, ms',
	'kg, m, s',
	'kg, mm, ms',
	'ton, mm, s'
	
	For Radioss a list with the units for mass, length and time. Either all the units in numeric format (e.g. 14, 8, 8) or all of them in string format (e.g. "kg", "mm", "ms").

	"""

	cable_force = None
	"""
	Constant force applied in cables to pull the bodies into position.
	Single value: updates the final stage's value.
	List: updates all stages' values (one value for each stage). Last stage is the final one.
	(Ls-Dyna only)

	"""

	time_to_develop = None
	"""
	Time needed for force to reach its max value
	(in both Force-based and Displacement-based loadcases).
	Single value: updates the final stage's value.
	List: updates all stages' values (one value for each stage). Last stage is the final one.
	(Ls-Dyna only)

	"""

	cable_damping = None
	"""
	Damping applied in-line with the cables used to pull the bodies into position.
	Single value: updates the final stage's value.
	List: updates all stages' values (one value for each stage). Last stage is the final one.

	"""

	total_time = None
	"""
	Stage's termination time for analysis.
	Single value: updates the final stage's value.
	List: updates all stages' values (one value for each stage). Last stage is the final one.

	"""

	global_damping = None
	"""
	Global damping used in analysis.
	(Ls-Dyna only)

	"""

	source_option = None
	"""
	One of:
	'Monolithic' : The current database will be output in a monolithic file
	for each target position.
	'Source File' : The source_file will be included in each output file,
	together with the entities needed to 'pull' the dummy to the target position.

	"""

	source_file = None
	"""
	Define the read-only file that holds the dummy definition.

	"""

	relative_path = None
	"""
	If set, the source_file will be considered to be in the output path during analysis.

	"""

	output_path = None
	"""
	Path where the output files will be placed.

	"""

	output_prefix = None
	"""
	Concatenated with suffix and extension to create the output filenames (PrefixSuffix.Extension).

	"""

	output_suffix = None
	"""
	Concatenated with prefix and extension to create the output filenames (PrefixSuffix.Extension). One of: "Name", "ID", "Counter".

	"""

	output_extension = None
	"""
	Concatenated with prefix and suffix to create the output filenames (PrefixSuffix.Extension).

	"""

	keep_entities = None
	"""
	If set, any entities created will remain in the database after the window closes, otherwise they will be removed. If more than one positions are selected, this option is not available.

	"""

	move_hpoint = None
	"""
	Deprecated! Use rigid_move instead.
	
	If set, the dummy will first be moved and rotated to the target H-Point by ANSA and will not be allowed to move away from its target location during analysis. If not moved, ANSA will not move the dummy; instead, all required movements and rotations will be performed during the analysis, using cables. In this case, it's not ensured that the dummy will reach the exact target position.

	"""

	stages_num = None
	"""
	Number of pre-positioning stages (last one is the final one). 1 or 2 stages supported.

	"""

	rigid_move = None
	"""
	The dummy's initial rigid movement type. One of:
	'None': no initial rigid movement,
	'Position': initial rigid movement to a kinetic position (no articulation is performed),
	'Final': initial rigid movement to the final kinetic position,
	'Penetration-free': initial rigid movement to a position close to the destination position
	of the first stage, but penetration free ('depenetration_vec' is used for the depenetration).

	"""

	cable_forces = None
	"""
	List of constant cable forces. One value for each stage of the analysis (final stage is the last one in the list).
	(Ls-Dyna only)

	"""

	cable_dampings = None
	"""
	List of damping applied in-line with the cables used to pull the bodies into position. One value for each stage of the analysis (final stage is the last one in the list).

	"""

	stages_time = None
	"""
	List of analysis duration for each stage of the analysis (final stage is the last one in the list).

	"""

	additional_file = None
	"""
	Define the read-only file that holds the seat definition.

	"""

	load_type = None
	"""
	Loadcase type. One of: 'Forces', 'Displacements'.
	Single value: updates the final stage's type.
	List: updates all stages' type (one value for each stage). Last stage in the list is the final one.
	(Ls-Dyna only)

	"""

	load_types = None
	"""
	Loadcase types (one of: 'Forces', 'Displacements'). One value for each stage of the analysis (final stage is the last one in the list).
	(Ls-Dyna only)

	"""

	cable_stiffness = None
	"""
	Stiffness of cables for displacement-based stages.
	Single value: updates the final stage's value.
	List: updates all stages' values (one value for each stage). Last stage in the list is the final one.

	"""

	cable_stiffnesses = None
	"""
	List of stiffnesses of cables for displacement-based stages. One value for each stage of the analysis (final stage is the last one in the list).

	"""

	ramp_times = None
	"""
	List of force ramp times. One value for each stage
	of the analysis (final stage is the last one in the list).
	(Ls-Dyna)

	"""

	dest_positions = None
	"""
	List of destination kinetic positions. One for each stage of the analysis, except the final one.

	"""

	depenetration_vec = None
	"""
	Movement vector for each step of the depenetration procedure.

	"""

	cable_property = None
	"""
	Property used by the cables (either Force-based or Displacement-based).
	If set, the other properties governing the cables - except cable_damping - have no effect.

	"""

	cable_properties = None
	"""
	List of Properties used by the cables. One value for each stage
	of the analysis (final stage is the last one in the list).
	For each stage, if the Propertry is set, the other properties governing
	the cables - except cable_damping - have no effect.

	"""

	mass_density = None
	"""
	Mass density of the displacement-based cables.
	(Ls-Dyna only)

	"""

	mass_densities = None
	"""
	List of mass densities of the displacement-based cables.
	One value for each stage of the analysis (final stage is the last one in the list).
	(Ls-Dyna only)

	"""

	mass = None
	"""
	Mass of cables.
	(Radioss)

	"""

	masses = None
	"""
	List of cables' masses. One value for each stage of
	the analysis (final stage is the last one in the list).
	(Radioss)

	"""

	seat_props = None
	"""
	Seat's Properties. If set to an empty list or None, only the dummy is included in the presimulation.

	"""

	contact = None
	"""
	The dummy - seat contact. If set to None, the contact is created automatically if a seat is included.

	"""

	initial_pos = None
	"""
	The position of the dummy at the start of the simulation when rigid_move = 'Position'.

	"""

	def SetHandleNodes(body, nodes):

		"""

		Sets the 3 handle nodes for a specific kinetic Body.


		@body object: The Dummy's kinetic Body for which the 3 handle Nodes will be assigned.

		@nodes object: List of 3 Nodes to be used as handle Nodes. They must be included in the 'body' kinetic Body and be in a rigid region of the kinetic Body.

		"""


	def ResetHandleNodes(body):

		"""

		Reset the Handle Nodes of a Dummy's kinetic Body to the ones automatically calculated.


		@body object: One of the Dummy's kinetic Bodies.

		"""


	def GetHandleNode(body):

		"""

		Get the 3 handle Nodes of a kinetic Body.


		@body object: A kinetic Body of the Dummy.

		"""


	def Position():

		"""

		Create the position files / position the dummy.


		"""


	def __init__(hpoint, positions, rigid_bodies, units, cable_forces, ramp_times, cable_dampings, stages_time, global_damping, source_option, source_file, relative_path, output_path, output_prefix, output_suffix, output_extension, keep_entities, move_hpoint, rigid_move, load_types, cable_stiffnesses, mass_densities, additional_file, stages_num, dest_positions, depenetration_vec, cable_properties, masses, initial_pos, seat_props, contact, py_seat_rigid_props, dtinit):

		"""


		@hpoint object: The Dummy's H-Point kinetic Joint.

		@positions object: (optional)Target positions for the Dummy. Each one will create a separate load case.

		@rigid_bodies object: (optional)Any of the Dummy's kinetic Bodies to be treated as totally rigid.

		@units string: (optional)The unit system used.
		For LsDyna one of:
		'g, mm, ms',
		'kg, m, s',
		'kg, mm, ms',
		'ton, mm, s'
		For Radioss a list with the units for mass, length and time. Either all the units in numeric format (e.g. 14, 8, 8) or all of them in string format (e.g. "kg", "mm", "ms").

		@cable_forces object: (optional)List of constant cable forces. One value for each stage of the analysis (final stage is the last one in the list).
		(Ls-Dyna only)

		@ramp_times object: (optional)List of force ramp times. One value for each stage of the analysis (final stage is the last one in the list).
		(Ls-Dyna)

		@cable_dampings object: (optional)List of damping applied in-line with the cables used to pull the bodies into position. One value for each stage of the analysis (final stage is the last one in the list).

		@stages_time object: (optional)List of analysis duration for each stage of the analysis (final stage is the last one in the list).

		@global_damping float: (optional)Global damping used in analysis.
		(Ls-Dyna only)

		@source_option string: (optional)One of:
		'Monolithic' : The current database will be output in a monolithic file for each target position.
		'Source File' : The source_file will be included in each output file, together with the entities needed to 'pull' the dummy to the target position.

		@source_file string: (optional)Define the read-only file that holds the dummy definition.

		@relative_path boolean: (optional)If true, the source_file will be considered to be in the output path during analysis.

		@output_path string: (optional)Path where the output files will be placed.

		@output_prefix string: (optional)Concatenated with suffix and extension to create the output filenames (PrefixSuffix.Extension).

		@output_suffix string: (optional)Concatenated with prefix and extension to create the output filenames (PrefixSuffix.Extension). One of: "Name", "ID", "Counter".

		@output_extension string: (optional)Concatenated with prefix and suffix to create the output filenames (PrefixSuffix.Extension).

		@keep_entities boolean: (optional)If set, any entities created will remain in the database after the window closes, otherwise they will be removed. If more than one positions are selected, this option is not available.

		@move_hpoint boolean: (optional)Deprecated! Use rigid_move instead.

		@rigid_move string: (optional)The dummy's initial rigid movement type. One of:
		'None': no initial rigid movement,
		'Position': initial rigid movement to a kinetic position (no articulation is performed),
		'Final': initial rigid movement to the final kinetic position,
		'Penetration-free': initial rigid movement to a position close to the destination position of the first stage, but penetration free ('depenetration_vec' is used for the de-penetration).

		@load_types object: (optional)Loadcase types (one of: 'Forces', 'Displacements'). One value for each stage of the analysis (final stage is the last one in the list).
		(Ls-Dyna only)

		@cable_stiffnesses object: (optional)List of stiffnesses of cables for displacement-based stages. One value for each stage of the analysis (final stage is the last one in the list).

		@mass_densities object: (optional)List of mass densities of the displacement-based cables. One value for each stage of the analysis (final stage is the last one in the list).
		(Ls-Dyna only)

		@additional_file string: (optional)Define the read-only file that holds the seat definition.

		@stages_num integer: (optional)Number of pre-positioning stages (last one is the final one). 1 (default) or 2 stages supported.

		@dest_positions object: (optional)List of destination kinetic positions. One for each stage of the analysis, except the final one.

		@depenetration_vec object: (optional)Movement vector for each step of the depenetration procedure.

		@cable_properties object: (optional)List of Properties used by the cables. One value for each stage of the analysis (final stage is the last one in the list). For each stage, if the Property is set, the other properties governing the cables - except cable_damping - have no effect.

		@masses object: (optional)List of cables' masses. One value for each stage of the analysis (final stage is the last one in the list).
		(Radioss)

		@initial_pos object: (optional)The position of the dummy at the start of the simulation when rigid_move = 'Position'.

		@seat_props object: (optional)Seat's Properties. If set to an empty list or None, only the dummy is included in the pre-simulation.

		@contact object: (optional)The dummy - seat contact. If set to None, the contact is created automatically if a seat is included.

		@py_seat_rigid_props object: (optional)Seat rigid properties.

		@dtinit float: (optional)Initial time step.
		(LsDyna only)

		"""

class MBCBuildProcess():

	"""

	The MBCBuildProcess object gives control to the build actions of the Model Browser. You can get information about an action, add or remove a script action and build a model browser container or some specific actions.

	"""


	status = None
	"""
	The status member allows setting/getting the current status of the model browser container item of the object. Available values are: 'needs_build', 'wip', 'error', 'ok'.

	"""

	source_representation = None
	"""
	The source_representation member allows setting/getting the Source Representation attribute value for the Build Process which has been assigned to the plain part item of the object. Valid value is any value which can be assigned to the part's Representation attribute.

	"""

	def __init__(mbcontainer):

		"""

		MBCBuildProcess object constructor


		@mbcontainer object: A model browser container e.g. ANSA_SUBSYSTEM, ANSA_SIMULATION_MODEL, ANSA_SIMULATION_RUN, ANSA_SIM_MODEL_ADAPTER, ANSA_SIM_RUN_ADAPTER

		"""


	def build(mbcontainers, index):

		"""

		A static method to build a model browser container or some specific actions of it.


		@mbcontainers object: A list with model browser containers or a single model browser container to be builded.

		@index object: (optional)A list with the indexes of the build actions to be builded. If index is given, a single model browser container must be given in the mbcontainers argument.

		@returns boolean: Returns True on success or False otherwise.

		"""


	def add(index, name, active, script, on_build_function, execute_always):

		"""

		Add a new script action to a model browser container


		@index integer: Index of the action.

		@name string: Name of the action.

		@active boolean: Active status of the action.

		@script string: Path of the script file

		@on_build_function string: Name of the script function to be executed on build.

		@execute_always boolean: (optional)Mark the action to be always executed even if build is successful.

		@returns boolean: Returns True on success, False otherwise.

		"""


	def remove(index):

		"""

		Removes an action


		@index integer: Index of the action to be removed

		@returns boolean: Returns True on success, False otherwise.

		"""


	def get(index):

		"""

		Get an action.


		@index integer: Index of the action.

		@returns object: Returns a named tuple created from the action at the given index.If the action is Built-in the values are:'name', 'builtin', 'type', 'active', 'status'If the action is Script the values are:'name', 'builtin', 'type', 'active', 'status', 'script', 'on_build_function'If the action is Check the values are:'name', 'builtin', 'type', 'active', 'status'

		"""


	def update(index, action):

		"""

		Update an action


		@index integer: Index of the action to be updated.

		@action object: An action provided by the get method.
		
		If an action is Built-in the fields that can be updated are its active and status values.
		
		If an action is Script the fields that can be updated are its active, status, name, script, on_build_function values

		@returns object: Returns True on sucess, False otherwise.

		"""


	def actions():

		"""

		All the actions of the model browser container


		@returns object: Returns a list with all the actions of the model browser container as named tuples.

		"""


	def add_check(name, active, execute_always, index):

		"""

		Add a new Check action to a model browser container


		@name string: Name of the action. It must be a valid Check Template.

		@active boolean: (optional)Active status of the action. Default is True.

		@execute_always boolean: (optional)Mark the action to be always executed even if build is successful.

		@index integer: (optional)Index of the action.If no index is provided the Check Template will be appended to the existing actions.

		@returns boolean: Always returns True.

		"""

class TailoredBlankHandler():

	"""

	The TailoredBlankHandler object provides functionality to handle a TAILORED_BLANK entity.

	"""


	def __init__(tailored_blank):

		"""

		TailoredBlankHandler object constructor.


		@tailored_blank object: The TAILORED_BLANK entity that will be handled.

		@returns object: Returns the created TailoredBlankHandler object.

		"""


	def add_to_area(area):

		"""

		Adds FE shells or faces to the area of the object's TAILORED_BLANK entity.


		@area object: A list of shells or faces that will be added to the area of the TAILORED_BLANK entity.

		"""


	def clear_area():

		"""

		Clears the area of the TAILORED_BLANK entity.


		"""


	def apply():

		"""

		Applies the TAILORED_BLANK entity.


		@returns boolean: Returns True if application succeeded, False if failed.

		"""

class SgraphTool:

	"""

	This tool creates an sgraph object that provides access to all functionalities of Separation Graph.
	The sgraph object can be constructed with the following ways:
	1. sgrpah = base.SgraphTool(model1 = Model1, model2 = Model2)
	where Model1, Model2 are two ANSA models.
	2. sgraph = base.SgraphTool(group1 = ents1, group2 = ents2)
	where ents1, ents2 are lists of ANSA entities, such as, shells, solids, volumes, and containers, such as, groups, parts, sets. 
	3. sgraph = base.SgraphTool()
	In this case, the tool will try to separate the entities in two groups automatically.

	"""


	search_range = None
	"""
	The search range of Separation Graph.
	Default value is taken from ANSA defaults of Separation Graph.

	"""

	signed_dist = None
	"""
	If True, Separation Graph will compute signed distances.
	Default value is taken from ANSA defaults of Separation Graph.

	"""

	use_shells_cog = None
	"""
	If True, Separation Graph will compute the distance of the shells' cog.
	Default value is taken from ANSA defaults of Separation Graph.

	"""

	use_shells_nodes = None
	"""
	If True, Separation Graph will compute the distance of the shells' nodes.
	Default value is taken from ANSA defaults of Separation Graph.

	"""

	def run():

		"""

		Executes the Separation Graph diffing


		@returns object: Returns None

		"""


	def get_results(detailed_results):

		"""

		Returns a dictionary with the Separation Graph diffing results.The keys are the elements and their respective data are lists of dictionaries.If the key element is shell then the list contains only one dictionary.This dictionary structure is described below.   KEY               VALUE  shell         list( nearest_entity, dist )  =  results referred to shell's COG        node1         list( nearest_entity, dist )  =  results referred to shell's node1  node2         list( nearest_entity, dist )  =  results referred to shell's node2   node3         list( nearest_entity, dist )  =  results referred to shell's node3   node4         list( nearest_entity, dist )  =  results referred to shell's node4 If the key element is solid then list contains one dictionary for-each solid's facet. These dictionaries have the following structure.   KEY                  VALUE  facet(SOLIDFACET)  list( nearest_entity, dist )  =  results referred to facet's COG    node1              list( nearest_entity, dist )  =  results referred to facet's node1  node2              list( nearest_entity, dist )  =  results referred to facet's node2   node3              list( nearest_entity, dist )  =  results referred to facet's node3   node4              list( nearest_entity, dist )  =  results referred to facet's node4 nearest_entity:: the entity from the other group that nodes or COGs find the projection with minimum distance.dist:: the distance information. Depends on input 'detailed_results'.Faces are not supported in this function.


		@detailed_results boolean: (optional)If True, dist will contain the projection vector coordinates
		 (x_start, y_start, z_start, x_end, y_end, z_end).
		Otherwise, dist will contain the projection distance.
		Default value is False.

		@returns object: Returns the dictionary of Separation Graph diffing results

		"""


	def match_parts_with_entities(source_model_or_group, mapping_mode, is_structural, create_parts, return_mapping_results):

		"""

		This function changes the parts hierarchy of the entities in the target group so that it matches the parts hierarchy of the source group.


		@source_model_or_group integer: (optional)Determines the source group.
		If <= 0: the source group is group 1.
		If > 0: the source group is group 2.
		The default value is taken from ANSA defaults of Separation Graph.

		@mapping_mode integer: (optional)Determines how the mapping of entities will be performed.
		If <= 0: Only the entities nearest to the source group are mapped.
		If > 0: All entities within search distance from the source group are mapped.
		The default value is taken from ANSA defaults of Separation Graph.

		@is_structural boolean: (optional)If True, all entities that belong to the same connectivity group will be mapped to the same part of the source group.
		The default value is taken from ANSA defaults of Separation Graph.

		@create_parts boolean: (optional)If True, the parts hierarchy of the target group will change. Otherwise, it will remain untouched.
		The default value is taken from ANSA defaults of Separation Graph.

		@return_mapping_results boolean: (optional)If True, the function returns a dictionary with the mapping results. Otherwise, it returns None.

		"""


	def match_pids_with_entities(source_model_or_group, mapping_mode, is_structural, create_pids, return_mapping_results):

		"""

		Changes the PID hierarchy of the entities in the target group so that it matches the PID hierarchy of the source group.


		@source_model_or_group integer: (optional)Determines the source group.
		If <= 0: the source group is group1.
		If > 0: the source group is group2.
		The default value is taken from ANSA defaults of Separation Graph.

		@mapping_mode integer: (optional)Determines how the mapping of entities will be performed.
		If <= 0: Only the entities nearest to the source group are mapped.
		If > 0: All entities within search distance from the source group are mapped.
		The default value is taken from ANSA defaults of Separation Graph.

		@is_structural boolean: (optional)If True, all entities that belong to the same connectivity group will be mapped to the same PID of the source group.
		The default value is taken from ANSA defaults of Separation Graph.

		@create_pids boolean: (optional)If True, the PID hierarchy of the target group will change. Otherwise, it will remain untouched.
		The default value is taken from ANSA defaults of Separation Graph.

		@return_mapping_results boolean: (optional)If True, the function returns a dictionary with the mapping results. Otherwise, it returns None.

		"""


	def replace_parts(source_model_or_group, threshold):

		"""

		This function maps the parts in the target group with the parts in the source group.


		@source_model_or_group integer: (optional)Determines the source group.
		If <= 0: the source group is group1.
		If > 0: the source group is group2.
		The default value is taken from ANSA defaults of Separation Graph.

		@threshold float: (optional)Is the matched area percentage above which parts are considered unmatched. (Default: 0.1)

		@returns object: Returns a dictionary. The key is a Part of group_2 and the data is another dictionary, with key a Part of group_1 and data the matching area percentage between the respective Part of group_2 and Part of group_1.

		"""


	def replace_pids(source_model_or_group, threshold):

		"""


		@source_model_or_group integer: (optional)Determines the source group.
		If <= 0: the source group is group1.
		If > 0: the source group is group2.
		The default value is taken from ANSA defaults of Separation Graph.

		@threshold float: (optional)Is the matched area percentage above which parts are considered unmatched. (Default: 0.1)

		@returns object: Returns a dictionary. The key is a Part of group_2 and the data is another dictionary, with key a Part of group_1 and data the matching area percentage between the respective Part of group_2 and Part of group_1.

		"""


	def delete_unmatched_parts(source_model_or_group, threshold):

		"""

		Deletes the parts of the target group that where not matched with any part of the source group


		@source_model_or_group integer: (optional)Determines the source group.
		If <= 0: the source group is group1.
		If > 0: the source group is group2.
		The default value is taken from ANSA defaults of Separation Graph.

		@threshold float: (optional)Is the matched area percentage above which parts are considered unmatched. (Default: 0.1)

		@returns object: Returns the list of unmatched parts

		"""


	def delete_unmatched_pids(source_model_or_group, threshold):

		"""

		Deletes the PIDs of the target group that where not matched with any PID of the source group


		@source_model_or_group integer: (optional)Determines the source group.
		If <= 0: the source group is group1.
		If > 0: the source group is group2.
		The default value is taken from ANSA defaults of Separation Graph.

		@threshold float: (optional)Is the matched area percentage above which PIDs are considered unmatched. (Default: 0.1)

		@returns object: Returns the list of unmatched parts

		"""

class ReplaceTool:

	"""

	The replacement object, which is created through this class, provides access to the Replace Tool functionality through
	script. A replacement object can be created by specifying 
	 1) a list with MB containers or Faces/Macros that are going to be replaced 
	 2) the full path to the database which will replace the specified MB containers or Faces/Macros.
	
	The initial values of the class members below are specified through ANSA.defaults. The "Keyword" and the "Default Value"
	in ANSA.defaults are presented for each member.

	"""


	handle_internal_connections = None
	"""
	Defines whether the internal Connections will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'.  (Keyword: "Internal_Connections" - Default Value: keep).
	This member is applicable only in Replace MB containers.

	"""

	handle_external_connections = None
	"""
	Defines whether the external Connections will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "External_Connections" - Default Value: keep).
	This member is applicable only in Replace MB containers.

	"""

	handle_internal_connectors = None
	"""
	Defines whether the internal Connectors will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Internal_Connectors - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_connectors = None
	"""
	Defines whether the external Connectors will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'.  (Keyword: "External_Connectors - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_trim_items = None
	"""
	Defines whether the internal Trim items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Interrnal_Trim_Items - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_trim_items = None
	"""
	Defines whether the external Trim items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "External_Trim_Items - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_output_request = None
	"""
	Defines whether the internal Output Requests items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Interrnal_Output_Requests - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_output_request = None
	"""
	Defines whether the external Output Requests items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "External_Output_Requests - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_boundary_conditions = None
	"""
	Defines whether the internal Boundary Condition items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Internal_Boundary_Conditions - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_boundary_conditions = None
	"""
	Defines whether the external Boundary Condition items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "External_Boundary_Conditions - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_set_builder = None
	"""
	Defines whether the internal Set Builder items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Interrnal_Set_Builders - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_set_builder = None
	"""
	Defines whether the external Set Builder items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'.  (Keyword: "External_Set_Builders - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_general_builder = None
	"""
	Defines whether the internal General Builder items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'.  (Keyword: "Internal_General_Builders - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_general_builder = None
	"""
	Defines whether the external General Builder items will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'.  (Keyword: "External_General_Builders - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_model_setup_entities = None
	"""
	Defines whether the internal Model Setup Entities will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Internal_Model_Setup_Entities - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_model_setup_entities = None
	"""
	Defines whether the external Model Setup Entities will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "External_Model_Setup_Entities - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_internal_interfaces = None
	"""
	Defines whether the internal Interfaces will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Internal_Interfaces - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_external_interfaces = None
	"""
	Defines whether the external Interfaces will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "External_Interfaces - Default Value: keep). This member is applicable only in Replace MB containers.

	"""

	handle_mass_elements = None
	"""
	Defines whether the Mass Elements will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Mass_Elements - Default Value: delete). This member is applicable only in Replace MB containers.

	"""

	handle_dpatches = None
	"""
	Defines whether the Damping Patches will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Affected_Damping_Patches - Default Value: delete). This member is applicable only in Replace MB containers.

	"""

	handle_resmaps = None
	"""
	Defines whether the Result Mappers will be kept and re-applied during replace.
	Accepted values: 'keep' and 'delete'. (Keyword: "Affected_Result_Mappers - Default Value: delete). This member is applicable only in Replace MB containers.

	"""

	merge_sets_by_name = None
	"""
	Merge incoming with existing Sets by name (True) or not (False).
	(Keyword: "Merge_Sets_By_Name" - Default Value: True).

	"""

	paste_nodes_by_name = None
	"""
	Paste incoming with existing Nodes by name (True) or not (False).
	(Keyword: "Replace_Parts_Paste_Nodes_by_Name" - Default Value: True).

	"""

	paste_nodes_by_name_tolerance = None
	"""
	Paste incoming with existing Nodes by name tolerance.
	(Keyword: "Replace_Parts_Paste_Nodes_By_Name_with_tolerance" - Default Value: 0.05).

	"""

	paste_cons_by_name = None
	"""
	Paste incoming with existing Cons by name (True) or not (False)
	This member is applicable only in Replace MB containers.

	"""

	update_incoming_pids = None
	"""
	Apply Pids of outgoing Parts in elements of incoming Parts (True) or not (False).
	 (Keyword: "Update_Incoming_Pids" - Default Value: True).
	This member is applicable only in Replace MB containers.

	"""

	update_incoming_pids_tolerance = None
	"""
	Apply Pids of outgoing Parts in elements of incoming Parts tolerance (Keyword: "Update_Incoming_Pids_Tolerance" - Default Value: 1.0).
	This member is applicable only in Replace MB containers.

	"""

	realize_connections = None
	"""
	Realize connections, connectors and builders during replace (True) or not (False).  (Keyword: "Realize_Connections" - Default Value: True). 
	This member is applicable only in Replace MB containers.

	"""

	update_connections_connectivity = None
	"""
	Update pid/part connectivity of connections, connectors and builders during replace (True) or not (False).  (Keyword: "Update_Connections_Connectivity" - Default Value: False). 
	This member is applicable only in Replace MB containers.

	"""

	update_connections_connectivity_tolerance = None
	"""
	Update pid/part connectivity of connections, connectors and builders during replace, tolerance.  (Keyword: "Update_Connections_Connectivity_Tolerance" - Default Value: 1.0). 
	This member is applicable only in Replace MB containers.

	"""

	update_instance_chain_based_on = None
	"""
	When a multi-insatnce part is replaced this setting specifies the source to be used so as to update the Name and Module Id of all part instances. Accepted values: 'incoming'  and 'outgoing'. (Keyword: "Update_Instance_Chain_Based_On - Default Value: "incoming").

	"""

	paste_nodes = None
	"""
	Paste incoming with outgoing Nodes during replace (True) or not (False).

	"""

	paste_nodes_tolerance = None
	"""
	Paste incoming with outgoing Nodes during replace tolerance. (Keyword: "Paste_Node_Tolerance" - Default Value: 0.2).

	"""

	update_sets = None
	"""
	Update set's contents (shell/solid elements) during replace (True) or not (False).

	"""

	update_sets_compatibility_check = None
	"""
	Check for mesh compatibility, when update set's contents during replace (True) or not (False). 
	(Keyword: "Prefer_Compatible_Mesh" - Default Value: True).

	"""

	update_sets_expand_factor = None
	"""
	Shell's expand factor, when update set's contents during replace.
	(Keyword: "Replace_Parts_Shell_Expansion_Factor" - Default Value: 1.0).

	"""

	update_sets_tolerance = None
	"""
	Update set's contents (shell/solid elements) during replace tolerance.  
	(Keyword: "Sets_Node_Tolerance" - Default Value: 1.0).

	"""

	keep_names_of_nodes = None
	"""
	Try to keep names of outgoing nodes during replace (True) or not (False). 
	(Keyword: "Replace_Parts_Keep_Names_of_Nodes" - Default Value: True).

	"""

	keep_names_of_nodes_tolerance = None
	"""
	Try to keep names of outgoing nodes during replace tolerance. 
	(Keyword: "Replace_Parts_Keep_Names_of_Nodes_with_Tolerance" - Default Value: 1.0)

	"""

	paste_cons_bounds = None
	"""
	Paste Cons between old and new parts (True) or not (False). 
	(Keyword: "rp_paste_bounds" - Default Value: True)

	"""

	paste_cons_tolerance = None
	"""
	Paste Cons between old and new parts tolerance. 
	(Keyword: "paste_bounds_to_neib_parts_tol" - Default Value: 0.2)

	"""

	reconstruct_cons_bounds = None
	"""
	Paste Cons between old and new parts, when mesh incompatibility is detected which side's mesh will be kept. Accepted values: 'keep_old', 'keep_old_without_joining_perimeters', 'keep_new', 'keep_new_without_joining_perimeters', 'do not paste'. (Keyword: "rp_reconstruct_bounds" - Default Value: 'keep_old')

	"""

	try_to_paste_all_red_cons = None
	"""
	Paste Cons between old and new parts, try to paste all single Cons of old and new parts, even if they do not belong to Interface Boundaries (True) or not (False).

	"""

	allow_reconstruct_on_frozen_perims = None
	"""
	Paste Cons between old and new parts, allow local reconstruct on frozen perimeters (True) or not (False).

	"""

	on_node_conflicts = None
	"""
	Define what to do with node conflicts during merge of incoming db. Accepted values: 'offset', 'keep_old', 'keep_new'.  (Keyword: "DM>Change Representation Options>Nodes" - Default Value: offset)

	"""

	on_property_conflicts = None
	"""
	Define what to do with property conflicts during merge of incoming db. Accepted values: 'offset', 'keep_old', 'keep_new'.  (Keyword: "DM>Change Representation Options>Properties" - Default Value: keep_new)

	"""

	on_material_conflicts = None
	"""
	Define what to do with material conflicts during merge of incoming db. Accepted values: 'offset', 'keep_old', 'keep_new'.  (Keyword: "DM>Change Representation Options>Materials" - Default Value: keep_new)

	"""

	on_set_conflicts = None
	"""
	Define what to do with set conflicts during merge of incoming db. Accepted values: 'offset', 'keep_old', 'keep_new'.  (Keyword: "DM>Change Representation Options>Sets" - Default Value: offset)

	"""

	on_coords_conflicts = None
	"""
	Define what to do with coord systems conflicts during merge of incoming db. Accepted values: 'offset', 'keep_old', 'keep_new'.  (Keyword: "DM>Change Representation Options>Coords" - Default Value: offset)

	"""

	on_bc_set_conflicts = None
	"""
	Define what to do with Bc set conflicts during merge of incoming db. Accepted values: 'offset', 'keep_old', 'keep_new'.  (Keyword: "DM>Change Representation Options>Bc Sets" - Default Value: offset)

	"""

	execute_pre_post_replace_funs = None
	"""
	Execute(True) or not (False) pre/post replace script functions, defined in ANSA defaults.  ( Default Value: False)
	This member is applicable only in Replace MB containers.

	"""

	release_joined_perims_option = None
	"""
	Define what improve method will be used in case of meshed macro release. Accepted values: 'improve_off', 'erase_mesh', 'smooth_str', 'reconstruct', 'remesh', 'keep_mesh'. Default Value: improve_off)

	"""

	def __init__(outgoing_mbcontainers, incoming_mbcontainers_file_path):

		"""

		ReplaceTool constructor


		@outgoing_mbcontainers object: A list with MB containers that are going to be replaced

		@incoming_mbcontainers_file_path string: The full path to the database which will replace the specified MB containers.

		"""


	def run():

		"""

		Executes the specified replacement.


		@returns boolean: Returns true in case of succesful replacement and false in case were an error occured.

		"""


	def get_results():

		"""

		Returns the replacement report


		@returns object: REturn a python dictionary with all elements that were affected during replacement per type

		"""

class NodesToElementsI:

	"""

	Given some nodes, NodesToElementsIter finds the elements that use these nodes.

	"""


	def __init__(nodes, sources):

		"""


		@nodes object: Can be one of the following:
		1) A list with node ids.
		2) A list containing node references.
		3) A specific node id.
		4) A specific reference to a node object.

		@sources object: (optional)A list with values 'entities' and 'bcs'. 'entities' (default) returns the 
		elements that use the nodes and 'bcs' returns the boundary conditions 
		that use the nodes.

		@returns object: A new iterable object will be returned which can be used to iterate through all those lists. This way only a list will be returned to the user in each iteration.

		"""


	def get_elements(node):

		"""

		Get the elements that are used by the given node


		@node object: The node object

		@returns object: A list of the elements that use the given node

		"""

class FastenersLibraryTool:

	"""
	Deprecated since version 20.1.0. Use class FeatureHandler instead.

	The object which is created through this class provides access to the "Detect Fasteners From Library" functionality.The user is able to:
	- detect any fasteners (pressed or standalone) matching the ones stored in DM
	- create parts containing the detected fasteners
	- detach pressed Fasteners from the geometry they are connected to

	"""


	create_parts = None
	"""
	If set to True, one Part per detected Fastener is created. If set to False, the existing Parts hierarchy remains unchanged. Default value is True.

	"""

	detect_and_treat_pressed_fasteners = None
	"""
	If set to True, the object will try to detect and detach Fasteners that are pressed (connected) to the main geometry. The detachment of the Fasteners maintains the hole on the main geometry and heals any red bounds. If set to False, only standalone Fasteners will be detected. Default value is False.

	"""

	connectivity_separate_at_blue_bounds = None
	"""
	If True, input entity regions connected by blue bounds are placed into different connectivity groups. Default value is False.

	"""

	connectivity_separate_at_pid_bounds = None
	"""
	If True, input entities regions belonging to different PIDs are placed into different connectivity groups. If False, one connectivity group may have multiple PIDs. Default value is False.

	"""

	connectivity_feature_angle = None
	"""
	Accepted values: 0 (disabled) - 180. The feature angle limit in degrees. If this value is exceeded, the groups get separated at this feature line. Default value is 0.

	"""

	connectivity_feature_type = None
	"""
	Accepted values: "convex", "concave", "convex_and_concave". This option  is considered only when separation by feature angle is enabled. Groups get separated at the examined bound only if feature_angle is exceeded and the feature type is of the specified type. Default value is "convex_and_concave".

	"""

	def detect(entities):

		"""

		Detects Fasteners on the input entities and handles pressed Fasteners, if the "detect_and_handle_pressed_fasteners" option is enabled on the object. Parts with the detection results are created, if the "create_parts" option has been set.


		@entities object: (optional)The input entities to detect Fasteners on. Iterables of Faces or ANSA containers (Parts, Sets, Props) can be provided. If no input entities are given, then detect() will run on the entire current ANSA Model.

		@returns object: Returns a List with Dict objects. Each Dict object corresponds to one detected Fastener from the input entities. The following keys are available in the Dict object:- 'entities': a list with the detected Fastener Faces- 'names_values': the properties of the DM Library Fastener that matched best the detected one- 'similarity': the similarity factor between the DM Library Fastener and the detected one- 'is pressed': set to True if the Fastener was connected and detached from the main geometry- 'axis': (optional) the rotation axis vector of the Fastener, if one exists- 'part': (optional) the created Part, if "create_parts" is enabled

		"""

class CollectEntitiesI():

	"""

	Creates an iterable with the entities of specific types, contained in the containers. It offers better speed and less memory usage when it is just needed to iterate the result of CollectEntities.

	"""


	def __init__(deck, containers, search_types, recursive, filter_visible, prop_from_entities, mat_from_entities, model_browser_filter, no_expand_types, hidden_entities):

		"""


		@deck constant: The deck for which the collection will take place.

		@containers object: A reference to a container  entity or list with references to  containers.
		Some of the containers can be of type ANSAGROUP, ANSAPART, SET, 
		property, material, face,  volume, elements, task manager items etc
		If the container is None, CollectEntitiesI will search the entire 
		ANSA database.

		@search_types object: A string or list of strings with "ansa keywords" of the types to be 
		collected. Such types can be SHELL, SOLID, GRID etc.
		Additionally, the following keywords can be used:
		"__PROPERTIES__": returns all properties in the "containers".
		"__MATERIALS__": returns all materials in the "containers".
		"__ELEMENTS__": returns all standard elements in the "containers".
		"__ALL_ENTITIES__": returns all entities in the "containers".
		"__CONNECTIONS__": returns all connections in the "containers".
		"__MBCONTAINERS__": returns the model browser containers of the model if 
		used with containers=None or the model browser containers of the containers.
		"__COORD_SYSTEMS__": returns all the coordinate systems in the "containers".

		@recursive boolean: (optional)Recursively search any containers contained in a higher level container 
		for any of the search_types. (Default: False).

		@filter_visible boolean: (optional)Return only the entities that satisfy all the collection criteria, 
		have visibility status, and the status is active.
		In all other cases the parameter is ignored.
		(Default: False).

		@prop_from_entities boolean: (optional)In case search_type is a property, this argument controls if the property 
		must be acquired from the entities referenced by the entities in the 
		container or not. For example, if search_type is "PSHELL", container is 
		"PART", and prop_from_entities is True, if the part contains shells, the 
		corresponding PSHELL will be returned. 
		Otherwise, if prop_from_entities is False, None will be returned.
		(Default: False).

		@mat_from_entities boolean: (optional)In case search_type is a material, this argument controls if the material 
		must be acquired from the entities referenced by the entities in the 
		container or not. For example, if search_type is "MAT1", container is 
		"PART", and mat_from_entities is "yes", if the part  contains elements 
		with MAT1 material, the corresponding material will be returned.
		Otherwise, if mat_from_entities is False, None will be returned.
		(Default: False).

		@model_browser_filter object: (optional)In case search_types is None, this argument controls which entities to 
		collect from a Part, a Group, a Subsystem, a Simulation Model or a 
		Simulation Run. 'model_browser_filter' is a dictionary with two keys 
		'container' and 'collect_mode'. 'container' value and 'collect_mode' value 
		vary according to the entity they are applied on.
		
		-When collecting entities from a Part or a Group:
		{ 'container' : 'all', 'collect_mode' : 'contents' | 'contents_related' | 'contents_affected' }
		
		'container' values:
		-'all' returns entities of any type
		
		'collect_mode' values:
		-'contents' returns entities that strictly belong to the Part or the Group.
		-'contents_related' returns the 'contents' plus their properties and 
		materials.
		-'contents_affected' returns the 'contents_related' plus all entities that 
		are geometrically related to it (use same nodes or are otherwise connected).
		
		-When collecting entities from a Subsystem, a Simulation Model or a 
		Simulation Run:
		{ 'container': 'all' | 'geometry' | 'connections' | 'model_setup_entities' | 'interfaces', 
		'collect_mode': 'contents' | 'missing' | 'misplaced' }
		
		'container' values:
		-'all' returns entities of any type.
		-'geometry' returns geometry entities.
		-'connections' returns Connections & Connectors.
		-'model_setup_entities' returns Model Setup Entities 
		(like RBE3s directly connected to geometry)
		-'interfaces' returns Interfaces (like A_POINTs).
		
		'collect_mode' values:
		-'contents' returns entities that directly belong to the 'container'.
		-'missing' returns entities that don't belo

		@no_expand_types object: (optional)A list with ANSA types which won't be expanded while collecting their 
		entities. Currently it works only for SETs with recursive = False, 
		no_expand_types = ('SET',) in order to get the first level SET contents.

		@hidden_entities boolean: (optional)If hidden_entities = False the hidden entities will not be collected. Default is True.

		@returns object: Returns an iterable with all the collected entities.

		"""

class MBParametersController:

	"""

	The MBParametersController object gives control to the MBParameters. You can get information about parameters, define, edit or remove a parameter from a Model Browser container.

	"""


	target_mbcontainer = None
	"""
	The target_mbcontainer member allows setting/getting the target MBContainer of a MBParametersController.

	"""

	def __init__(mbcontainer):

		"""

		MBParametersProcess object constructor


		@mbcontainer object: A Model Browser container e.g. ANSA_SUBSYSTEM, ANSA_SIMULATION_MODEL, ANSA_SIMULATION_RUN

		"""


	def get_parameters(mbcontainer):

		"""

		All parameters of the target or the given MBContainer


		@mbcontainer object: (optional)A Model Browser container

		@returns object: Returns a list with all parameters of the Model Browser container as named tuples.

		"""


	def define(parameter, value, mbcontainer):

		"""

		Define or Edit a parameter in a Model Browser container


		@parameter object: A Parameter object.

		@value string: (optional)Value

		@mbcontainer object: (optional)A Model Browser container. If no container provided then the target_mbcontainer will be used.

		"""


	def remove_definition(parameter):

		"""

		Remove definition of a parameter from Model Browser containers.


		@parameter object: A Parameter object.

		"""

class FlangesCompatibleTool:

	"""

	FlangesCompatibleTool - a class to define fully compatible faces to be treated as flanges. This is implemented through automatic detection of compatibility of flanges given a certain proximity and a tolerance angle, among input faces. Faces are trimmed accordingly at non-compatible areas. Afterwards, it is possible to apply either (i) Topology and link faces, (ii) Topology, or (iii) Fusion (valid only for volumes).

	"""


	angle_tolerance = None
	"""
	A float defining angle degree deviation between two flanges. (setter / getter)

	"""

	minimum_overlap = None
	"""
	A float defining minimum overlap (%) on both master and slave areas. (setter / getter)

	"""

	allow_same_property = None
	"""
	If True, allows definition of flanges among faces that have the same property. (setter / getter)

	"""

	property = None
	"""
	A string defining resulted flanges property among a "master", "slave", "interface". (setter / getter)
	If string equals to "master", created flanges have the same property as master faces.
	If string equals to "slave", created flanges have the same property as slave faces.
	If string equals to "interface", created flanges have the interface property.

	"""

	part = None
	"""
	A string defining resulted flanges part among a "master", "slave", "interface". (setter / getter)
	If string equals to "master", created flanges have the same part as master faces.
	If string equals to "slave", created flanges have the same part as slave faces.
	If string equals to "interface", created flanges have the interface part.

	"""

	keepFaces = None
	"""
	A string defining, in case of fuse , which faces will be deleted among ,
	"delete_caps", "keep_master_caps", "keep_slave_caps", "keep_both_caps". (setter / getter)
	if string equals to "delete_caps", both caps will be deleted.
	if string equals to "keep_master_caps", master caps will be kept and slave will be deleted.
	if string equals to "keep_slave_caps", slave caps will be kept and master will be deleted.
	if string equals to "keep_both_caps", both will be kept.

	"""

	def __init__(faces, distance, angle_tolerance, minimum_overlap, allow_same_property):

		"""

		Constructor of class FlangesCompatibleTool. 


		@faces object: (optional)A list of faces, a string with value 'visible' or a string with value 'all'. If it is called with 'visible', it works with all the visible faces. If it is called with 'all', it works with all the faces.
		Default value visible faces.

		@distance float: (optional)A float defining maximum distance concerning identification of flanges, after taking into consideration property thickness, using a distance D = distance - ((thickness1 + thickness2) / 2.) .
		Default value 1.

		@angle_tolerance float: (optional)A float defining angle degree deviation between two flanges.
		Default value 10.

		@minimum_overlap float: (optional)A float defining minimum overlap (%) on both master and slave areas.
		Default value 5.

		@allow_same_property boolean: (optional)If True, allows definition of flanges among faces that have the same property.
		Dedault value False.

		"""


	def identify():

		"""

		Automaticaly identifies flanges among input faces defined on constructor.


		@returns object: Returns a list with flange objects.

		"""


	def getflange(flange):

		"""

		A flange from input id of the return identified flanges


		@flange integer: id from identified flanfes

		@returns object: Returns willing flange.

		"""


	def commonOverlap(flange):

		"""

		Returns common area amongst faces of input flange.


		@flange object: Input identified flange.

		@returns float: Common area amongst faces of input flange.

		"""


	def masterFaces(flange):

		"""

		Returns a list with master faces amongst faces of input flange.


		@flange object: Input identified flange.

		@returns object: A list with master faces of input flange.

		"""


	def slaveFaces(flange):

		"""

		Returns a list with slave faces amongst faces of input flange.


		@flange object: Input identified flange.

		@returns object: A list with slave faces of input flange.

		"""


	def masterOverlap(flange):

		"""

		Returns master overlap(%) of input flange.


		@flange object: Input identified flange.

		@returns float: master overlap(%) of input flange.

		"""


	def slaveOverlap(flange):

		"""

		Returns slave overlap(%) of input flange.


		@flange object: Input identified flange.

		@returns float: slave overlap(%) of input flange.

		"""


	def minProximity(flange):

		"""

		Returns minimum proximity distance from input identified flange.


		@flange object: Input identified fllange.

		@returns float: minimum proximity distance from input identified flange.

		"""


	def maxProximity(flange):

		"""

		Returns maximum proximity distance from input identified flange.


		@flange object: Input identified flange.

		@returns float: maximum proximity distance from input identified flange.

		"""


	def masterPID(flange):

		"""

		Returns master faces` property.


		@flange object: Input identified flange.

		@returns object: master faces` property.

		"""


	def slavePID(flange):

		"""

		Returns slave faces` property.  


		@flange object: Input idenitfied flange.

		@returns object: slave faces` property.

		"""


	def state(flange):

		"""

		Returns a string of flange state after calling link, topo or fuse.Available strings :1. 'DONE', in case of success.2. 'PARTIAL_DONE', in case not all faces defining flange have beem modified.3. 'FAILED', in case of failure.


		@flange object: Input identified flange.

		@returns string: a string of flange state after calling link, topo or fuse.Available strings : { 'DONE', 'PARTIAL_DONE', 'FAILED' }.

		"""


	def link(flange):

		"""

		The faces are cut to create the compatible faces. Faces found compatible, are automatically converted to linked Faces.


		@flange object: (optional)In case input flange, final result will take place upon faces of input flange.
		In case nothing passed final result will take place upon faces of all identified flanges.

		@returns object: A list with the created faces.

		"""


	def topo(flange):

		"""

		Cuts and deletes the compatible faces of the one side, i.e. the "slave" compatible faces and connects the remaining. 


		@flange object: (optional)In case input flange, final result will take place upon faces of input flange.
		In case nothing passed final result will take place upon faces of all identified flanges.

		@returns object: A list with the created faces.

		"""


	def fuse(flange):

		"""

		The function will not only cut to create the compatible faces, but will also fuse them together.The faces that will be kept and will not be deleted during this process can be specified through the "keepFaces" option. 


		@flange object: (optional)In case input flange, final result will take place upon faces of input flange.
		In case nothing passed final result will take place upon faces of all identified flanges.

		@returns object: A list with the created faces.

		"""


	def reverse(flange):

		"""

		The function reverses master faces with slave faces.


		@flange object: (optional)In case input flange, final result will take place upon faces of input flange.
		In case nothing passed final result will take place upon faces of all identified flanges.

		@returns object: In case input flange, will return an updated flange object.In case nothing passed , will return a list with all the updated flanges

		"""

class TransferInfoFromSubsystemTool():

	"""

	The TransferInfoFromSubsystemTool object, which is created through this class, provides access to transfer from subsystem functionality through script. For instance we have a newer version of a subsystem(receiver) and we would like to transfer the Connection entities from an older version of subsystem(source).

	"""


	source_subsystem_filepath = None
	"""
	A filepath to an ANSA db which contains a single subsystem from which we will retrieve information to transfer in the selected subsystem.

	"""

	source_subsystem_server_id = None
	"""
	A server id which corresponds to a subsystem saved in DM from which we will retrieve information to transfer in the selected subsystem.

	"""

	transfer_connections = None
	"""
	Defines whether the Connector items found in specified source subsystem will be transferred to receiver subsystem.
	Accepted values: 'yes' and 'no'.

	"""

	transfer_interfaces = None
	"""
	Defines whether the Interface items found in specified source subsystem will be transferred to receiver subsystem.
	Accepted values: 'yes' and 'no'.

	"""

	transfer_gebs = None
	"""
	Defines whether the GEB items found in specified source subsystem will be transferred to receiver subsystem.
	Accepted values: 'yes' and 'no'.

	"""

	reapply_transferred_ents = None
	"""
	Defines whether the transfered items from specified source subsystem will be reapplied to receiver subsystem.
	Accepted values: 'yes' and 'no'.

	"""

	def __init__(receiver_subsystem):

		"""

		TransferInfoFromSubsystemTool object constructor.Returns the created TransferInfoFromSubsystemTool object.


		@receiver_subsystem object: The receiver subsystem in which we would like to transfer entities from another subsystem.

		"""


	def run():

		"""

		Executes the transfer procedure.


		@returns boolean: Returns true if transfer procedure has been executed succesfully.Otherwise it returns false.

		"""


	def get_transferred_entities():

		"""

		Returns the entities that have succesfully transferred to receiver subsystem. 


		@returns object: A dictionary with the the entities that have succesfully transferred to receiver subsystem per type.

		"""

class ChangesetManager():

	"""

	The ChangesetManager object gives control to the Changeset of a Model Browser container. You can get information about the actions or summary of the changgeset.

	"""


	target_mbcontainer = None
	"""
	The target_mbcontainer member allows setting/getting the target MBContainer of a ChangesetManager.

	"""

	summary = None
	"""
	The summary member allows setting/getting the summary of a Changeset.

	"""

	def __init__(mbcontainer):

		"""

		ChangesetManager object constructor


		@mbcontainer object: A Model Browser container which supports Changeset management.
		
		- ANSAPART
		- ANSA_SUBSYSTEM

		"""


	def clear(actions, summary):

		"""

		Clear a Changeset.


		@actions boolean: (optional)define if actions will be cleared

		@summary boolean: (optional)define if summary will be cleared

		@returns boolean: Returns True on success, False otherwise.

		"""


	def delete():

		"""

		Delete a Changeset.


		@returns boolean: Returns True on success, False otherwise.

		"""


	def get_actions():

		"""

		Get all actions of Changeset.


		@returns: Returns a list with all the actions of the Changeset as named tuples.

		"""


	def delete_actions(actions_indices):

		"""

		Delete a list of actions.


		@actions_indices object: A list with the indices of actions to be deleted

		@returns boolean: Returns True on success, False otherwise.

		"""


	def add_action(name, entity_info, comment):

		"""

		Record a new action in Changeset


		@name string: Name of action

		@entity_info string: (optional)Information related to the Entity affected by the action

		@comment string: (optional)Comment of action

		@returns boolean: Returns True on success, False otherwise.

		"""


	def update_action(index, action):

		"""

		Update an action


		@index integer: Index of the action to be updated.

		@action object: An action object as provided by the get_actions method.
		
		The fields of actions that can be updated are
		- name
		- entity_info
		- comment

		@returns boolean: Returns True on sucess, False otherwise.

		"""

class IgaPatch():

	"""

	IgaPatch is an object that provides the whole functionality of the IGA Patch module.
	It can be used via script in both GUI and no-GUI mode.

	"""


	def create(entities, optionlist):

		"""

		Create IGA patch


		@entities object: A list of faces

		@optionlist object: A list of options. The available options are:
		
		Mode: integer indicates how to create an new patch and takes value 0 to Create a new                                     underlying NURBS or 1 to Convert the implicit underlying surface into NURBS .
		
		Distortion distance: boolean indicates if the algorithm will take into account                                           the corresponding value. 
		
		Distortion distance value: float indicates the average distortion distance between the                                     original geometry and the resulting patch.
		
		Min Span: boolean indicates if the algorithm will take into account the corresponding                                     value.
		
		Min Span value: float indicates the minimum span value between two consequent knot                                       vector values.
		
		Max Span: boolean indicates if the algorithm will take into account the corresponding                                     value.
		
		Max Span value: float indicates the maximum span value between two consequent knot                                       vector values.
		
		Uniform: boolean indicates if the knot vector of the patch is uniform in both                                            directions.
		
		Extend: boolean indicates if the underlying NURBS is extended compared with the                                           corresponding perimeter bounds.
		
		Join: boolean indicates if the selection will be joined in one or more macros.
		
		Order: Integer indicates the polynomial order of the patch in both directions.

		@returns object: Returns a list of 2 lists. The first contains the results info and the second the failed faces.

		"""


	def set(iga_face):

		"""

		Set an iga face to the IgaPatch object.


		@iga_face object: The Iga face.

		"""


	def get_loops():

		"""

		Get the loops of the iga face.


		@returns object: Returns a list with the iga loops

		"""


	def get_edges(iga_loop):

		"""

		Get the edges of a loop


		@iga_loop object: The iga loop

		@returns object: Returns a list with the iga edges

		"""


	def get_edge_data(iga_edge, data_type):

		"""

		Get the data of an iga edge.


		@iga_edge object: The iga edge

		@data_type string: Available data types:
		IGA_EDGE_SENSE
		IGA_EDGE_ORDER
		IGA_EDGE_CONTROL_POINTS
		IGA_EDGE_WEIGHTS
		IGA_EDGE_KNOTS
		IGA_EDGE_MULTIPLICITIES
		IGA_EDGE_XYZ

		@returns object: Returns based on the data type used:                IGA_EDGE_SENSE returns integer indicates if the edge should be flipped                IGA_EDGE_ORDER returns integer which is the order of the NURBS parametric curve                IGA_EDGE_CONTROL_POINTS returns a list of lists of doubles, which are the control points of the NURBS parametric curve                 IGA_EDGE_WEIGHTS returns list of doubles which are the weights of the control points of the NURBS parametric curve                IGA_EDGE_KNOTS returns list of doubles which form the knot vector of the NURBS parametric curve                IGA_EDGE_MULTIPLICITIES returns list of integers which form the multiplicities of the knot vector of the NURBS parametric curve                IGA_EDGE_XYZ returns the spatial edge

		"""


	def get_surface_data(data_type):

		"""

		Get iga Surface Data


		@data_type string: available data types:
		IGA_SURFACE_ORDER_S
		IGA_SURFACE_ORDER_T
		IGA_SURFACE_CONTROL_POINTS
		IGA_SURFACE_WEIGHTS
		IGA_SURFACE_KNOTS_S
		IGA_SURFACE_KNOTS_T
		IGA_SURFACE_MULTIPLICITIES_S
		IGA_SURFACE_MULTIPLICITIES_T

		@returns object: Returns based on the data type used:                IGA_SURFACE_ORDER_S returns integer which is the order of the NURBS surface in s direction                IGA_SURFACE_ORDER_T returns integer which is the order of the NURBS surface in t direction                 IGA_SURFACE_CONTROL_POINTS returns a list of lists of doubles which are the control points of the NURBS surface                IGA_SURFACE_WEIGHTS returns list of doubles which are the weights of the control points of the NURBS surface                IGA_SURFACE_KNOTS_S returns list of doubles which form the knot vector of the NURBS surface in s direction                IGA_SURFACE_KNOTS_T returns list of doubles which form the knot vector of the NURBS surface in t direction                IGA_SURFACE_MULTIPLICITIES_S returns list of integers which form the multiplicities of the knot vector of the NURBS surface in s direction                IGA_SURFACE_MULTIPLICITIES_T returns list of integers which form the multiplicities of the knot vector of the NURBS surface in t direction

		"""


	def export_ibra(iga_faces, output_path):

		"""

		Create an IBRA json file compatible with Kratos software, from IGA elements


		@iga_faces object: A list of IGA faces

		@output_path string: a full path name to save the json file

		@returns integer: Returns 0 on success otherwise an exception

		"""

class ActiveModularEnvironmentProfile():

	"""

	A class that provides interface to manage the active profile of Modular Environment

	"""


	target_solver = None
	"""
	Sets/Gets the Target Solver of the active profile.
	Accepted values: all available decks, i.e. "Nastran", "LsDyna" etc.

	"""

	discipline = None
	"""
	Sets/Gets the Discipline of the active profile.
	Accepted values: "nvh", "crash", "durability", "cfd", or
	any other value defined in dm_structrure.xml of the connected DM

	"""

	def get_key():

		"""

		Method to obtain the key of the active Modular Environment profile


		@returns object: Returns a dictionary that contains the active key

		"""


	def save_in_beta_home():

		"""

		Saves the active profile in BETA Home


		@returns boolean: Returns a boolean value to indicate success or failure

		"""


	def save_in_dm(conflicts_option, spin_up_attribute):

		"""

		Saves the active profile in the connected DM


		@conflicts_option string: (optional)Defines how to handle any conflicts with profiles that might preexist in DM. 
		Accepted values:
		- "Spin Up" : (default value)
		- "Overwrite"

		@spin_up_attribute string: (optional)In case that conflicts_option is set to "Spin Up", this argument controls 
		which attribute is going to be spinned up in case of a DM conflict
		- Default value: 'Version'

		@returns string: Returns the server id of the saved Modular Environment profile, in case that save in DM was successfully completed

		"""


	def load(profile_key):

		"""

		Loads a profile from the prefefined location which is higher in priority


		@profile_key object: A dictionary that contains the key of the profile that is going to be loaded

		@returns boolean: Returns a boolean value to indicate success or failure

		"""


	def import_from_custom_location(location):

		"""

		Imports definition and settings of a profile that is found in a custom location


		@location string: Filepath of the profie to import

		@returns boolean: Returns a boolean value to indicate success or failure

		"""


	def set_output_parameters(fields, mbcontainer_type):

		"""

		Sets values of output parameters for a specified Model Browser Container type


		@fields object: A dictionary which contains the keywords of output
		parameters mapped to their new values

		@mbcontainer_type string: The type of Model Browser Container that corresponds
		to the output parameters under modification. Can be:
		- "ANSA_LIBRARY_ITEM"
		- "ANSA_SUBSYSTEM"
		- "ANSA_SIMULATION_MODEL"
		- "ANSA_LOADCASE"
		- "ANSA_SIMULATION_RUN"

		@returns integer: Returns the number of any encountered errors

		"""


	def get_output_parameters(fields, mbcontainer_type):

		"""

		Returns the values of the specified output parameters of a Model Browser Container type


		@fields object: A list of the requested keywords of output parameters

		@mbcontainer_type string: The type of Model Browser Container that holds the output parameters. Can be:
		- "ANSA_LIBRARY_ITEM"
		- "ANSA_SUBSYSTEM"
		- "ANSA_SIMULATION_MODEL"
		- "ANSA_LOADCASE"
		- "ANSA_SIMULATION_RUN"

		@returns object: A dictionary that contains the values of the requested output parameters

		"""

def GetDMRoot():

	"""

	Returns the path that currently points to DM.


	@returns string: The function returns a string containing the current DM root.
	A string of length 0 is returned if no DM path is currently set.

	"""

def NewPTInstance(tree, child_identifier, part_identifier, parent_identifier, position_matrix, instance_attributes):

	"""

	Defines a new Product Tree Instance in the created product tree element.


	@tree object: The object returned from a previous call to 'NewProductTree' 
	function.

	@child_identifier anything: (string/integer) A unique id that will be used only internally from 
	the function for the interpretation of "parent-child" relationships
	(i.e. part in group, group in group)

	@part_identifier anything: (string/integer) The part_identifier must be equal to the unique 
	part_identifier of the master part.

	@parent_identifier anything: (string/integer) The parent identifier must be equal to the unique 
	child_identifier of the parent (as declared in NewPTInstance). 
	It is used internally for the interpretation of "parent-child"relationships 
	(i.e. part in group, group in group). If the instance is in the root of the 
	hierarchy (top-level item) then the parent identifier will be None.

	@position_matrix object: It is the relative 4x3 transformation list that will be assigned to 
	the part/group.

	@instance_attributes object: (optional)The instance_attributes list can contain any other information 
	regarding the part instance like target mass, mesh type etc.
	The list contains other lists which specify the name and the value of 
	each attribute e.g. 
	instance_attributes[0] = ["TARGET MASS","5"]
	instance_attributes[1] = ["MESH TYPE","coarse"]

	@returns integer: Returns 0 on success and -1 on failure.

	"""

def NewPTModel(tree, part_identifier, cad_file, part_file_attributes, part_file_position_matrix):

	"""

	Adds CAD or other file references to an existing Product Tree Part.


	@tree object: It is the element returned from a previous call to 'NewProductTree' 
	function.

	@part_identifier anything: (string/integer) The unique part_identifier of the part/group that 
	references the CAD files (as declared in NewPTPart).

	@cad_file string: The filename of the CAD.

	@part_file_attributes object: (optional)The part_file_attributes list can contain any other information
	regarding the part file attributes like property id, material id etc.
	The list contains other lists which specify the name and the value of
	each attribute e.g. 
	part_file_attributes[0] = ["PID","5"]
	part_file_attributes[1] = ["MID","50"]
	If no part_file_attributes are given, then a zero value can be
	assigned.

	@part_file_position_matrix object: (optional)Exported in the download list in order to be used for the application
	of a geometric transformation on the referenced file (e.g CAD file
	during translation). This list is different than the one defined in
	NewPTInstance since the latter is passed automatically to the ANSAPART
	created upon confirmation.

	@returns integer: Returns 0 on success and -1 on failure.

	"""

def NewPTPart(tree, part_identifier, module_id, version, name, part_attributes, is_group):

	"""

	Defines a new Product Tree Part in the created product tree.


	@tree object: It is the element returned from a previous call to 'NewProductTree' 
	function.

	@part_identifier anything: (string/integer) The part_identifier is a unique id that characterizes a product 
	tree structure item. This unique id will be later used for the 
	generation of "parent-child"relationships 
	(i.e. part in group, group in group) and the creation of multiple 
	instances (through NewPTInstance) and the addition of file 
	references(through NewPTModel).

	@module_id string: The string that will correspond to the module id of the group/part

	@version string: The string that will correspond to the version of the group/part.

	@name string: The string that will correspond to the name of the group/part.

	@part_attributes object: (optional)The part_attributes list can contain any other information 
	regarding the part like target mass, mesh type etc.The list
	contains other lists which specify the name and the value of 
	each attribute e.g.
	part_attributes[0] = ["TARGET MASS","5"]
	part_attributes[1] = ["MESH TYPE","coarse"]

	@is_group boolean: (optional)Flag that determines whether the created item is a part or a group. Default value is False.

	@returns integer: Returns 0 on success and -1 on failure.

	"""

def NewProductTree():

	"""

	Defines a new product tree.


	@returns object: Returns a reference to the newly created product tree object.

	"""

def SetDMRoot(dm_root, username, password, role):

	"""

	Sets the current DM root to the path DM_PATH.


	@dm_root string: A string that describes the path of the DM root directory.

	@username string: (optional)Username (For login in the SPDRM vault).

	@password string: (optional)Password (For login in the SPDRM vault).

	@role string: (optional)User role (For setting the user's role to SPDRM).

	@returns integer: Returns 1 if the new DM root has been set successfully and 0 otherwise.

	"""

def SetPTInstancePidOffset(tree, child_identifier, pid_offset):

	"""

	Defines PID offset to an existing Product Tree Instance.


	@tree object: The object returned from a previous call to the 'NewProductTree' function.

	@child_identifier anything: (string/integer) The unique id of an already defined part item.

	@pid_offset integer: The offset value of the PID for the specific instance. It can be
	a positive or negative integer. This information will be passed to 
	the ANSAPART created upon confirmation.

	@returns integer: Returns 0 on success and -1 on failure.

	"""

def LoadProductTreeStatus(tree, status_name, color_name):

	"""

	Loads a user defined status that can be shown in Tree Editor under the column "Status".
	A new status is defined with a name and a color. 
	After loading a user defined status use the function SetPTPartStatus in order to mark this part with this status.


	@tree object: The element returned from a previous call to the 'NewProductTree' function.

	@status_name string: The uique name of the new status.

	@color_name string: The color index of the new status. Currently, accepted values are: 
	"white", "green", "gray", "red", "orange", "blue", "magenta", "yellow".

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def SetPTPartStatus(tree, part_identifier, status):

	"""

	Marks a part (created with NewPTPart) with a user defined status (created with LoadProductTreeStatus).
	When opening the Tree Editor the column "Status" will be show the set status for this part.


	@tree object: The element returned from a previous call to 'NewProductTree' function.

	@part_identifier anything: (string/integer) The unique id that characterizes a product tree structure item.

	@status string: The unique name of the loaded user defined status.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

def ResolveFilePathAliases(filename):

	"""

	Resolves any directory aliases used in "filename" like DM or Include Path aliases.


	@filename: The path to the filename.

	@returns string: Returns a filename with the aliases expanded (replaced with their value), or the same filename if no aliases exist.

	"""

def IsDMRootConnectionValid(dm_root, reconnect):

	"""

	The function is used to check if the connection to the url-based DM root is actually valid.
	If no arguments are given, the current DM is checked.
	If a "dm_root" argument pair is given, then that url will be checked.


	@dm_root string: (optional)When this argument is given, then that url will be checked.

	@reconnect boolean: (optional)Set to True, if you automatically wish to try and reconnect if the connection is invalid.

	@returns integer: Returns 1 if the connection is valid, or 0 if it is invalid or no DM root has been defined.

	"""

def RemoveDMRoot(dm_root):

	"""
	Deprecated since version 17.0.0. Use function RemoveRoot instead.

	Removes the specified DM path or url from the "Set DM Paths" window list.


	@dm_root string: The path to the DM to remove.

	@returns integer: Returns 1 if the specified DM root has been removed successfully and 0 otherwise.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function RemoveRoot instead.", DeprecationWarning)

def AddFileInDM(file_name, type, attributes, server_id, dm_root, target_dm_root, add_attachments, add_component_children):

	"""

	Adds a file in the current DM.


	@file_name string: The file path of the file to be added in DM.

	@type string: Accepted values: 'parts', 'includes', 'Subsystems'.
	For parts an .ansa file must be provided.

	@attributes object: A dictionary with the key DM attributes of the file. 
	The module id, version, study version, file type and representation
	must be provided. The names of the attributes must be 
	provided as they appear in Part Manager and DM Browser.

	@server_id string: (optional)Instead of the file, a server id from a source dm root can be 
	provided as source. 'file_name' and 'server_id' are mutually 
	exclusive arguments.

	@dm_root string: (optional)The  dm root server_id refers to. if not provided, the current dm is assumed.
	This option is used only if server_id is provided.

	@target_dm_root string: (optional)The dm root where the file will be added. If not provided, the current dm 
	root is assumed. This option is used only if server_id is provided.

	@add_attachments boolean: (optional)Default: false. If true, any attachments of the server_id will also 
	be added in dm. This option is used only if server_id is provided.

	@add_component_children boolean: (optional)This option is used only if the server_id of a Subsystem is provided.
	If True: the parts of the subsystem will also be added in target dm.
	(Default: False)

	@returns integer: The function returns an integer:
	        0: Success.
	        1: Add in DM failed.
	        2: Invalid dm root.
	        3: Invalid input type.
	        4: Incomplete input dictionary.
	        5: Conflict between the input dictionary and the values in the provided file.
	        6: The file has not been produced with Save Representation.

	"""

def GetDMRootsList():

	"""

	Returns the whole DM Roots list, with all the info about which DM is current or 
	is enabled for "Check DM Updates".


	@returns object: Returns None in case no DM paths found or a list of dictionaries containing the information of each DM Root.
	The keys in each dictionary are shown in the following example:
	
	[{'updates_enabled': True, 'is_current': True, 'dm_root': '//mnt/DM1/'},
	 {'updates_enabled': True, 'is_current': False, 'dm_root': '//mnt/DM2/'},
	 {'updates_enabled': False, 'is_current': False, 'dm_root': 'http://dm3:8989/'}]

	"""

def AddDMObject(type, names_values, overwrite, link):

	"""
	Deprecated since version 19.0.0. Use  DMObject.add_new instead.

	This function adds an object to the DM, if it does not already exist.


	@type string: The type of the object to be added.

	@names_values object: A dictionary which holds the object's property and attribute values.

	@overwrite boolean: (optional)Set to True if the object should be overwritten, if it already exists in the DM.

	@link boolean: (optional)Set to True if you wish create a link to the file that corresponds to the object.

	@returns string: Returns the server id, as a string, on success, or None on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 19.0.0. Use  DMObject.add_new instead.", DeprecationWarning)

def GetDMObjectAttributeValues(type, names_values, server_id, attributes):

	"""
	Deprecated since version 17.0.0. Use class DMObject instead.

	This function can return some specified Attribute values of a dm object. The 
	object can be identified by either its server is, or its property values.


	@type string: The type of the object (required, if the names_values argument is present).

	@names_values object: (optional)A dictionary which holds the object's property values 
	(all property values must be present for the object's identification).

	@server_id string: (optional)The server id of the object, if it is already known.
	If present, the type and names_values arguments can be omitted.

	@attributes object: (optional)A list in which the user can specify Attribute names, for their values to be returned.
	If this arguments is not present, all the object's values will be returned.

	@returns object: If the object was found, a dictionary will be returned with the specified attribute values. 
	If the function fails, "None" will be returned.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class DMObject instead.", DeprecationWarning)

def SetDMObjectAttributeValues (type, names_values, server_id, attribute_names_values, attribute_names_types):

	"""
	Deprecated since version 19.0.0. Use class DMObject instead.

	This function can change Attribute values for a dm object. If an Attribute
	doesn't exist, then this function can also trigger its creation.
	The object can be identified by either its server is, or its property values.


	@type string: The type of the object (required, if the names_values argument is present).

	@names_values object: (optional)A dictionary which holds the object's property values
	(all property values must be present for the object's identification).

	@server_id string: (optional)The server id of the object, if it is already known.
	If present, the type and names_values arguments can be omitted.

	@attribute_names_values object: (optional)A dictionary which specifies the Attributes to change, in a names-values format.

	@attribute_names_types object: (optional)A dictionary mapping Attribute names to types. This information will be used
	in case new Attributes will be created and the DM supports typed Attributes.

	@returns boolean: True : If the at least one values was set successfully.
	False: If the function failed to set any value.

	"""

	import warnings; warnings.warn("Deprecated since version 19.0.0. Use class DMObject instead.", DeprecationWarning)

def ConnectDMObjectToDMObjects(server_id, references):

	"""

	This function connects dm objects, by referencing. After its execution, 
	the object whose server_id is given as argument, will reference
	the objects specified in the "references" dict.


	@server_id string: If the server id of the first object is known, the type and names_values arguments can be ommited.

	@references object: A dictionary which holds server_id->reference-type pairs.

	@returns boolean: True:  If the new references were made successfully.
	False: If the function failed to make one of the connections.

	"""

def GetComponentsAllValues(server_id, server_ids, type):

	"""
	Deprecated since version 16.2.0. Use function GetDMObjectAllValues instead.

	Deprecated: use ansa.base.GetDMObjectAllValues instead!!
	
	When connected to a DM, this function returns all the Properties and Attributes 
	for a DM Object in the form of a dictionary.


	@server_id string: (optional)The DM Object's server id.

	@server_ids object: (optional)A list with DM Object server ids.

	@type string: (optional)If the DM Object's type is known, use this argument to define it.
	Otherwise, the function will try to find the type itself.

	@returns object: A list with dictionaries for each DM Object that is actually found in DM.

	"""

	import warnings; warnings.warn("Deprecated since version 16.2.0. Use function GetDMObjectAllValues instead.", DeprecationWarning)

def GetDMObjectAllValues(server_id, server_ids, type):

	"""
	Deprecated since version 17.0.0. Use class DMObject instead.

	When connected to a DM, this function returns all the Properties and Attributes 
	for a DM Object in the form of a dictionary.


	@server_id string: (optional)The DM Object's server id.

	@server_ids object: (optional)A list with DM Object server ids.

	@type string: (optional)If the DM Object's type is known, use this argument to define it.
	Otherwise, the function will try to find the type itself.

	@returns object: A list with dictionaries for each DM Object that is actually found in DM.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class DMObject instead.", DeprecationWarning)

def GetAvailableLibraryItemsInDM(folder_name, search_for):

	"""
	Deprecated since version 17.0.0. Use function GetAvailableLibraryItems instead.

	This function can be used to get a list with all the items in a library in DM,
	e.g. all "batch_mesh_sessions" or specific "batch_mesh_sessions" that match a 
	search pattern.


	@folder_name string: The library's name.

	@search_for string: (optional)This can be a search pattern that will be used for the query.

	@returns object: Returns a list with all the library item names.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function GetAvailableLibraryItems instead.", DeprecationWarning)

def GetDMObjectId(type, names_values):

	"""

	Search in DM for a DM Object with specific properties and return its server id.
	The specified properties should describe a unique DM Object. If none or more than
	one DM Object are defined from the specified properties, None is returned.


	@type string: the type of the DM Object as it is defined in the dm_structure.xml
	(e.g. 'parts', includes', 'Subsystem', etc.).

	@names_values object: a {'Property':'Value'} dictionary which describes a unique DM Object.

	@returns string: Returns the server id of the DM Object on success and None on failure.

	"""

def SetAttributeValueString(names_values, type, server_id, attribute_name, attribute_value):

	"""

	This function can be used to set an attribute value to a DM Object.


	@names_values object: (optional)A dictionary defining the DM Object. When the server_id argument isn't given,
	the function will search for the DM Object using this set of Properties/Values.

	@type string: (optional)The DM Object's type.
	Although it's an optional argument, it needs to be defined.

	@server_id string: (optional)The DM Object's server id. It can be used if already known.

	@attribute_name string: (optional)The Attribute's name.
	Although it's an optional argument, it needs to be defined.

	@attribute_value string: (optional)The value that will be set to the Attribute.
	Although it's an optional argument, it needs to be defined.

	"""

def ExportDMObjectHierarchy(output_directory, names_values, type, server_id):

	"""
	Deprecated since version 17.0.0. Use class DMObject instead.

	When a DM Object can be defined by a DM Object hierarchy, e.g. a Subsystem,
	use this function to download the hierarchy and afterwards read it into ANSA.


	@output_directory string: Specifies where the xml will be downloaded.

	@names_values object: (optional)A dictionary defining the DM Object. When the server_id argument isn't given,
	the function will search for the DM Object using this set of Properties/Values.

	@type string: (optional)The DM Object's type.
	Although it's an optional argument, it needs to be defined when the 
	names_values argument is used.

	@server_id string: (optional)The DM Object's server id. It can be used if already known.

	@returns string: Returns the resulting directory on success.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class DMObject instead.", DeprecationWarning)

def ExportDMObject(output_directory, names_values, type, server_id):

	"""
	Deprecated since version 17.0.0. Use class DMObject instead.

	This function can be used to download a DM Object's Representation File from DM.


	@output_directory string: Specify where the file/files will be downloaded.

	@names_values object: (optional)A dictionary defining the DM Object. When the server_id argument isn't given,
	the function will search for the DM Object using this set of Properties/Values.

	@type string: (optional)The DM Object's type.
	Although it's an optional argument, it needs to be defined when 
	the names_values argument is used.

	@server_id string: (optional)The DM Object's server id. It can be used if already known.

	@returns string: Returns the resulting directory on success.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class DMObject instead.", DeprecationWarning)

def DeleteDMObject(names_values, type, server_id, only_representation_file):

	"""
	Deprecated since version 19.0.0. Use class DMObject instead.

	Deletes an Object from DM using this function.


	@names_values object: (optional)A dictionary defining the DM Object.
	When the server_id argument isn't given, the function will search 
	for the DM Object using this set of Properties/Values.

	@type string: (optional)The DM Object's type.
	Although it's an optional argument, it needs to be defined when the 
	names_values argument is used.

	@server_id string: (optional)The DM Object's server id. It can be used if already known.

	@only_representation_file string: (optional)Use "YES" when only the Representation File should be deleted and the 
	Object should be kept in the database.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

	import warnings; warnings.warn("Deprecated since version 19.0.0. Use class DMObject instead.", DeprecationWarning)

def GetAllAttrsFromUniqueRepresentations(server_id, server_ids, type, values, ask_ansa, object_id, object_ids):

	"""
	Deprecated since version 17.0.0. Use function GetAttributesFromUniqueRepresentations instead.

	This function will return all Properties/Attributes for a specific input, 
	either server ids, a filter or a DM Browser window item.


	@server_id string: (optional)The server id of the object, if it is already known.
	When specified, it will be used to query DM.

	@server_ids object: (optional)A list with server ids. When specified, it will be used to query DM.

	@type string: (optional)The type of the object (required, even though it's optional).

	@values object: (optional)A dictionary which holds a filter (names - values)
	that will be used when no server ids or object ids are defined.

	@ask_sdm boolean: (optional)In case of SDM CONSOLE, we can query the already downloaded values
	instead of querying DM.
	It should be used in cases where the query is expected to be very slow.

	@object_id string: (optional)When this function is called through an action in DM Browser or SDM CONSOLE,
	object_id is the GUI item's id. It can be used when we don't know the server_id.

	@object_ids object: (optional)A list with object ids, as described above.

	@returns object: Returns a list with dictionaries, with the specified attribute values. 
	If the function fails, the list will be empty.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use function GetAttributesFromUniqueRepresentations instead.", DeprecationWarning)

def BCSettingsGetUserDefinedValue(keyword):

	"""

	Returns the string value of user defined keyword with name keyword
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup.

	@returns: the value of the keyword, if keyword was found, otherwise returns  None.

	"""

def BCSettingsSetUserDefinedValue(keyword, value):

	"""

	Sets value value to user defined keyword keyword. 
	If keyword a\ keyword doesn't exist it will be created.
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup and set the new value.

	@value string: the new string value of the keyword

	@returns: 1 if value was set successfully to keyword keyword, 0 otherwise.

	"""

def BCSettingsUserDefinedKeywordExists(name):

	"""

	Checks if a user defined key with name name exists in BCSettingsHandler structure
	It will only search for a keyword not for a value.
	This function is not supported under VR mode.
	


	@name string: the keyword's name to look up.

	@returns: 1 if user defined keyword is found, 0 otherwise.

	"""

def BCSettingsReadFile(filePath):

	"""

	Reads a defaults file, from path filePath.
	
	Settings that will be read from the file, will be applied
	to the running application.
	This function is not supported under VR mode.
	


	@filePath string: the path of defaults file

	@returns: 1 if reading was succesfull, 0 otherwise.

	"""

def BCSettingsWriteFile(filePath):

	"""

	Writes a defaults file, at path filePath. If a filePath is not given,
	\the defaults file will be written in .BETA folder according to which
	\layout ANSA was launched (e.g. ANSA.defaults, CFD.defaults)
	If the file already exists, it will be overwritten.
	This function is not supported under VR mode.
	


	@filePath string: (optional)the path where the defaults file will be written.

	@returns: 1 if save was succesfull, 0 otherwise.

	"""

def BCSettingsWriteGroup(filePath, groupName):

	"""

	Writes the settings of Group named groupName, at path filePath.
	\If filePath is empty, the group will be written in defaults file located in .BETA folder
	\according to which layout ANSA was launched (e.g. ANSA.defaults, CFD.defaults)
	If file already exists, then the settings of the corresponding group will be updated.
	The rest of the file will remain intact.
	This function is not supported under VR mode.
	


	@filePath string: the path where the defaults file will be written.

	@groupName string: the group name, to write.

	@returns: 1 if save was succesfull, 0 otherwise.

	"""

def ExportDMObjectSubHierarchy(output_directory, names_values, type, server_id, child_server_id, hierarchy):

	"""
	Deprecated since version 17.0.0. Use class DMObject instead.

	"""

	import warnings; warnings.warn("Deprecated since version 17.0.0. Use class DMObject instead.", DeprecationWarning)

def InputModelDefinition(file_name, file_type, product_tree, settings):

	"""

	Imports a model definition in ANSA.


	@file_name string: (optional)The name of the file to import. It can be an empty string.
	In this case, the file manager opens to select a file.

	@file_type string: (optional)The type of the file to open.
	Valid types are: "VPM", "PLMXML", "CATProduct", "AP242", "STEP", "ProE", "JT", "NX", "3DXML", "Solidworks".

	@product_tree object: (optional)A product tree created from script with the function base.NewProductTree().

	@settings object: (optional)An object of type "base.InputProductTreeSettings()" for defining the settings 
	when reading the file.

	@returns integer: Returns 1 on success, 0 on failure.

	"""

def BCSettingsGetDefaultValue(keyword):

	"""

	Returns the default value of keyword with name keyword as string
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup.

	@returns: the value of the keyword, if keyword was found, otherwise returns  None.

	"""

def BCSettingsGetStartupValue(keyword):

	"""

	Returns the startup value of keyword with name keyword as string
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup.

	@returns: the value of the keyword, if keyword was found, otherwise returns  None.

	"""

def BCSettingsGetValues (fields):

	"""

	This function returns the values of any keyword supported by .defaults file(s).


	@fields object: A tuple of keywords, supported by the .default file(s), whose values will be retrieved.

	@returns object: On success it returns a dictionary where the keys are the .defaults keywords,
	provided as arguments, and the values are their current application values.
	On failure it returns None.
	NOTE: A value can be either a single string or a list of strings, if the keyword supports multiple instances, i.e. can be set more than once.

	"""

def BCSettingsSetValues (fields):

	"""

	This function changes values supported by the .defaults file(s) (settings).


	@fields object: A dictionary with keys any valid keyword supported by the .defaults file(s) and values a single string or a list of string values.

	@returns integer: Returns 0 on success and 1 on failure.

	"""

class InputProductTreeSettings():

	"""

	InputProductTreeSettings is a module for defining the Product Tree Editor settings when importing a model definition with ansa.base.InputModelDefinition.

	"""


	check_for_representations = None
	"""
	Sets more representation names to be checked in DM, in addition to 'common'.
	For example: 'crash, nvh, dura'.
	Note that the representation 'common' will always be checked.

	"""

	relative_path = None
	"""
	Defines the relative path that will be used for locating relative part file 
	paths that start with '.' or './'.

	"""

	directory_of_cad_files = None
	"""
	Defines an additional directory path that will be used for locating 
	the part files.

	"""

	post_actions_script_path = None
	"""
	Defines the path of the python file that contains the post actions 
	script function.

	"""

	post_actions_script_function = None
	"""
	Defines a post actions script function to be applied on the input model 
	with the following prototype:
	MyFun(product_tree, *args, **kwargs),
	where product_tree is a python object of type ansa.base.ProductTree()

	"""

	use_plmxml_parser = None
	"""
	Selects the PLMXML parser. Valid values:
	- 'Auto': ANSA will try to recognize the correct parser according to 
	  the file format (default).
	- 'Vismockup': Force using the Vismockup parser (always the ProductDef 
	  is parsed).
	- 'Teamcenter': Force using the Teamcenter parser (ProductDef or 
	  ProductView is parsed).

	"""

	read_plmxml_structure = None
	"""
	Defines where to read the parts structure from, when parsing PLMXML files.
	Valid values:
	- 'ProductView': Read the parts structure from ProductView > Occurrence
	  (absolute transformation matrices) (default).
	- 'ProductDef': Read the parts structure from ProductDef > InstanceGraph 
	  > ProductInstance (relative transformation matrices).

	"""

	read_plmxml_attributes = None
	"""
	Defines which attributes (UserData->UserValue) should be read when 
	parsing PLMXML files. Valid values:
	- 'None': No attribute will be read (default).
	- 'All': All attributes will be read from any xml node.
	- 'Specific': Only attributes defined in 
	  'plmxml_specific_attributes_to_read' will be read.

	"""

	plmxml_specific_attributes_to_read = None
	"""
	Defines the attribute names that will be read when parsing PLMXML files.
	- Add attribute names with prefix (will be searched only in specific mode).
	  Example: 'Form/SubType/MyAttribute1, Occurrence/MyAttribute2, 
	  Product/MyAttribute3'.
	- Add attribute names without any prefix (will be searched in any xml node).
	  Example: 'MyAttribute1, MyAttribute2, MyAttribute3'.
	- Add only the prefix. All attributes inside these xml nodes will be read.
	  Example: 'Form/*, Form/subType/*, Occurrence/*, Product/*'.

	"""

	read_plmxml_related_properties = None
	"""
	In  PLMXML files some relations exist where one item points to another.
	For example: <GeneralRelation relatedRefs="#id10 #id20">. 
	This member defines which values should be kept. Valid values:
	- 'Keep original' (left: #id10).
	- 'Keep related' (right: #id20) (default).

	"""

	read_plmxml_related_part_files = None
	"""
	In  PLMXML files some relations exist where one item points to another.
	For example: <GeneralRelation relatedRefs="#id10 #id20">. 
	This member defines which values should be kept. Valid values:
	- 'Keep original' (left: #id10).
	- 'Keep related' (right: #id20) (default).
	- 'All'.

	"""

	read_plmxml_related_attributes = None
	"""
	In  PLMXML files some relations exist where one item points to another.
	For example: <GeneralRelation relatedRefs="#id10 #id20">. 
	This member defines which values should be kept. Valid values:
	- 'Keep original' (left: #id10).
	- 'Keep related' (right: #id20) (default).

	"""

	part_name_convert = None
	"""
	If set to True, converts the part names when importing structure from 
	Product Tree Editor to ANSA. Prepends the part number and the part 
	version: PartNumber_PartVersion_PartName.
	(Default: True)

	"""

	should_open_window = None
	"""
	If set to True, opens the Product Tree Editor window.
	(Default: True)

	"""

	read_part_name_from_keys = None
	"""
	Defines the exact xml keys with specific priority to read 'Name'. 
	e.g. 'name, Name'

	"""

	read_part_number_from_keys = None
	"""
	Defines the exact xml keys with specific priority to read 'Part Number'. 
	e.g. 'part number, PartNumber'

	"""

	read_part_version_from_keys = None
	"""
	Defines the exact xml keys with specific priority to read 'Version'.
	e.g. 'Version, version, revision'

	"""

	compress_parts = None
	"""
	Delete from hierarchy all parts that have no part files.
	(Default: False)

	"""

	keep_different_versions_per_part_number = None
	"""
	When the ANSA setting 'Allow Multi Version Parts' is not selected, use this setting to show in Product Tree Editor hierarchy parts with same Part Number and different Versions. 
	(Default: False)

	"""

	handle_jt_files_as_monolithic = None
	"""
	Handle the attached JT files as Monolithic JT files during CAD to AnSA translation.
	(Default: True)

	"""

	ignore_part_files_on_groups = None
	"""
	Remove all attached part files from groups.
	(Default: False)

	"""

	define_groups_on_empty_occurrenceRefs_value = None
	"""
	When parsing Teamcenter plmxmls, if the value of the occurrenceRefs field is the empty string the Occurrence will be considered a group instead of a part.
	(Default: False)

	"""

	compress_groups = None
	"""
	Delete from hierarchy all groups that have no parts and no part files. 
	(Default: False)

	"""
def BCSettingsGetUserDefinedValue(keyword):

	"""

	Returns the string value of user defined keyword with name keyword
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup.

	@returns: the value of the keyword, if keyword was found, otherwise returns  None.

	"""

def BCSettingsSetUserDefinedValue(keyword, value):

	"""

	Sets value value to user defined keyword keyword. 
	If keyword a\ keyword doesn't exist it will be created.
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup and set the new value.

	@value string: the new string value of the keyword

	@returns: 1 if value was set successfully to keyword keyword, 0 otherwise.

	"""

def BCSettingsUserDefinedKeywordExists(name):

	"""

	Checks if a user defined key with name name exists in BCSettingsHandler structure
	It will only search for a keyword not for a value.
	This function is not supported under VR mode.
	


	@name string: the keyword's name to look up.

	@returns: 1 if user defined keyword is found, 0 otherwise.

	"""

def BCSettingsReadFile(filePath):

	"""

	Reads a defaults file, from path filePath.
	
	Settings that will be read from the file, will be applied
	to the running application.
	This function is not supported under VR mode.
	


	@filePath string: the path of defaults file

	@returns: 1 if reading was succesfull, 0 otherwise.

	"""

def BCSettingsWriteFile(filePath):

	"""

	Writes a defaults file, at path filePath. If a filePath is not given,
	\the defaults file will be written in .BETA folder according to which
	\layout ANSA was launched (e.g. ANSA.defaults, CFD.defaults)
	If the file already exists, it will be overwritten.
	This function is not supported under VR mode.
	


	@filePath string: (optional)the path where the defaults file will be written.

	@returns: 1 if save was succesfull, 0 otherwise.

	"""

def BCSettingsWriteGroup(filePath, groupName):

	"""

	Writes the settings of Group named groupName, at path filePath.
	\If filePath is empty, the group will be written in defaults file located in .BETA folder
	\according to which layout ANSA was launched (e.g. ANSA.defaults, CFD.defaults)
	If file already exists, then the settings of the corresponding group will be updated.
	The rest of the file will remain intact.
	This function is not supported under VR mode.
	


	@filePath string: the path where the defaults file will be written.

	@groupName string: the group name, to write.

	@returns: 1 if save was succesfull, 0 otherwise.

	"""

def BCSettingsGetDefaultValue(keyword):

	"""

	Returns the default value of keyword with name keyword as string
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup.

	@returns: the value of the keyword, if keyword was found, otherwise returns  None.

	"""

def BCSettingsGetStartupValue(keyword):

	"""

	Returns the startup value of keyword with name keyword as string
	This function is not supported under VR mode.
	


	@keyword string: the keyword name to lookup.

	@returns: the value of the keyword, if keyword was found, otherwise returns  None.

	"""


class checks():
	class geometry():
		def Cracks():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def NeedleFaces():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def OverlapFaces():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SingleCons():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def TripleCons():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UncheckedFaces():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def unmeshedMacros():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CollapsedCons():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		
	class general():
		def AbaqusDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def AbaqusLoop():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def AmplitudesAxes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-axis2: 1
			-axis1: 1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def AmplitudesEndTime():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CFasts():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CWelds():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			dratio     = 1.0
			freegagb   = 1
			gsproj     = 20.0
			projtol    = 0.02
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ClosedTieLoops():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CohesiveOrientation():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CohesiveSolidOrientation():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ConstrRB_LongChain():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-distance: 100.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ConstrRB_PIDM_PIDS_Distance():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-distance: 100.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ContactOrientation():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Contacts():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			min_depth = 0
			detect_intersections_only = 0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Coupling():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CurvesAxes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-check_y: 1
			-check_x: 1
			-check_mode: of all database
			-max_yield_stress   : 2.5
			-max_plastic_strain : 3.0
			-max_scale_factor   : 2.0
			-max_strain_rate    : 20.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CurvesEndTime():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-read_from_control: 1
			-end_time: 0.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def DBCrossSection():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def DBHistories():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def DuplicateElements():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			
			-report_material_null_elements : False
			-separate_by: 'GEOM/FE'
			-report_semi_dupl_solids : False
			-report_only_elements_with_same_pid : False
			
			valid values for `separate_by': 'GEOM/FE', 'Max IDs', 'Min IDs'
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def DuplicatePermasIDs():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def DuplicateSetNames():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ExternalConsWithoutBCs():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FastenersConnectivity():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FastenersEccentricity():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-max_eccentricity: 0.5
			-min_eccentricity: 
			-max_number_of_nodes: 
			-min_number_of_nodes:
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FlangesWeldSpots():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-angle_tolerance: 10.0
			-min_weld_spots: 5
			-identify: Identify Flanges
			-factor: 2.0
			-min_weld_spot_distance: 10.0
			-wanted_weld_spot_distance: 40.0
			-max_weld_spot_distance: 40.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FunctAxes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-check_y: 1
			-check_x: 1
			-check_mode: of all database
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FunctEndTime():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-end_time: 0.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Incomplete():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def InitialVelocity():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Joints():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Kinematics():
		
			"""
		
			(Warning: This check is deprecated in favour of Kinetics: ansa.base.checks.general.Kinetics())
			
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def LaminateMappedData():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			
			-is_tol_absolute 1 / 0: 1
			-thickness_tolerance double: 15.0
			-theta_tolerance double: 15.0
			-functionality string: 'Thickness' (other allowable values: 'Theta', 'Thickness & Theta')
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Length():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-upper_limit: 1.5
			-lower_limit: 0.1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def LsDynaRigidDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MPDATA_EndTime():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-end_time: 0.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MassScaleRatio():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default parameters:
			-To: BLANK 
			-From:  1.5
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Massless():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-beam_orient_nodes: 1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MaterialTheta():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-tolerance double : 15.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ModelData():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MultiDampingGlobal():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MultipleBCs():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def NastranDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def NastranLoop():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def OpenFOAM_CheckMesh():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-topological_cell_zip_up:   1
			-non_orthogonality:         1
			-skewness:                  1
			-closed_cells:              1
			-aspect_ratio:              1
			-face_face_connectivity:    1
			-empty_patch_faces:         1
			-non_aligned_edges:         1
			-upper_triangular_ordering: 1
			-warping:                   1
			-face_vertices:             1
			-symmetry_plane:            1 
			-concave_cells:             1
			-face_tetquality:           1
			-concave_faces:             1 
			-determinant:               1
			-report_semi_dupl_solids    1
			-negative_volume_cells      1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def PBxSECT():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def PLinks():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def PamcrashDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def PermasDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-apply_on_situation: 0
			-situation_id:
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def RadiossRigidDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Range():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def RangesOfIDsWithinIncludes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Rbe3Definition():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-tolerance:
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SPCsOnRigidBodyNodes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SenptSearchDistance():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SestraDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SolidFormulation():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SpotWelds():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			on_neigh_shell         = 0
			on_same_shell          = 1
			degrees                = 20.0
			conflicts_with_rigids  = 1
			angle_to_normal        = 1
			invalid_spotweld_beams = 1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def THLOC():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Tables():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ThickShellOrientation():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UnclosedPolyhedra():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UnconnectedRegions():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.Attributes and default values:
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UnconnectedRegionsRigids():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UndefinedMaterials():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UndefinedProperties():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Materials():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			
			tolerance = 0.0
			case_sensitive: 1 
			
			The 'case_sensitive' attribute will be taken into account only if names
			are considered for the check.
			
			compare_by: 'Ids'
			Appropriate values for attribute 'compare_by' are:
			1. 'Ids'
			2. 'Names'
			3. 'Most similar'
			
			If compare_by is 'Most similar', you can also set the 
			following two attributes:
			-consider_names: 0
			-consider_ids: 0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FreeNodes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			consider_nodes_with_mass_free                             = True
			do_not_report_free_nodes_attached_to_non_visible_entities = True
			do_not_report_master_nodes_of_rigid_bodies                = True
			consider_auxiliary_nodes_as_free                          = True
			report_scalar_nodes                                       = True
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def IDsSpecialNumberingRules():
		
			"""
			Deprecated since version 20.0.0. Use function IDsNumberingRules instead.
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
		
		
			@types string: a string with comma separated group names
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def IDsSpecialNumberingRules():
		
			"""
			Deprecated since version 20.0.0. Use function IDsNumberingRules instead.
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
		
		
			@types string: a string with comma separated group names
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
			import warnings; warnings.warn("Deprecated since version 20.0.0. Use function IDsNumberingRules instead.", DeprecationWarning)
		
		def Geometry():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			unmeshed_macros   = 0 
			needle_faces      = 1
			single_cons       = 0
			collapsed_cons    = 1
			unchecked_faces   = 1
			triple_cons       = 1
			sharp_edges       = 0
			cracks            = 1
			sharp_edges_angle = 120.0
			overlap_faces     = 1
			sharp_edges_type  = 0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FromDescription(description):
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			run a user-defined check given as a CheckDescription object.
		
		
			@description object: The user-defined CheckDecription object.
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Rbe2gsConflictingIds():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MultiReferencedNodes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			min_number_of_referers = 3
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Frozen():
		
			"""
		
			This function creates a check object that will perform the "Frozen Entities"
			check when executed. This check reports all entities that have at least one 
			of FROZEN, FROZEN_DELETE, FROZEN_ID set to YES. 
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Connections():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			The returned check object has the following attributes and default values:
			
			-check_num_of_parts: False
			-check_max_distance: True
			-check_min_distance: True
			-check_flanges_angle: True
			-check_projections_proximity: False
			-check_total_thickness: True
			-check_double_connections: False
			-check_spider_positioning: True
			-check_intersecting_parts: True
			-check_connections_outside_flange: True
			-projection_tolerance: 10.0
			-max_allowed_angle: 20.0
			-min_allowed_distance: 1.0
			-max_allowed_total_thickness: 5.0
			-equivalent_connectivity: False
			-spot_distance: 5.0
			-similarity: 75.0
			-curve_face_distance: 5.0
			-equal_types: True
			-diameter: 10.0
			-feature_angle: 20.0
			-feature_distance: 0.5
			-perimeter_distance: 0.5
			-min_average_thickness_factor: 0.5
			-min_absolute_distance: 5.0
			-max_average_thickness_factor: 1.5
			-max_absolute_distance: 10.0
			-double_connections_average_thick_factor: 0.5
			-zone1_width: 5.0
			-zone2_width: 0.0
			-zone1_definition_method: '' (other choices: '*diam', '*thickness', 'by script')
			-zone2_definition_method: '' (other choices: '*diam', '*thickness', 'by script')
			-checkPartialConnLineRealization: False
			-minPercentageOfRealizedLine: 80
			-max_distance_method: 'By average thickness'
			-min_distance_method: 'By average thickness'
			-double_connections_method: 'By average thickness'
			-projection_center_distance = 5.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Connectivity():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def DuplicatePIDNames():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will search for duplicate PID names and report them. It will perform the same with the relevant ANSA check "Duplicate PID names".
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ContactsSegments():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Auxiliaries():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def RigidMasterNodes():
		
			"""
		
			This function creates an appropiate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def InitialConditionsIntegrationPoints():
		
			"""
		
			This function creates an appropiate Check object which, when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SeatBelts():
		
			"""
		
			This function creates an appropiate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CohesiveSolidConnectivity():
		
			"""
		
			This function creates an appropiate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def GEBStatus():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ContactsOverlap():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Loadcase():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the 
			same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-apply_referenced_ents = False
		
		
			@returns object: Returns the newly created 'base.Check' object
		
			"""
		
		def Rbe2ConflictingIds():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CheckCracks():
		
			"""
			Deprecated since version 20.0.0. Use function CrackTipElements instead.
		
			This function creates a Check object, which when executed, will perform the checks listed below, on all CRAC2D/CRAC3D Nastran elements, as performed by the relevant ANSA Check.
			
			1. Element planarity: 
			- CRAC2D: All nodes defining this element should reside on the same plane.
			- CRAC3D: All nodes defining the outer faces and midplane, perpendicular to the crack plane, should all reside in their corresponding planes. This means that the grid point groups: [G2 through G18], [G20 through G36] and [G37 through G46], should each reside in a specific plane.
			
			2. Element sizing ratio:
			The ratio y to x axis in the element coordinate system should be in the range 2.0 to 0.5. The x-axis of the element coordinate system is defined by nodes G1 and G6 and the y-axis is defined by nodes G1 and G4 (this check holds for elements of either type CRAC2D or CRAC3D).
			
			3. Crack tip nodes coincidence:
			- CRAC2D: The crack tip nodes pair [G2, G10] should coincide.
			- CRAC3D: The crack tip node pairs [G2, G10], [G20, G28] and (if included) [G38, G46] should coincide.
			
			4. Midside location (CRAC3D only):
			- All the midplane nodes (G37 through G46) should be located within the middle third of the perpendicular edges. 
			
			
			Attributes and default values:
			check_coincident_crack_tip_nodes     = 1
			check_side_ratio                     = 1
			check_planar_tolerance               = 0.05
			check_mid_plane                      = 1
			check_coincident_crack_tip_tolerance = 0.05
			check_planar_nodes                   = 1
			
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CheckCracks():
		
			"""
			Deprecated since version 20.0.0. Use function CrackTipElements instead.
		
			This function creates a Check object, which when executed, will perform the checks listed below, on all CRAC2D/CRAC3D Nastran elements, as performed by the relevant ANSA Check.
			
			1. Element planarity: 
			- CRAC2D: All nodes defining this element should reside on the same plane.
			- CRAC3D: All nodes defining the outer faces and midplane, perpendicular to the crack plane, should all reside in their corresponding planes. This means that the grid point groups: [G2 through G18], [G20 through G36] and [G37 through G46], should each reside in a specific plane.
			
			2. Element sizing ratio:
			The ratio y to x axis in the element coordinate system should be in the range 2.0 to 0.5. The x-axis of the element coordinate system is defined by nodes G1 and G6 and the y-axis is defined by nodes G1 and G4 (this check holds for elements of either type CRAC2D or CRAC3D).
			
			3. Crack tip nodes coincidence:
			- CRAC2D: The crack tip nodes pair [G2, G10] should coincide.
			- CRAC3D: The crack tip node pairs [G2, G10], [G20, G28] and (if included) [G38, G46] should coincide.
			
			4. Midside location (CRAC3D only):
			- All the midplane nodes (G37 through G46) should be located within the middle third of the perpendicular edges. 
			
			
			Attributes and default values:
			check_coincident_crack_tip_nodes     = 1
			check_side_ratio                     = 1
			check_planar_tolerance               = 0.05
			check_mid_plane                      = 1
			check_coincident_crack_tip_tolerance = 0.05
			check_planar_nodes                   = 1
			
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
			import warnings; warnings.warn("Deprecated since version 20.0.0. Use function CrackTipElements instead.", DeprecationWarning)
		
		def UnconnectedCrossSectionFlanges():
		
			"""
		
			This function creates a Check object, which when executed, will detect Cross Sections with unconnected flanges, as performed by the relevant ANSA Check.
			
			Attributes and default values:
			-tolerance_t_fac : 1.2
			-widthwise_step  : 0.0
			-parallel_limit  : 10.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def IncludeTransformRangeIds():
		
			"""
		
			This function creates a Check object, which when executed, will perform the checks listed below, 
			on all *INCLUDE_TRANSFORM LS-DYNA entities, as performed by the relevant ANSA Check.
			
			1. *INCLUDE_TRANSFORM has no NumberingRule specified for it:
			   *INCLUDE_TRANSFORM should not contain entities that have id smaller than specified offset.
			   Fix assigns id bigger than the specified offset to these entities.
			   
			2. *INCLUDE_TRANSFORM has NumberingRule specified for it:
			   a. *INCLUDE_TRANSFORM should not have conflicting Numbering Rules specified for it, e.g. a General Numbering Rule,
			      start_id = 5 and *INCLUDE_TRANSFORM has IDNOFF = 10, regardles if any of the *INCLUDE_TRANSFORM contents have
			      id smaller than the specified offset.
			      Fix will update the NumberingRule's start_id.
			      
			   b. *INCLUDE_TRANSFORM should not contain entities with ids smaller than the specified offset while 
			      a conflicting NumberingRule is specified for it.
			      Fix will apply the NumberingRules, assuming that this is the fault.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def FluidNodes():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def DuplicatePropertySetNames():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def Kinetics():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def SetRegions():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def ExtraNodesConnectivity():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def Undefined():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def CommonNodes():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def ContactsFromSolver():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def EmptySets():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def AnsysDependency():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			
			report_organization : 0
			
			Appropriate values for attribute 'report_organization' are 0 and 1.
			On 0 report is organized per entity error.
			On 1 report is organized per step (same error might appear in multiple steps).
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Sonate():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def RadiossSubmodelSelfContained():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def DBCheckPS():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by "Database: Check CS" ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def DBCheckCS():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by "Database: Check Part Set" ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def IncludeSelfContained():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns: Returns the created 'base.Check' object.
		
			"""
		
		def TAU_CheckMesh():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def CrackTipElements():
		
			"""
		
			This function creates a Check object, which when executed, will perform the checks listed below, on all CRAC2D/CRAC3D Nastran elements, as performed by the relevant ANSA Check.
			
			1. Element planarity: 
			- CRAC2D: All nodes defining this element should reside on the same plane.
			- CRAC3D: All nodes defining the outer faces and midplane, perpendicular to the crack plane, should all reside in their corresponding planes. This means that the grid point groups: [G2 through G18], [G20 through G36] and [G37 through G46], should each reside in a specific plane.
			
			2. Element sizing ratio:
			The ratio y to x axis in the element coordinate system should be in the range 2.0 to 0.5. The x-axis of the element coordinate system is defined by nodes G1 and G6 and the y-axis is defined by nodes G1 and G4 (this check holds for elements of either type CRAC2D or CRAC3D).
			
			3. Crack tip nodes coincidence:
			- CRAC2D: The crack tip nodes pair [G2, G10] should coincide.
			- CRAC3D: The crack tip node pairs [G2, G10], [G20, G28] and (if included) [G38, G46] should coincide.
			
			4. Midside location (CRAC3D only):
			- All the midplane nodes (G37 through G46) should be located within the middle third of the perpendicular edges. 
			
			
			Attributes and default values:
			check_coincident_crack_tip_nodes     = 1
			check_side_ratio                     = 1
			check_planar_tolerance               = 0.05
			check_mid_plane                      = 1
			check_coincident_crack_tip_tolerance = 0.05
			check_planar_nodes                   = 1
			
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def IDsNumberingRules():
		
			"""
		
			Checks if entities' IDs of selected groups fulfill the existing numbering rules.
			
			Attributes and default values:
			types                    = ""
			check_only_special_rules = False
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Llinks():
		
			"""
		
			Checks definitions of LLINKs.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UniqueDefinitionEntities():
		
			"""
		
			Checks for multiple keywords definitions (*DAMPING_GLOBAL, *TERMINATION_SENSOR, *INITIAL_VELOCITY_GENERATION_START_TIME)
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ThinCrossSectionToSolid():
		
			"""
		
			This function creates a Check object, which when executed, will detect thin Cross Sections that cannot be converted to solid ones, as performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MpcIsurfaces():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns: Returns the created 'base.Check' object.
		
			"""
		
		def MeltEntrance():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def LaminateLayerContinuity():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ActranFSCoupling():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			common_nodes          = True
			referenced_components = True
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		
	class mesh():
		def FreeOppositeEdges():
		
			"""
		
			(Warning: This check is deprecated in favour of Hourglass Effect check --> ansa.base.checks.mesh.HourglassEffect())
			
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			oppos_edges  = 1
			corner_quads = 0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def HangingEdges():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			This check will identify all Hanging edges in the model from Solids and Shells.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def IsolatedSolids():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MeshCompatibility():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			tolerance = 0.1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def MeshQuality():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			quality_criteria = ""
			
			Fix Attributes and default values:
			fix_method = 2 
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def NegativeVolume():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			
			-calculation_method : "PARTIAL"
			
			valid values for `calculation_method': 'PARTIAL', 'TOTAL'
			
			
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Pyramids():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SharpEdges():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			sharp_edges_type = 0
			angle            = 120.0
			exclude_edges    = 0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ShellsWithoutSolids():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SingleBounds():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def TriasAttachedOnBoundary():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def TriasAttachedOnHoles():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-check_zone_shells               : 1
			-check_manual_zones              : 1
			-max_number_of_zones             : 1
			-check_by_node                   : 1
			-check_by_edge                   : 1
			-check_on_perimeters             : 1
			-max_hole_diameter               : 100.0
			-check_auto_zones                : 1
			-include_connection_filled_holes : 0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def TriasOnCorner():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def TripleBounds():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def VoidAreas():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UncoveredFaces():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SolidsOnShells():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			check for solids on shells. The connectivity can be based on facets or nodes. 
			
			Attributes and default values:
			-connected_by : "Facets" or "Nodes"
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SolidCracks():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			mode      = 0
			tolerance = 0.15
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UnreferencedShells():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			check for shells that do not coincide with any solid facet.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def FreeSolidFaces():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			check for solid faces that are not attached to any shell.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ShellsAndFacesOrientation():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def TetrasOnBoundary():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def OneRowTetras():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Symmetry_Plane():
		
			"""
			Deprecated since version 17.1.1. Use function SymmetryPlane instead.
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Symmetry_Plane():
		
			"""
			Deprecated since version 17.1.1. Use function SymmetryPlane instead.
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
			import warnings; warnings.warn("Deprecated since version 17.1.1. Use function SymmetryPlane instead.", DeprecationWarning)
		
		def MacroInternalBounds():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def SymmetryPlane():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def ConcaveAreas():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def UnclosedVolumeElements():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def NonManifoldNodes():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.Attributes and default values:
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def HourglassEffect():
		
			"""
		
			This function creates an appropriate checks object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			obj.oppos_edges  = True
			obj.corner_quads = True
		
		
			@returns object: Returns the requested 'base.Check' object.
		
			"""
		
		def SolidsWithSingleCommonEdge():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform the same checks that are performed by the relevant ANSA Check.
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		
	class penetration():
		def DistanceRange():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			upper_limit: 1.0
			lower_limit: 0.5
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def InteriorIntersections():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			
			Attributes and default values:
			
			-check_same_pids : 1
			
			
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Intersections():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will perform
			the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			
			-check_same_pids : 1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def PropertyThickness():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-factor                     : 1.0
			-allow_samepart_proximities : 0
			-check_same_pids            : 1
			-round_edges                : 1
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def Proximities():
		
			"""
		
			This function creates an appropriate Check object, that when executed, will
			perform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-factor: 0.25
			-check_orient_mode: 'Check grey-grey' (other allowable values: "Check yellow-yellow", "Check both orientations")
			-search_by: 'Search by element length factor'
			-check_same_pids: 1
			-check_orientation_angle: 30.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def RepositionFlanges():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-search_angle    : 20.0
			-search_distance : 2.5
			-desired_distance: 0.4
			-desired_factor  : 1.0
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		def UserThickness():
		
			"""
		
			This function creates an appropriate Check object, that when executed, willperform the same checks that are performed by the relevant ANSA Check.
			
			Attributes and default values:
			-user_thickness            : 1.0
			-allow_samepart_proximities: 0
			-check_same_pids           : 1
			-round_edges               : 1
			
		
		
			@returns object: Returns the created 'base.Check' object.
		
			"""
		
		
class constants():
	LINE_ANGLE_SELECTION = int
	
	"""
	Pick line elements with the Feature Selection>Feature Line method.
	
	"""
	
	LOOP_SELECTION = int
	
	"""
	Pick line elements with the Feature Selection>Loop method.
	
	"""
	
	PID_NEIGHB_SELECTION = int
	
	"""
	Pick line elements with the Feature Selection>PID Neighbs method.
	
	"""
	
	OPPOSITE_SELECTION = int
	
	"""
	Pick line elements with the Feature Selection>Opposite method.
	
	"""
	
	POLY_LINE_NODE_SELECTION = int
	
	"""
	Pick line elements with the Feature Selection>Path method.
	
	"""
	
	POLY_LINE_OPPOSITE_SELECTION = int
	
	"""
	Pick line elements with the Feature Selection>Opposite Path method.
	
	"""
	
	AREA_ANGLE_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>Feature Area method.
	
	"""
	
	PID_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>PID method.
	
	"""
	
	PID_REGION_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>PID Region method.
	
	"""
	
	MID_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>MID method.
	
	"""
	
	VOL_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>VOL method.
	
	"""
	
	PART_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>PART method.
	
	"""
	
	CFD_BC_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>BC method.
	
	"""
	
	INCLUDE_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>Include method.
	
	"""
	
	HBOX_FACE_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>Hexa Box Face Area method.
	
	"""
	
	MACRO_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>Macro method.
	
	"""
	
	POLY_AREA_AREA_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>Poly Area method.
	
	"""
	
	POLY_LINE_AREA_SELECTION = int
	
	"""
	Pick area elements with the Feature Selection>Poly Line method.
	
	"""
	
	ENT_SELECTION = int
	
	"""
	Pick line or area elements with the Feature Selection>ENT method.
	
	"""
	
	